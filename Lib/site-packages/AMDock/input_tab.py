import Queue
import glob
import os
import re
import shutil
import math

from PyQt4 import QtGui, QtCore
from command_runner import PROCESS, THREAD
from result2tab import Result_Analysis, Scoring2table
from some_slots import progress
from tools import GridDefinition, Fix_PQR, PDBINFO, BASE, PROJECT
from variables import Variables
from warning import wdir2_warning, prot_warning, lig_warning, stop_warning, error_warning, smallbox_warning, \
    reset_warning, define_wdir_loc





class Program_body(QtGui.QWidget):
    def __init__(self, parent=None):
        super(Program_body, self).__init__(parent)
        self.setObjectName("program_body")
        self.AMDock = parent
        with open(self.AMDock.style_file) as f:
            self.setStyleSheet(f.read())

        self.part = 0
        self.total = 0
        self.grid = 0
        self.size = [30, 30, 30]
        self.lig_size = 0
        self.need_grid = True
        self.need_gridB = True
        self.build = self.buildB = False
        self.process_list = []
        # self.wdir_loc = None
        

        self.sc_area = QtGui.QScrollArea(self)
        self.sc_area_widget = QtGui.QWidget()

        # **project_box
        self.project_box = QtGui.QGroupBox(self.sc_area_widget)
        self.project_box.setObjectName("project_box")
        self.project_box.setTitle("Project")
        self.project_box.setToolTip(self.AMDock.project_tt)

        self.project_label = QtGui.QLabel(self.project_box)
        self.project_label.setText("Project Name:")

        self.project_text = QtGui.QLineEdit(self.project_box)
        self.project_text.setObjectName("project_text")
        self.project_text.setPlaceholderText(self.AMDock.project_name)
        self.proj_name_validator = QtGui.QRegExpValidator(QtCore.QRegExp("\\S+"))
        self.project_text.setValidator(self.proj_name_validator)
        # self.project_text.textEdited.connect(self.)

        self.wdir_button = QtGui.QPushButton(self.project_box)
        self.wdir_button.setObjectName("wdir_button")
        self.wdir_button.setText("Project Folder")
        self.wdir_button.clicked.connect(lambda: self.load_file(self.wdir_button))

        self.wdir_text = QtGui.QLineEdit(self.project_box)
        self.wdir_text.setReadOnly(True)
        self.wdir_text.setObjectName("wdir_text")
        self.wdir_text.setPlaceholderText("Location for the project")

        self.proj_loc_label = QtGui.QLabel()
        self.proj_loc_label.hide()

        self.project_layout = QtGui.QGridLayout()
        self.project_layout.addWidget(self.project_label, 0, 0)
        self.project_layout.addWidget(self.project_text, 0, 1, 1, 1)
        self.project_layout.addWidget(self.wdir_button, 1, 0)
        self.project_layout.addWidget(self.wdir_text, 1, 1, 1, 1)
        self.project_layout.addWidget(self.proj_loc_label, 2, 0, 1, 3)

        self.create_project = QtGui.QPushButton('Create \nProject')
        self.create_project.setObjectName('create_project')
        self.create_project.clicked.connect(lambda: self.load_file(self.create_project))

        self.project_box_layout = QtGui.QHBoxLayout(self.project_box)
        self.project_box_layout.addLayout(self.project_layout, 10)
        self.project_box_layout.addWidget(self.create_project)

        # **Input_box
        self.input_box = QtGui.QGroupBox(self.sc_area_widget)
        self.input_box.setObjectName("input_box")
        self.input_box.setTitle("Input")
#         # self.input_box.setEnabled(False)
        self.input_box.setToolTip(self.AMDock.input_tt)

        self.pH_label = QtGui.QLabel(self.input_box)
        self.pH_label.setObjectName("ph_button")
        self.pH_label.setText("Set pH:")

        self.pH_value = QtGui.QDoubleSpinBox(self.input_box)
        self.pH_value.setAlignment(QtCore.Qt.AlignCenter)
        self.pH_value.setDecimals(1)
        self.pH_value.setMinimum(0)
        self.pH_value.setMaximum(14)
        self.pH_value.setSingleStep(0.1)
        self.pH_value.setValue(self.AMDock.pH)
        self.pH_value.setObjectName("pH_value")

        self.docking_mode = QtGui.QButtonGroup(self.input_box)

        self.simple_docking = QtGui.QRadioButton('Simple Docking', self.input_box)
        self.simple_docking.setObjectName("simple_docking")
        self.simple_docking.setChecked(True)
        self.docking_mode.addButton(self.simple_docking, 1)

        self.offtarget_docking = QtGui.QRadioButton('Off-Target Docking', self.input_box)
        self.offtarget_docking.setObjectName("offtarget_docking")
        self.docking_mode.addButton(self.offtarget_docking, 2)

        self.rescoring = QtGui.QRadioButton('Scoring', self.input_box)
        self.rescoring.setObjectName("rescoring")
        self.docking_mode.addButton(self.rescoring, 3)

        self.target_button = QtGui.QPushButton(self.input_box)
        self.target_button.setObjectName("target_button")
        self.target_button.setText("Target")
        self.target_button.clicked.connect(lambda: self.load_file(self.target_button))

        self.target_text = QtGui.QLineEdit(self.input_box)
        self.target_text.setObjectName("target_text")
        self.target_text.setReadOnly(True)
        self.target_text.setPlaceholderText('Target protein')

        self.target_label = QtGui.QLabel(self.input_box)
        self.target_label.hide()

        self.offtarget_button = QtGui.QPushButton(self.input_box)
        self.offtarget_button.setObjectName("offtarget_button")
        self.offtarget_button.setText("Off-Target")
        self.offtarget_button.hide()
        self.offtarget_button.clicked.connect(lambda: self.load_file(self.offtarget_button))

        self.offtarget_text = QtGui.QLineEdit(self.input_box)
        self.offtarget_text.setObjectName("offtarget_text")
        self.offtarget_text.setReadOnly(True)
        self.offtarget_text.setPlaceholderText('off-target protein')
        self.offtarget_text.hide()

        self.offtarget_label = QtGui.QLabel(self.input_box)
        self.offtarget_label.hide()

        self.ligand_button = QtGui.QPushButton(self.input_box)
        self.ligand_button.setObjectName("ligand_button")
        self.ligand_button.setText("Ligand")
        self.ligand_button.clicked.connect(lambda: self.load_file(self.ligand_button))

        self.ligand_text = QtGui.QLineEdit(self.input_box)
        self.ligand_text.setObjectName("ligand_text")
        self.ligand_text.setReadOnly(True)
        self.ligand_text.setPlaceholderText('ligand')

        self.ligand_label = QtGui.QLabel(self.input_box)
        self.ligand_label.hide()

        self.prep_rec_lig_button = QtGui.QPushButton(self.input_box)
        self.prep_rec_lig_button.setObjectName("prep_rec_lig_button")
        self.prep_rec_lig_button.setText("Prepare\nInput")
#         # self.prep_rec_lig_button.setEnabled(False)

        self.flags_layout = QtGui.QHBoxLayout()
        self.flags_layout.addWidget(self.pH_label)
        self.flags_layout.addWidget(self.pH_value)
        self.flags_layout.addWidget(self.simple_docking)
        self.flags_layout.addWidget(self.offtarget_docking)
        self.flags_layout.addWidget(self.rescoring)
        self.flags_layout.addStretch(1)

        self.input_layout = QtGui.QGridLayout()
        self.input_layout.setSizeConstraint(QtGui.QLayout.SetFixedSize)
        self.input_layout.addWidget(self.target_button, 0, 0)
        self.input_layout.addWidget(self.target_text, 0, 1)
        self.input_layout.addWidget(self.target_label, 1, 1)

        self.input_layout.addWidget(self.offtarget_button, 2, 0)
        self.input_layout.addWidget(self.offtarget_text, 2, 1)
        self.input_layout.addWidget(self.offtarget_label, 3, 1)
        self.input_layout.addWidget(self.ligand_button, 4, 0)
        self.input_layout.addWidget(self.ligand_text, 4, 1)
        self.input_layout.addWidget(self.ligand_label, 5, 1)

        self.content_layout = QtGui.QHBoxLayout()
        self.content_layout.addLayout(self.input_layout)
        self.content_layout.addWidget(self.prep_rec_lig_button)

        self.input_box_layout = QtGui.QVBoxLayout(self.input_box)
        self.input_box_layout.addLayout(self.flags_layout)
        self.input_box_layout.addLayout(self.content_layout)

        # **Grid_box
        self.grid_box = QtGui.QGroupBox(self.sc_area_widget)
        self.grid_box.setObjectName("grid_box")
        self.grid_box.setTitle("Search Space")
#         # self.grid_box.setEnabled(False)
        self.grid_box.setToolTip(self.AMDock.grid_tt)

        self.target_column_label = QtGui.QLabel('Target', self.grid_box)
        self.target_column_label.setAlignment(QtCore.Qt.AlignCenter)

        self.target_column_group_btnA = QtGui.QButtonGroup(self.grid_box)
        self.target_column_group_btnA.buttonPressed.connect(self.grid_sel_protection)

        self.btnA_auto = QtGui.QRadioButton(self.grid_box)
        self.btnA_auto.setObjectName('btnA_auto')
        self.btnA_auto.setChecked(True)
        self.target_column_group_btnA.addButton(self.btnA_auto, 1)
        self.btnA_auto.toggled.connect(lambda: self.grid_prot(self.btnA_auto))

        self.btnA_res = QtGui.QRadioButton(self.grid_box)
        self.target_column_group_btnA.addButton(self.btnA_res, 2)
        self.btnA_res.setObjectName('btnA_res')
        self.btnA_res.toggled.connect(lambda: self.grid_prot(self.btnA_res))

        self.btnA_lig = QtGui.QRadioButton(self.grid_box)
        self.btnA_lig.setObjectName('btnA_lig')
        self.target_column_group_btnA.addButton(self.btnA_lig, 3)
        self.btnA_lig.toggled.connect(lambda: self.grid_prot(self.btnA_lig))

        self.btnA_user = QtGui.QRadioButton(self.grid_box)
        self.target_column_group_btnA.addButton(self.btnA_user, 4)
        self.btnA_user.setObjectName('btnA_user')
        self.btnA_user.toggled.connect(lambda: self.grid_prot(self.btnA_user))

        self.offtarget_column_label = QtGui.QLabel('Off-Target', self.grid_box)
        self.offtarget_column_label.hide()
        self.offtarget_column_label.setAlignment(QtCore.Qt.AlignCenter)

        self.offtarget_column_group_btnB = QtGui.QButtonGroup(self.grid_box)
        self.offtarget_column_group_btnB.buttonPressed.connect(self.grid_sel_protection)

        self.btnB_auto = QtGui.QRadioButton(self.grid_box)
        self.btnB_auto.setChecked(True)
        self.offtarget_column_group_btnB.addButton(self.btnB_auto, 1)
        self.btnB_auto.hide()
        self.btnB_auto.toggled.connect(lambda: self.grid_prot(self.btnB_auto))

        self.btnB_res = QtGui.QRadioButton(self.grid_box)
        self.btnB_res.toggled.connect(lambda: self.grid_prot(self.btnB_res))

        self.offtarget_column_group_btnB.addButton(self.btnB_res, 2)
        self.btnB_res.hide()

        self.btnB_lig = QtGui.QRadioButton(self.grid_box)
        self.offtarget_column_group_btnB.addButton(self.btnB_lig, 3)
        self.btnB_lig.hide()
        self.btnB_lig.toggled.connect(lambda: self.grid_prot(self.btnB_lig))

        self.btnB_user = QtGui.QRadioButton(self.grid_box)
        self.offtarget_column_group_btnB.addButton(self.btnB_user, 4)
        self.btnB_user.hide()
        self.btnB_user.toggled.connect(lambda: self.grid_prot(self.btnB_user))

        self.grid_auto_cr = QtGui.QLabel(self.grid_box)
        self.grid_auto_cr.setText("Automatic")

        self.grid_predef_cr = QtGui.QLabel(self.grid_box)
        self.grid_predef_cr.setText("Center on Residue(s)")

        regex = QtCore.QRegExp("([A-Z-a-z]:[A-Z-a-z]{3}:[0-9]{1,5}; )*")
        validator = QtGui.QRegExpValidator(regex)

        self.grid_predef_text = QtGui.QLineEdit(self.grid_box)
        self.grid_predef_text.setObjectName("grid_predef_text")
        self.grid_predef_text.setPlaceholderText('CHN:RES:NUM,...,CHN:RES:NUM (chain:residue:number of residue)')
        self.grid_predef_text.hide()
        self.grid_predef_text.textChanged.connect(lambda: self.check_res(self.grid_predef_text))
        self.grid_predef_text.setValidator(validator)

        self.grid_predef_textB = QtGui.QLineEdit(self.grid_box)
        self.grid_predef_textB.setObjectName("grid_predef_textB")
        self.grid_predef_textB.setPlaceholderText('CHN:RES:NUM,...,CHN:RES:NUM (chain:residue:number of residue)')
        self.grid_predef_textB.hide()
        self.grid_predef_textB.textChanged.connect(lambda: self.check_res(self.grid_predef_textB))
        self.grid_predef_textB.setValidator(validator)

        self.grid_by_lig_cr = QtGui.QLabel(self.grid_box)
        self.grid_by_lig_cr.setText("Center on Hetero")

        self.lig_list = QtGui.QComboBox(self.grid_box)
        self.lig_list.setObjectName("lig_list")
        self.lig_list.hide()
        self.lig_list.currentIndexChanged.connect(lambda: self.lig_select(self.lig_list))

        self.lig_listB = QtGui.QComboBox(self.grid_box)
        self.lig_listB.setObjectName("lig_listB")
        self.lig_listB.hide()
        self.lig_listB.currentIndexChanged.connect(lambda: self.lig_select(self.lig_listB))

        self.grid_user_cr = QtGui.QLabel(self.grid_box)
        self.grid_user_cr.setText('Box')

        self.coor_box = QtGui.QGroupBox(self.grid_box)
        self.coor_box.setTitle("Center")
        self.coor_box.setAlignment(QtCore.Qt.AlignCenter)
        self.coor_box.hide()

        self.coor_x_label = QtGui.QLabel(self.coor_box)
        self.coor_x_label.setText('X:')
        self.coor_x = QtGui.QDoubleSpinBox(self.coor_box)
        self.coor_x.setDecimals(1)
        self.coor_x.setRange(-999, 999)
        self.coor_x.setSingleStep(0.1)
        self.coor_x.setAccelerated(True)
        self.coor_x.setObjectName('coor_x')
        # self.coor_x.valueChanged.connect(self.check_grid)

        self.coor_y_label = QtGui.QLabel(self.coor_box)
        self.coor_y_label.setText('Y:')
        self.coor_y = QtGui.QDoubleSpinBox(self.coor_box)
        self.coor_y.setDecimals(1)
        self.coor_y.setRange(-999, 999)
        self.coor_y.setSingleStep(0.1)
        self.coor_y.setAccelerated(True)
        self.coor_y.setObjectName('coor_y')
        # self.coor_y.valueChanged.connect(self.check_grid)

        self.coor_z_label = QtGui.QLabel(self.coor_box)
        self.coor_z_label.setText('Z:')
        self.coor_z = QtGui.QDoubleSpinBox(self.coor_box)
        self.coor_z.setDecimals(1)
        self.coor_z.setRange(-999, 999)
        self.coor_z.setSingleStep(0.1)
        self.coor_z.setAccelerated(True)
        self.coor_z.setObjectName('coor_z')
        # self.coor_z.valueChanged.connect(self.check_grid)

        self.size_box = QtGui.QGroupBox(self.grid_box)
        self.size_box.setTitle("Size")
        self.size_box.setAlignment(QtCore.Qt.AlignCenter)
        self.size_box.hide()

        self.size_x_label = QtGui.QLabel(self.size_box)
        self.size_x_label.setText('X:')
        self.size_x = QtGui.QSpinBox(self.coor_box)
        self.size_x.setAccelerated(True)
        self.size_x.setObjectName('size_x')
        # self.size_x.valueChanged.connect(self.check_grid)

        self.size_y_label = QtGui.QLabel(self.size_box)
        self.size_y_label.setText('Y:')
        self.size_y = QtGui.QSpinBox(self.coor_box)
        self.size_y.setAccelerated(True)
        self.size_y.setObjectName('size_y')
        # self.size_y.valueChanged.connect(self.check_grid)

        self.size_z_label = QtGui.QLabel(self.size_box)
        self.size_z_label.setText('Z:')
        self.size_z = QtGui.QSpinBox(self.coor_box)
        self.size_z.setAccelerated(True)
        self.size_z.setObjectName('size_z')
        # self.size_z.valueChanged.connect(self.check_grid)

        self.coor_boxB = QtGui.QGroupBox(self.grid_box)
        self.coor_boxB.setTitle("Center")
        self.coor_boxB.setAlignment(QtCore.Qt.AlignCenter)
        self.coor_boxB.hide()

        self.coor_x_labelB = QtGui.QLabel(self.coor_boxB)
        self.coor_x_labelB.setText('X:')
        self.coor_xB = QtGui.QDoubleSpinBox(self.coor_boxB)
        self.coor_xB.setDecimals(1)
        self.coor_xB.setRange(-999, 999)
        self.coor_xB.setSingleStep(0.1)
        self.coor_xB.setAccelerated(True)
        self.coor_xB.setObjectName('coor_xB')
        # self.coor_xB.valueChanged.connect(self.check_grid)

        self.coor_y_labelB = QtGui.QLabel(self.coor_boxB)
        self.coor_y_labelB.setText('Y:')
        self.coor_yB = QtGui.QDoubleSpinBox(self.coor_boxB)
        self.coor_yB.setDecimals(1)
        self.coor_yB.setRange(-999, 999)
        self.coor_yB.setSingleStep(0.1)
        self.coor_yB.setAccelerated(True)
        self.coor_yB.setObjectName('coor_yB')
        # self.coor_yB.valueChanged.connect(self.check_grid)

        self.coor_z_labelB = QtGui.QLabel(self.coor_boxB)
        self.coor_z_labelB.setText('Z:')
        self.coor_zB = QtGui.QDoubleSpinBox(self.coor_boxB)
        self.coor_zB.setDecimals(1)
        self.coor_zB.setRange(-999, 999)
        self.coor_zB.setSingleStep(0.1)
        self.coor_zB.setAccelerated(True)
        self.coor_zB.setObjectName('coor_zB')
        # self.coor_zB.valueChanged.connect(self.check_grid)

        self.size_boxB = QtGui.QGroupBox(self.grid_box)
        self.size_boxB.setTitle("Size")
        self.size_boxB.setAlignment(QtCore.Qt.AlignCenter)
        self.size_boxB.hide()

        self.size_x_labelB = QtGui.QLabel(self.size_boxB)
        self.size_x_labelB.setText('X:')
        self.size_xB = QtGui.QSpinBox(self.size_boxB)
        self.size_xB.setAccelerated(True)
        self.size_xB.setObjectName('size_xB')
        # self.size_xB.valueChanged.connect(self.check_grid)

        self.size_y_labelB = QtGui.QLabel(self.size_boxB)
        self.size_y_labelB.setText('Y:')
        self.size_yB = QtGui.QSpinBox(self.size_boxB)
        self.size_yB.setAccelerated(True)
        self.size_yB.setObjectName('size_yB')
        # self.size_yB.valueChanged.connect(self.check_grid)

        self.size_z_labelB = QtGui.QLabel(self.size_boxB)
        self.size_z_labelB.setText('Z:')
        self.size_zB = QtGui.QSpinBox(self.size_boxB)
        self.size_zB.setAccelerated(True)
        self.size_zB.setObjectName('size_zB')
        # self.size_zB.valueChanged.connect(self.check_grid)

        self.spacer = QtGui.QSpacerItem(20, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.center_layout = QtGui.QGridLayout(self.coor_box)
        self.center_layout.addWidget(self.coor_x_label, 0, 0, QtCore.Qt.AlignCenter)
        self.center_layout.addWidget(self.coor_x, 1, 0, QtCore.Qt.AlignCenter)
        self.center_layout.addWidget(self.coor_y_label, 0, 1, QtCore.Qt.AlignCenter)
        self.center_layout.addWidget(self.coor_y, 1, 1, QtCore.Qt.AlignCenter)
        self.center_layout.addWidget(self.coor_z_label, 0, 2, QtCore.Qt.AlignCenter)
        self.center_layout.addWidget(self.coor_z, 1, 2, QtCore.Qt.AlignCenter)

        self.center_layoutB = QtGui.QGridLayout(self.coor_boxB)
        self.center_layoutB.addWidget(self.coor_x_labelB, 0, 0, QtCore.Qt.AlignCenter)
        self.center_layoutB.addWidget(self.coor_xB, 1, 0, QtCore.Qt.AlignCenter)
        self.center_layoutB.addWidget(self.coor_y_labelB, 0, 1, QtCore.Qt.AlignCenter)
        self.center_layoutB.addWidget(self.coor_yB, 1, 1, QtCore.Qt.AlignCenter)
        self.center_layoutB.addWidget(self.coor_z_labelB, 0, 2, QtCore.Qt.AlignCenter)
        self.center_layoutB.addWidget(self.coor_zB, 1, 2, QtCore.Qt.AlignCenter)

        self.size_layout = QtGui.QGridLayout(self.size_box)
        self.size_layout.addWidget(self.size_x_label, 0, 0, QtCore.Qt.AlignCenter)
        self.size_layout.addWidget(self.size_x, 1, 0, QtCore.Qt.AlignCenter)
        self.size_layout.addWidget(self.size_y_label, 0, 1, QtCore.Qt.AlignCenter)
        self.size_layout.addWidget(self.size_y, 1, 1, QtCore.Qt.AlignCenter)
        self.size_layout.addWidget(self.size_z_label, 0, 2, QtCore.Qt.AlignCenter)
        self.size_layout.addWidget(self.size_z, 1, 2, QtCore.Qt.AlignCenter)

        self.size_layoutB = QtGui.QGridLayout(self.size_boxB)
        self.size_layoutB.addWidget(self.size_x_labelB, 0, 0, QtCore.Qt.AlignCenter)
        self.size_layoutB.addWidget(self.size_xB, 1, 0, QtCore.Qt.AlignCenter)
        self.size_layoutB.addWidget(self.size_y_labelB, 0, 1, QtCore.Qt.AlignCenter)
        self.size_layoutB.addWidget(self.size_yB, 1, 1, QtCore.Qt.AlignCenter)
        self.size_layoutB.addWidget(self.size_z_labelB, 0, 2, QtCore.Qt.AlignCenter)
        self.size_layoutB.addWidget(self.size_zB, 1, 2, QtCore.Qt.AlignCenter)

        self.bind_site_button = QtGui.QPushButton(self.grid_box)
        self.bind_site_button.setObjectName("bind_site_button")
        self.bind_site_button.setText("Define\nSearch Space")
        self.bind_site_button.setSizePolicy(QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed))

        self.grid_pymol_button = QtGui.QPushButton(self.grid_box)
        self.grid_pymol_button.setObjectName("grid_pymol_button")
        self.grid_pymol_button.setText('Show in PyMol')
        self.grid_pymol_button.clicked.connect(lambda: self.grid_actions(self.grid_pymol_button))
        # self.grid_pymol_button.setEnabled(False)

        self.grid_pymol_buttonB = QtGui.QPushButton(self.grid_box)
        self.grid_pymol_buttonB.setObjectName("grid_pymol_buttonB")
        self.grid_pymol_buttonB.setText("Show in PyMol")
        self.grid_pymol_buttonB.hide()
        self.grid_pymol_buttonB.clicked.connect(lambda: self.grid_actions(self.grid_pymol_buttonB))
        # self.grid_pymol_buttonB.setEnabled(False)

        # self.reset_grid_button = QtGui.QPushButton(self.grid_box)
        # self.reset_grid_button.setObjectName("reset_grid_button")
        # self.reset_grid_button.setText("Reset")
        # self.reset_grid_button.clicked.connect(lambda: self.grid_actions(self.reset_grid_button))
        # self.reset_grid_button.setEnabled(False)

        # self.reset_grid_buttonB = QtGui.QPushButton(self.grid_box)
        # self.reset_grid_buttonB.setObjectName("reset_grid_buttonB")
        # self.reset_grid_buttonB.setText("Reset")
        # self.reset_grid_buttonB.hide()
        # self.reset_grid_buttonB.clicked.connect(lambda: self.grid_actions(self.reset_grid_buttonB))
        # self.reset_grid_buttonB.setEnabled(False)

        self.checker_icon = QtGui.QLabel(self.grid_box)
        self.checker_icon.setPixmap(QtGui.QPixmap(self.AMDock.error_checker))
        self.checker_icon.hide()

        self.checker_icon_ok = QtGui.QLabel(self.grid_box)
        self.checker_icon_ok.setPixmap(QtGui.QPixmap(self.AMDock.error_checker_ok))
        self.checker_icon_ok.hide()

        self.run_button = QtGui.QPushButton(self)
        self.run_button.setObjectName("run_button")
        self.run_button.setText("Run")
        self.run_button.setSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Preferred)
        # self.run_button.setEnabled(False)

        self.run_scoring = QtGui.QPushButton(self)
        self.run_scoring.setObjectName("run_scoring")
        self.run_scoring.setText("Run Scoring")
        # self.run_scoring.setEnabled(False)
        self.run_scoring.hide()

        self.stop_button = QtGui.QPushButton(self)
        self.stop_button.setObjectName("stop_button")
        self.stop_button.setText("Stop")
        # self.stop_button.setEnabled(False)
        self.stop_button.clicked.connect(self.stop_function)

        self.process_state_label = QtGui.QLabel('STATE:')

        self.process_state = QtGui.QLabel('NOT RUNNING.')

        self.non_button = QtGui.QPushButton(self)
        self.non_button.setObjectName("non_button")
        self.non_button.setText("")
        # self.non_button.setEnabled(False)
        self.non_button.hide()

        self.reset_button = QtGui.QPushButton(self)
        self.reset_button.setObjectName("reset_button")
        self.reset_button.setText("  Reset")
        self.reset_button.setIcon(QtGui.QIcon(QtGui.QPixmap(self.AMDock.reset_icon)))
        # self.reset_button.setEnabled(True)
        self.reset_button.clicked.connect(self.reset_function)

        self.progress_project_label = QtGui.QLabel('Project Progress')

        self.progressBar_global = QtGui.QProgressBar(self)
        self.progressBar_global.setValue(0)
        self.progressBar_global.setAlignment(QtCore.Qt.AlignCenter)
        self.progressBar_global.setObjectName("progressBar_global")
        self.progressBar_global.setFormat("%p%")

        self.progress_section_label = QtGui.QLabel('Section Progress')

        self.progressBar_section = QtGui.QProgressBar(self)
        self.progressBar_section.setValue(0)
        self.progressBar_section.setAlignment(QtCore.Qt.AlignCenter)
        self.progressBar_section.setObjectName("progressBar_section")
        self.progressBar_section.setFormat("%v%")

        self.log_button = QtGui.QPushButton('Log:')
        self.log_button.clicked.connect(self.log_toggle)
        self.program_label = QtGui.QLabel('')
        # self.log_layout = QtGui.QHBoxLayout()
        # self.log_layout.addWidget(self.log_label)
        # self.log_layout.addWidget(self.program_label)

        # self.p0 = QtGui.QLabel('Program Selection >')
        # self.p0.setStyleSheet("QLabel { background-color : blue; color : white; }")
        self.p1 = QtGui.QLabel('Project >')
        self.p1.setStyleSheet("QLabel { background-color : blue; color : white; }")
        self.p2 = QtGui.QLabel('Input Files >')
        # self.p2.setFont(font3)
        self.p3 = QtGui.QLabel('Search Space >')
        # self.p3.setFont(font3)
        self.p4 = QtGui.QLabel('Docking')

        self.ind_layout = QtGui.QHBoxLayout()
        # self.ind_layout.addWidget(self.p0)
        self.ind_layout.addWidget(self.p1)
        self.ind_layout.addWidget(self.p2)
        self.ind_layout.addWidget(self.p3)
        self.ind_layout.addWidget(self.p4)
        self.ind_layout.addStretch(1)
        # self.p4.setFont(font3)
        # self.p5 = QtGui.QLabel('|')
        # self.p5.setFont(font3)
        # self.init_conf = QtGui.QLabel('Init Conf')
        # self.init_conf.setFont(font3)
        # self.input_files = QtGui.QLabel('Prep. Input Files')
        # self.input_files.setFont(font3)
        # self.search_space = QtGui.QLabel('Search Space Definition')
        # self.search_space.setFont(font3)
        # self.mol_docking = QtGui.QLabel('Molecular Docking Simulation')
        # self.mol_docking.setFont(font3)

        # self.label_prog = QtGui.QHBoxLayout()
        # self.label_prog.setContentsMargins(0, 0, 0, 0)
        # self.label_prog.setMargin(0)
        # self.label_prog.addWidget(self.init_conf, 9.8, QtCore.Qt.AlignCenter)
        # self.label_prog.addWidget(self.p2)
        # self.label_prog.addWidget(self.input_files, 14.8, QtCore.Qt.AlignCenter)
        # self.label_prog.addWidget(self.p3)
        # self.label_prog.addWidget(self.search_space, 24.8, QtCore.Qt.AlignCenter)
        # self.label_prog.addWidget(self.p4)
        # self.label_prog.addWidget(self.mol_docking, 50, QtCore.Qt.AlignCenter)

        self.checker_icon = QtGui.QLabel(self.grid_box)
        self.checker_icon.setPixmap(QtGui.QPixmap(self.AMDock.error_checker))
        self.checker_icon.hide()

        self.checker_iconB = QtGui.QLabel(self.grid_box)
        self.checker_iconB.setPixmap(QtGui.QPixmap(self.AMDock.error_checker))
        self.checker_iconB.hide()

        self.checker_icon_ok = QtGui.QLabel(self.grid_box)
        self.checker_icon_ok.setPixmap(QtGui.QPixmap(self.AMDock.error_checker_ok))
        self.checker_icon_ok.hide()

        self.checker_icon_okB = QtGui.QLabel(self.grid_box)
        self.checker_icon_okB.setPixmap(QtGui.QPixmap(self.AMDock.error_checker_ok))
        self.checker_icon_okB.hide()

        # self.grid_icon = QtGui.QLabel()
        # self.grid_icon.setPixmap(QtGui.QPixmap(self.AMDock.error_checker))
        # self.grid_icon.hide()

        # self.grid_iconB = QtGui.QLabel(self.grid_box)
        # self.grid_iconB.setPixmap(QtGui.QPixmap(self.AMDock.error_checker))
        # self.grid_iconB.hide()

        # self.grid_icon_ok = QtGui.QLabel(self.grid_box)
        # self.grid_icon_ok.setPixmap(QtGui.QPixmap(self.AMDock.error_checker_ok))
        # self.grid_icon_ok.hide()

        # self.grid_icon_okB = QtGui.QLabel(self.grid_box)
        # self.grid_icon_okB.setPixmap(QtGui.QPixmap(self.AMDock.error_checker_ok))
        # self.grid_icon_okB.hide()

        self.res_text = QtGui.QHBoxLayout()
        self.res_text.addWidget(self.grid_predef_text, 1)
        self.res_text.addWidget(self.checker_icon_ok)
        self.res_text.addWidget(self.checker_icon)

        self.res_textB = QtGui.QHBoxLayout()
        self.res_textB.addWidget(self.grid_predef_textB, 1)
        self.res_textB.addWidget(self.checker_icon_okB, 0)
        self.res_textB.addWidget(self.checker_iconB, 0)

        self.coor_box_layout = QtGui.QHBoxLayout()
        self.coor_box_layout.addWidget(self.coor_box)
        self.coor_box_layout.addWidget(self.size_box)
        # self.coor_box_layout.addWidget(self.grid_icon)
        # self.coor_box_layout.addWidget(self.grid_icon_ok)

        self.coor_boxB_layout = QtGui.QHBoxLayout()
        self.coor_boxB_layout.addWidget(self.coor_boxB)
        self.coor_boxB_layout.addWidget(self.size_boxB)
        # self.coor_boxB_layout.addWidget(self.grid_iconB)
        # self.coor_boxB_layout.addWidget(self.grid_icon_okB)

        # self.conf_buttons = QtGui.QHBoxLayout()
        # self.conf_buttons.addWidget(self.grid_pymol_button)
        # self.conf_buttons.addWidget(self.reset_grid_button)
        # self.conf_buttonsB = QtGui.QHBoxLayout()
        # self.conf_buttonsB.addWidget(self.grid_pymol_buttonB)
        # self.conf_buttonsB.addWidget(self.reset_grid_buttonB)

        self.autoligand_target = QtGui.QTableWidget()
        self.autoligand_target.setObjectName('autoligand_target')
        self.autoligand_target.setColumnCount(2)
        self.autoligand_target.setHorizontalHeaderLabels(["Total Volume (A**3)", "EPV (Kcal/mol A**3)"])
        # self.autoligand_target.setRowCount(10)
        self.autoligand_target.setMinimumHeight(150)
        self.autoligand_target.horizontalHeader().setResizeMode(QtGui.QHeaderView.Stretch)
        self.autoligand_target.hide()
        self.autoligand_target.setEditTriggers(QtGui.QAbstractItemView.NoEditTriggers)
        self.autoligand_target.setSelectionBehavior(QtGui.QAbstractItemView.SelectRows)
        self.autoligand_target.setSelectionMode(QtGui.QAbstractItemView.SingleSelection)
        self.autoligand_target.itemSelectionChanged.connect(lambda: self.fill_selection(self.autoligand_target))

        self.autolig_layout = QtGui.QHBoxLayout()
        self.autolig_layout.addWidget(self.autoligand_target, 1)

        self.autoligand_offtarget = QtGui.QTableWidget()
        self.autoligand_offtarget.setObjectName('autoligand_offtarget')
        self.autoligand_offtarget.setColumnCount(2)
        self.autoligand_offtarget.setHorizontalHeaderLabels(["Total Volume (A**3)", "EPV (Kcal/mol A**3)"])
        # self.autoligand_offtarget.setRowCount(10)
        self.autoligand_offtarget.horizontalHeader().setResizeMode(QtGui.QHeaderView.Stretch)
        self.autoligand_offtarget.hide()
        self.autoligand_offtarget.setEditTriggers(QtGui.QAbstractItemView.NoEditTriggers)
        self.autoligand_offtarget.setSelectionBehavior(QtGui.QAbstractItemView.SelectRows)
        self.autoligand_offtarget.setSelectionMode(QtGui.QAbstractItemView.SingleSelection)
        self.autoligand_offtarget.itemSelectionChanged.connect(lambda: self.fill_selection(self.autoligand_offtarget))

        self.autolig_layoutB = QtGui.QHBoxLayout()
        self.autolig_layoutB.addWidget(self.autoligand_offtarget, 1)

        self.all_options = QtGui.QGridLayout()
        self.all_options.setSizeConstraint(QtGui.QLayout.SetFixedSize)

        self.all_options.setColumnStretch(1, 1)  # make column 1 and 2 regular width
        self.all_options.addItem(self.spacer, 0, 0)
        self.all_options.addWidget(self.target_column_label, 0, 1, 1, 1, QtCore.Qt.AlignCenter)
        self.all_options.addWidget(self.offtarget_column_label, 0, 2, 1, 1, QtCore.Qt.AlignCenter)
        self.all_options.addItem(self.spacer, 0, 3)

        self.all_options.addWidget(self.grid_auto_cr, 1, 0)
        self.all_options.addWidget(self.btnA_auto, 1, 1, 1, 1, QtCore.Qt.AlignCenter)
        self.all_options.addWidget(self.btnB_auto, 1, 2, 1, 1, QtCore.Qt.AlignCenter)
        self.all_options.addLayout(self.autolig_layout, 2, 1, 1, 1, QtCore.Qt.AlignCenter)
        self.all_options.addLayout(self.autolig_layoutB, 2, 2, 1, 1, QtCore.Qt.AlignCenter)

        self.all_options.addWidget(self.grid_predef_cr, 3, 0)
        self.all_options.addWidget(self.btnA_res, 3, 1, 1, 1, QtCore.Qt.AlignCenter)
        self.all_options.addLayout(self.res_text, 4, 1, 1, 1, QtCore.Qt.AlignCenter)
        self.all_options.addWidget(self.btnB_res, 3, 2, 1, 1, QtCore.Qt.AlignCenter)
        self.all_options.addLayout(self.res_textB, 4, 2, 1, 1, QtCore.Qt.AlignCenter)

        self.all_options.addWidget(self.grid_by_lig_cr, 5, 0)
        self.all_options.addWidget(self.btnA_lig, 5, 1, 1, 1, QtCore.Qt.AlignCenter)
        self.all_options.addWidget(self.lig_list, 6, 1, 1, 1, QtCore.Qt.AlignCenter)
        self.all_options.addWidget(self.btnB_lig, 5, 2, 1, 1, QtCore.Qt.AlignCenter)
        self.all_options.addWidget(self.lig_listB, 6, 2, 1, 1, QtCore.Qt.AlignCenter)

        self.all_options.addWidget(self.grid_user_cr, 7, 0)
        self.all_options.addWidget(self.btnA_user, 7, 1, 1, 1, QtCore.Qt.AlignCenter)
        self.all_options.addLayout(self.coor_box_layout, 8, 1, 1, 1, QtCore.Qt.AlignCenter)
        self.all_options.addWidget(self.btnB_user, 7, 2, 1, 1, QtCore.Qt.AlignCenter)
        self.all_options.addLayout(self.coor_boxB_layout, 8, 2, 1, 1, QtCore.Qt.AlignCenter)

        self.all_options.addItem(self.spacer, 9, 0)
        self.all_options.addWidget(self.grid_pymol_button, 9, 1, 1, 1, QtCore.Qt.AlignCenter)
        self.all_options.addWidget(self.grid_pymol_buttonB, 9, 2, 1, 1, QtCore.Qt.AlignCenter)

        self.binding_layout = QtGui.QVBoxLayout()
        self.binding_layout.addStretch(1)
        self.binding_layout.addWidget(self.bind_site_button)
        self.binding_layout.addStretch(1)

        self.grid_content = QtGui.QHBoxLayout(self.grid_box)
        self.grid_content.addLayout(self.all_options, 1)
        self.grid_content.addLayout(self.binding_layout)

        self.W = PROCESS()
        # signals for programs
        self.W.prog_finished.connect(self.for_finished)
        # self.W.process.error.connect(self.output_error)
        self.W.worker.signals.finished.connect(self.for_finished)
        self.W.state.connect(self.check_state)
        self.W.worker.signals.result.connect(self.output_function)
        self.W.queue_finished.connect(self.check_section)
        self.W.process.readyReadStandardOutput.connect(self.readStdOutput)
        # self.W.stoped.connect()

        self.offtarget_docking.pressed.connect(lambda: self.simulation_form(self.offtarget_docking))
        self.simple_docking.pressed.connect(lambda: self.simulation_form(self.simple_docking))
        self.rescoring.pressed.connect(lambda: self.simulation_form(self.rescoring))
        self.prep_rec_lig_button.clicked.connect(self.prepare_receptor)
        self.bind_site_button.clicked.connect(self.binding_site)
        self.run_button.clicked.connect(self.start_docking_prog)

        # self.pH_value.valueChanged.connect(lambda: self.values(self.pH_value))

        self.reset_button_layout = QtGui.QHBoxLayout()
        self.reset_button_layout.addStretch(1)
        self.reset_button_layout.addWidget(self.reset_button)
        self.reset_button_layout.addStretch(1)

        self.progressbar_layout = QtGui.QGridLayout()
        self.progressbar_layout.addWidget(self.log_button, 0, 0)
        self.progressbar_layout.addWidget(self.program_label, 0, 1, 1, -1)

        self.progressbar_layout.addWidget(self.progress_section_label, 1, 0)
        self.progressbar_layout.addWidget(self.progressBar_section, 1, 1, 1, 1)
        self.progressbar_layout.addWidget(self.stop_button, 1, 2)
        self.progressbar_layout.addItem(self.spacer, 1, 3)
        self.progressbar_layout.addWidget(self.process_state_label, 1, 4)
        self.progressbar_layout.addWidget(self.process_state, 1, 5)



        self.progressbar_layout.addWidget(self.progress_project_label, 2, 0)
        self.progressbar_layout.addWidget(self.progressBar_global, 2, 1, 1, -1)

        self.progressbar_layout.addLayout(self.ind_layout, 3, 1, 1, -1)

        self.progress_layout = QtGui.QHBoxLayout()
        self.progress_layout.addLayout(self.progressbar_layout)
        self.progress_layout.addWidget(self.run_button)
        self.progress_layout.addWidget(self.run_scoring)

        self.sc_area_widget_layout = QtGui.QVBoxLayout(self.sc_area_widget)
        self.sc_area_widget_layout.addWidget(self.project_box)
        self.sc_area_widget_layout.addWidget(self.input_box)
        self.sc_area_widget_layout.addWidget(self.grid_box)
        self.sc_area_widget_layout.addStretch(1)

        self.sc_area_layout = QtGui.QHBoxLayout(self.sc_area)
        self.sc_area_layout.addWidget(self.sc_area_widget)
        self.sc_area.setWidgetResizable(True)
        self.sc_area.setWidget(self.sc_area_widget)

        self.body_layout = QtGui.QVBoxLayout(self)
        self.body_layout.addWidget(self.sc_area, 1)
        self.body_layout.addLayout(self.progress_layout)
        # self.body_layout.addLayout(self.)
        self.body_layout.addLayout(self.reset_button_layout)

    def load_file(self, _file):  # ok
        if _file.objectName() == 'create_project':
            # check if exist any process in background
            if self.AMDock.state == 2:
                msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'Other processes are running in the background. '
                                                                       'Please wait for these to end.',
                                                 QtGui.QMessageBox.Ok)
                return
            elif self.AMDock.section in [1, 2, 3]:
                msg = QtGui.QMessageBox.warning(self.AMDock, 'Warning', 'This step was successfully completed '
                                                                        'previously. Do you want to repeat it?\n Keep '
                                                                        'in mind that this will eliminate all the '
                                                                        'information contained in this project !!!',
                                                QtGui.QMessageBox.Yes | QtGui.QMessageBox.No)
                if msg == QtGui.QMessageBox.No:
                    return
                elif msg == QtGui.QMessageBox.Yes:
                    self.reset_sections(0)

            if not self.AMDock.project.location:
                define_wdir_loc(self)
                return

            if self.AMDock.project.WDIR:
                self.options = wdir2_warning(self)
                if self.options == QtGui.QMessageBox.Yes:
                    # progress(self, 0, 0, 0, reverse=True, mess='Working Directory Definition...')
                    self.AMDock.output2file.conclude()
                    os.chdir(self.AMDock.project.location)
                    try:
                        shutil.rmtree(self.AMDock.project.WDIR)
                    except:
                        msg = QtGui.QMessageBox.critical(self.AMDock, 'Error',
                                                         'The previous project directory could not be removed. Please '
                                                         'remove it manually.', QtGui.QMessageBox.Ok)
                    if not self.AMDock.loader.create_project_function():
                        self.AMDock.project.WDIR = None
                        self.project_text.clear()
                        self.wdir_text.clear()
                        self.AMDock.project.location = None
                        self.proj_loc_label.hide()
                    else:
                        self.proj_loc_label.setText('Project: %s' % self.AMDock.project.WDIR)
                        self.proj_loc_label.show()
            else:
                if not self.AMDock.loader.create_project_function():
                    self.AMDock.project.WDIR = None
                    self.project_text.clear()
                    self.wdir_text.clear()
                    self.AMDock.project.location = None
                    self.proj_loc_label.hide()
                    return
                else:
                    self.proj_loc_label.setText('Project: %s' % self.AMDock.project.WDIR)
                    self.proj_loc_label.show()
            self.AMDock.section = 0
            self.progressBar_global.setValue(10)
            self.highlight()
            self.program_label.setText('Create project... Done.')
            self.AMDock.log_widget.textedit.append('AMDOCK: IP WDIR: %s' % self.AMDock.project.WDIR)

        if _file.objectName() == "wdir_button":
            loc_file = self.AMDock.loader.project_location()
            self.AMDock.project.get_loc(loc_file)
            if self.AMDock.project.location:
                self.wdir_text.setText("%s" % self.AMDock.project.location)

        if _file.objectName() == "target_button":
            if self.AMDock.state == 2:
                msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'Other processes are running in the background. '
                                                                       'Please wait for these to end.',
                                                 QtGui.QMessageBox.Ok)
                return
            elif self.AMDock.section == -1:
                msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'It seems that not all previous steps have been '
                                                                   'completed. Please do all the steps sequentially.',
                                                QtGui.QMessageBox.Ok)
                return
            elif self.AMDock.section in [1, 2, 3]:
                msg = QtGui.QMessageBox.warning(self.AMDock, 'Warning',
                                                'This step was successfully completed previously.'
                                                ' Do you want to repeat it?',
                                                QtGui.QMessageBox.Yes | QtGui.QMessageBox.No)
                if msg == QtGui.QMessageBox.No:
                    # id.setChecked(False)
                    return
                elif msg == QtGui.QMessageBox.Yes:
                    # id.setChecked(False)
                    self.reset_sections(1)

            if self.AMDock.target.input is None:
                self.AMDock.loader.load_protein()
            else:
                self.prot_opt = prot_warning(self)
                if self.prot_opt == QtGui.QMessageBox.Yes:
                    os.remove(self.AMDock.target.input)
                    self.AMDock.target = BASE()
                    self.target_label.clear()
                    self.target_text.clear()
                    self.target_label.hide()
                    self.AMDock.loader.load_protein()
            if self.AMDock.target.name:
                self.target_label.show()

        if _file.objectName() == "offtarget_button":
            if self.AMDock.state == 2:
                msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'Other processes are running in the background. '
                                                                       'Please wait for these to end.',
                                                 QtGui.QMessageBox.Ok)
                return
            elif self.AMDock.section == -1:
                msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'It seems that not all previous steps have been '
                                                                   'completed. Please do all the steps sequentially.',
                                                QtGui.QMessageBox.Ok)
                return
            if self.AMDock.offtarget.input is None:
                self.AMDock.loader.load_proteinB()
            else:
                self.prot_opt = prot_warning(self)
                if self.prot_opt == QtGui.QMessageBox.Yes:
                    os.remove(self.AMDock.offtarget.input)
                    self.AMDock.offtarget = BASE()
                    self.offtarget_label.clear()
                    self.offtarget_text.clear()
                    self.offtarget_label.hide()
                    self.AMDock.loader.load_proteinB()
            if self.AMDock.offtarget.name:
                self.offtarget_label.show()

        if _file.objectName() == "ligand_button":
            if self.AMDock.state == 2:
                msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'Other processes are running in the background. '
                                                                       'Please wait for these to end.',
                                                 QtGui.QMessageBox.Ok)
                return
            elif self.AMDock.section == -1:
                msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'It seems that not all previous steps have been '
                                                                   'completed. Please do all the steps sequentially.',
                                                QtGui.QMessageBox.Ok)
                return
            if self.AMDock.ligand.input is None:
                self.AMDock.loader.load_ligand()
            else:
                self.lig_opt = lig_warning(self)
                if self.lig_opt == QtGui.QMessageBox.Yes:
                    os.remove(self.AMDock.ligand.input)
                    self.AMDock.ligand = BASE()
                    self.ligand_text.clear()
                    self.ligand_label.clear()
                    self.ligand_label.hide()
                    self.AMDock.loader.load_ligand()
            if self.AMDock.ligand.name:
                self.ligand_label.show()

    def simulation_form(self, btn):
        if btn.isChecked():
            return
        else:
            if self.AMDock.target.input or self.AMDock.offtarget.input or self.AMDock.ligand.input:
                msg = QtGui.QMessageBox.warning(self, 'Warning', "All data in this section and in Search Space will "
                                                                 "be lost. Do you want to continue? ",
                                                QtGui.QMessageBox.Yes | QtGui.QMessageBox.No)
                if msg == QtGui.QMessageBox.No:
                    return
        btn.setChecked(True)
        target = offtarget = ligand = 0
        if self.AMDock.target.input:
            try:
                os.remove(self.AMDock.target.input)
            except:
                target = 1
        if self.AMDock.offtarget.input:
            try:
                os.remove(self.AMDock.offtarget.input)
            except:
                offtarget = 1
        if self.AMDock.ligand.input:
            try:
                os.remove(self.AMDock.ligand.input)
            except:
                ligand = 1
        if target or offtarget or ligand:
            msg = QtGui.QMessageBox.warning(self, 'Warning', "Some files could not be eliminated, this could generate "
                                                             "future problems. Please check that you have  writing "
                                                             "rights in the project directory. You can continue the "
                                                             "process without worrying.", QtGui.QMessageBox.Ok)
        self.AMDock.target = BASE()
        self.AMDock.offtarget = BASE()
        self.AMDock.ligand = BASE()
        self.target_label.clear()
        self.target_label.hide()
        self.offtarget_label.clear()
        self.offtarget_label.hide()
        self.ligand_label.clear()
        self.ligand_label.hide()
        
        self.target_text.clear()
        self.offtarget_text.clear()
        self.ligand_text.clear()
        
        self.offtarget_button.hide()
        self.offtarget_text.hide()
        self.grid_pymol_buttonB.hide()
        # self.reset_grid_buttonB.hide()
        self.offtarget_column_label.hide()
        self.btnB_auto.hide()
        self.btnB_res.hide()
        self.btnB_lig.hide()
        self.btnB_user.hide()
        self.btnA_auto.setChecked(True)
        self.btnB_auto.setChecked(True)
        self.lig_list.clear()
        self.lig_listB.clear()
        
        if btn.objectName() == 'offtarget_docking':
            # self.grid_box.setEnabled(False)
            self.all_options.setColumnStretch(1, 1)
            self.all_options.setColumnStretch(2, 1)
            self.AMDock.scoring = False
            self.AMDock.project.mode = 1
            ## Input box
            self.offtarget_button.show()
            self.offtarget_text.show()
            self.grid_pymol_buttonB.show()
            # self.reset_grid_buttonB.show()
            ### Grid definition box
            self.offtarget_column_label.show()
            self.btnB_auto.show()
            self.btnB_res.show()
            self.btnB_lig.show()
            self.btnB_user.show()

        elif btn.text() == 'Scoring':
            self.all_options.setColumnStretch(2, 0)
            self.AMDock.scoring = True
            self.AMDock.project.mode = 2
        else:
            self.all_options.setColumnStretch(2, 0)
            self.AMDock.scoring = False
            self.AMDock.project.mode = 0

    def prepare_receptor(self):

        if self.AMDock.state == 2:
            msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'Other processes are running in the background. '
                                                                   'Please wait for these to end.',
                                             QtGui.QMessageBox.Ok)
            return
        elif self.AMDock.section == -1:
            msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'It seems that not all previous steps have been '
                                                                   'completed. Please do all the steps sequentially.',
                                             QtGui.QMessageBox.Ok)
            return
        elif self.AMDock.state in [1, 2, 3]:
            msg = QtGui.QMessageBox.warning(self.AMDock, 'Warning', 'This step was successfully completed previously.'
                                                                    ' Do you want to repeat it?',
                                            QtGui.QMessageBox.Yes | QtGui.QMessageBox.No)
            if msg == QtGui.QMessageBox.No:
                return
        os.chdir(self.AMDock.project.input)
        # check if target, (offtarget) and ligand are defined
        if not self.AMDock.target.input:
            msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'Target, Ligand and Off-Target (if Off-target '
                                                                   'Docking is selected) most be defined',
                                             QtGui.QMessageBox.Ok)
            return
        elif not self.AMDock.ligand.input:
            msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'Target, Ligand and Off-Target (if Off-target '
                                                                   'Docking is selected) most be defined',
                                             QtGui.QMessageBox.Ok)
            return
        elif self.AMDock.project.mode == 1:
            if not self.AMDock.offtarget.input:
                msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'Target, Ligand and Off-Target (if Off-target '
                                                                       'Docking is selected) most be defined',
                                                 QtGui.QMessageBox.Ok)
                return

        self.target_info = PDBINFO(self.AMDock.target.input)
        self.AMDock.target.zn_atoms, self.AMDock.target.het = self.target_info.get_zn(), self.target_info.get_het()
        self.offtarget_info = PDBINFO(self.AMDock.offtarget.input)
        self.AMDock.offtarget.zn_atoms, self.AMDock.offtarget.het = self.offtarget_info.get_zn(), self.offtarget_info.get_het()
        self.ligand_info = PDBINFO(self.AMDock.ligand.input)
        self.AMDock.ligand.ha = self.ligand_info.get_ha()
        self.lig_size = math.ceil(self.ligand_info.get_gyrate())
        self.size = [self.lig_size, self.lig_size, self.lig_size] # this avoid bug in pymol visualization

        # self.AMDock.ligand.zn_atoms, self.AMDock.ligand.het = self.ligand_info.get_zn(), self.ligand_info.get_het()

        if self.AMDock.ligand.ha > 100:
            wlig = QtGui.QMessageBox.warning(self.AMDock, 'Warning', 'The input ligand has more than 100 heavy.\n Do '
                                                                     'you want to continue?',
                                                      QtGui.QMessageBox.Yes | QtGui.QMessageBox.No)
            if wlig == QtGui.QMessageBox.No:
                self.reset_ligand()
                self.AMDock.project.mode = 0
                return

        if self.AMDock.docking_program == 'AutoDockZn':
            if self.AMDock.project.mode == 1:
                self.check_opt, pt1, pt2 = self.AMDock.checker.autodockzn_check(self.AMDock.target, self.AMDock.offtarget)
                if self.check_opt == QtGui.QMessageBox.Ok:
                    if pt1:
                        os.remove(self.AMDock.target.input)
                        self.target_text.clear()
                        self.target_label.clear()
                        self.AMDock.target.input = None
                    if pt2:
                        os.remove(self.AMDock.offtarget.input)
                        self.offtarget_text.clear()
                        self.offtarget_label.clear()
                        self.AMDock.offtarget.input = None

                    if self.AMDock.project.mode == 1:
                        if self.AMDock.input_lig is None and self.AMDock.input_target == None:
                            progress(self, 0, 0, 2, mess='Target Definition...')
                        elif self.AMDock.input_lig is None and self.AMDock.input_target != None:
                            progress(self, 0, 0, 5, mess='Target Definition...')
                        elif self.AMDock.input_lig is not None and self.AMDock.input_target == None:
                            progress(self, 0, 0, 4, mess='Target Definition...')
                        else:
                            progress(self, 0, 0, 7, mess='Target Definition...')
                    else:
                        if self.AMDock.input_lig is None:
                            progress(self, 0, 0, 2, reverse=True, mess='Protein Definition...')
                        else:
                            progress(self, 0, 0, 6, reverse=True, mess='Protein Definition...')

                elif self.check_opt == QtGui.QMessageBox.Cancel:
                    self.AMDock.main_window.setCurrentIndex(0)
                    self.AMDock.main_window.setTabEnabled(1, False)
                    self.AMDock.main_window.setTabEnabled(0, True)
            else:
                self.check_opt = self.AMDock.checker.autodockzn_check(self.AMDock.target)
                if self.check_opt == QtGui.QMessageBox.Ok:
                    os.remove(self.AMDock.target.input)
                    self.target_text.clear()
                    self.target_label.clear()
                    self.AMDock.target.input = None

                    if self.AMDock.project.mode == 1:
                        if self.AMDock.input_lig is None and self.AMDock.input_target == None:
                            progress(self, 0, 0, 2, mess='Target Definition...')
                        elif self.AMDock.input_lig is None and self.AMDock.input_target != None:
                            progress(self, 0, 0, 5, mess='Target Definition...')
                        elif self.AMDock.input_lig is not None and self.AMDock.input_target == None:
                            progress(self, 0, 0, 4, mess='Target Definition...')
                        else:
                            progress(self, 0, 0, 7, mess='Target Definition...')
                    else:
                        if self.AMDock.input_lig is None:
                            progress(self, 0, 0, 2, reverse=True, mess='Protein Definition...')
                        else:
                            progress(self, 0, 0, 6, reverse=True, mess='Protein Definition...')

                elif self.check_opt == QtGui.QMessageBox.Cancel:
                    self.AMDock.main_window.setCurrentIndex(0)
                    self.AMDock.main_window.setTabEnabled(1, False)
                    self.AMDock.main_window.setTabEnabled(0, True)
        else:
            if self.AMDock.project.mode == 1:
                self.check_opt, pt1, pt2 = self.AMDock.checker.check_correct_prog(self.AMDock.target, self.AMDock.offtarget)
                if self.check_opt == QtGui.QMessageBox.Yes:
                    self.AMDock.docking_program = "AutoDockZn"
                    self.AMDock.statusbar.showMessage(self.AMDock.docking_program + " is selected", 2500)
            else:
                self.check_opt = self.AMDock.checker.check_correct_prog(self.AMDock.target)
                if self.check_opt == QtGui.QMessageBox.Yes:
                    self.AMDock.docking_program = "AutoDockZn"
                    self.AMDock.statusbar.showMessage(self.AMDock.docking_program + " is selected", 2500)

        # added ligands (if exist) to list in binding site box
        if self.target_info.get_het():
            for res in self.target_info.get_het():
                self.lig_list.addItem('{}:{}:{}'.format(res[0], res[1][:3], res[1][3:]))
        if self.AMDock.project.mode == 1 and self.offtarget_info.get_het():
            for res in self.offtarget_info.get_het():
                self.lig_listB.addItem('{}:{}:{}'.format(res[0], res[1][:3], res[1][3:]))

        #         # self.reset_button.setEnabled(False)
        if self.AMDock.project.mode == 0:
            self.AMDock.log_widget.textedit.append('AMDOCK: IP > MODE: SIMPLE')
        elif self.AMDock.project.mode == 1:
            self.AMDock.log_widget.textedit.append('AMDOCK: IP > MODE: OFF-TARGET')
        else:
            self.AMDock.log_widget.textedit.append('AMDOCK: IP > MODE: SCORING')

        self.AMDock.log_widget.textedit.append('AMDOCK: IP > TARGET: %s' % self.AMDock.target.name)
        self.AMDock.log_widget.textedit.append('AMDOCK: IP > TARGET (Hetero): %s' % self.target_info.get_het())
        self.AMDock.log_widget.textedit.append('AMDOCK: IP > TARGET (Zn atoms): %s' % self.target_info.get_zn())
        if self.AMDock.project.mode == 1:
            self.AMDock.log_widget.textedit.append('AMDOCK: IP > OFF-TARGET: %s' % self.AMDock.offtarget.name)
            self.AMDock.log_widget.textedit.append('AMDOCK: IP > OFF-TARGET (Hetero): %s' %
                                                    self.offtarget_info.get_het())
            self.AMDock.log_widget.textedit.append('AMDOCK: IP > OFF-TARGET (Zn atoms): %s' %
                                                                  self.offtarget_info.get_zn())
        self.AMDock.log_widget.textedit.append('AMDOCK: IP > LIGAND: %s' % self.AMDock.ligand.name)
        self.AMDock.log_widget.textedit.append('AMDOCK: IP > LIGAND (heavy_atoms): %s' %
                                                              self.AMDock.ligand.ha)
        self.AMDock.log_widget.textedit.append('AMDOCK: IP > Defining Initial Parameters... Done\n')
        self.AMDock.log_widget.textedit.append('AMDOCK: IF > Prepare Initial Files...')

        self.AMDock.output2file.out2file('>> DOCKING_PROGRAM: %s\n' % self.AMDock.docking_program)

        if self.AMDock.project.mode == 0:
            self.AMDock.output2file.out2file('>> MODE: SIMPLE\n')
        elif self.AMDock.project.mode == 1:
            self.AMDock.output2file.out2file('>> MODE: OFF-TARGET\n')
        else:
            self.AMDock.output2file.out2file('>> MODE: SCORING\n')
        self.AMDock.output2file.out2file('>> TARGET: %s\n' % self.AMDock.target.name)
        self.AMDock.output2file.out2file('>  Target_Hetero: %s\n' % self.target_info.get_het())
        self.AMDock.output2file.out2file('>  Target_Zn: %s\n' % self.target_info.get_zn())
        if self.AMDock.project.mode == 1:
            self.AMDock.output2file.out2file('>> OFF-TARGET: %s\n' % self.AMDock.offtarget.name)
            self.AMDock.output2file.out2file('>  Off-Target_Hetero: %s\n' % self.offtarget_info.get_het())
            self.AMDock.output2file.out2file('>  Off-Target_Zn: %s\n' % self.offtarget_info.get_zn())
        self.AMDock.output2file.out2file('>> LIGAND: %s\n' % self.AMDock.ligand.name)
        self.AMDock.output2file.out2file('>  heavy_atoms: %s\n' % self.AMDock.ligand.ha)

        self.list_process = []
        if self.AMDock.target.prepare:
            pdb2pqr = {'PDB2PQR': [self.AMDock.this_python, [self.AMDock.pdb2pqr_py, '--ph-calc-method=propka',
                                                             '--verbose', '--noopt', '--drop-water', '--chain',
                                                             '--with-ph', str(self.pH_value.value()),
                                                             '--ff=%s' % self.AMDock.configuration_tab.forcefield,
                                                             self.AMDock.target.input, self.AMDock.target.pqr]]}
            fix_pqr = {'Fix_PQR': [Fix_PQR, [self.AMDock.target.input, self.AMDock.target.pqr, self.AMDock.target.zn_atoms]]}

            prepare_receptor4 = {'Prepare_Receptor4': [self.AMDock.this_python, [self.AMDock.prepare_receptor4_py,
                                                                                 '-r', self.AMDock.target.pdb,'-v', '-U',
                                                                            'nphs_lps_waters_nonstdres_deleteAltB']]}
            self.list_process.append(pdb2pqr)
            self.list_process.append(fix_pqr)
            self.list_process.append(prepare_receptor4)
        if self.AMDock.project.mode == 1:
            if self.AMDock.offtarget.prepare:
                pdb2pqrB = {'PDB2PQR B': [self.AMDock.this_python, [self.AMDock.pdb2pqr_py, '--ph-calc-method=propka',
                                                                    '--verbose', '--noopt', '--drop-water', '--chain',
                                                                    '--with-ph', str(self.pH_value.value()),
                                                                    '--ff=%s' % self.AMDock.configuration_tab.forcefield,
                                                                    self.AMDock.offtarget.input,
                                                                    self.AMDock.offtarget.pqr]]}

                fix_pqrB = {'Fix_PQR B': [Fix_PQR, [self.AMDock.offtarget.input, self.AMDock.offtarget.pqr,
                                                   self.AMDock.offtarget.zn_atoms]]}
                prepare_receptor4B = {'Prepare_Receptor4 B': [self.AMDock.this_python,
                                                              [self.AMDock.prepare_receptor4_py, '-r',
                                                               self.AMDock.offtarget.pdb, '-v', '-U',
                                                               'nphs_lps_waters_nonstdres_deleteAltB']]}
                self.list_process.append(pdb2pqrB)
                self.list_process.append(fix_pqrB)
                self.list_process.append(prepare_receptor4B)
        if self.AMDock.ligand.prepare:
            protonate_ligand = {'Protonate Ligand': [self.AMDock.openbabel, ['-i', 'pdb', self.AMDock.ligand.input,
                                                                             '-opdb', '-O', self.AMDock.ligand.pdb,
                                                                             '-h', '-p',
                                                                             str(self.pH_value.value())]]}

            prepare_ligand4 = {'Prepare_Ligand4': [self.AMDock.this_python, [self.AMDock.prepare_ligand4_py,
                                                                             '-l', self.AMDock.ligand.pdb,
                                                                             '-v', ]]}
            self.list_process.append(protonate_ligand)
            self.list_process.append(prepare_ligand4)

        queue = Queue.Queue()
        queue.name = 1
        for process in self.list_process:
            queue.put(process)
        self.W.set_queue(queue)  # , 'Prepare Input Files')
        self.W.start_process()
        # self.need_grid = self.need_gridB = True

    def binding_site(self):
        """
        mide las dimensiones de la proteina
        prepare_gpf4
        ejecuta auto grid
        ejecuta autoligand
        determina el centro del objeto
        """
        queue = Queue.Queue()
        queue.name = 2
        if self.AMDock.state == 2:
            msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'Other processes are running in the background. '
                                                                   'Please wait for these to end.',
                                             QtGui.QMessageBox.Ok)
            return
        elif self.AMDock.section in [-1, 0 ]:
            msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'It seems that not all previous steps have been '
                                                                   'completed. Please do all the steps sequentially.',
                                             QtGui.QMessageBox.Ok)
            return
        elif self.AMDock.section in [2, 3]:
            msg = QtGui.QMessageBox.warning(self.AMDock, 'Warning', 'This step was successfully completed previously.'
                                                                    ' Do you want to repeat it?',
                                            QtGui.QMessageBox.Yes | QtGui.QMessageBox.No)
            if msg == QtGui.QMessageBox.No:
                return

        if self.AMDock.project.bsd_mode_target == 0:
            self.target_info.get_box()
            prepare_gpf4 = {'Prepare_gpf4': [self.AMDock.this_python, [self.AMDock.prepare_gpf4_py, '-l',
                                self.AMDock.ligand.pdbqt, '-r', self.AMDock.target.pdbqt, '-p', 'npts={0},{1},{2}'.format(
                    *self.target_info.size), '-p', 'gridcenter={0},{1},{2}'.format(*self.target_info.center), '-p',
                    'spacing=%.3f' % self.AMDock.spacing_autoligand, '-o', self.AMDock.target.auto_lig]]}
            queue.put(prepare_gpf4)
            autogrid4 = {'AutoGrid4': [self.AMDock.autogrid, ['-p', self.AMDock.target.auto_lig]]}
            queue.put(autogrid4)
            autoligand = {'AutoLigand': [self.AMDock.this_python, [self.AMDock.autoligand_py, '-r',
                                             self.AMDock.target.pdbqt_name, '-a', '{}'.format(self.AMDock.ligand.ha)]]}
            queue.put(autoligand)

        elif self.AMDock.project.bsd_mode_target == 1:
            self.AMDock.target.selected = str(self.grid_predef_text.text())
            self.target_info.get_box()
            self.target_info.get_center_selection(self.AMDock.target.selected)

            prepare_gpf4 = {'Prepare_gpf4': [self.AMDock.this_python, [self.AMDock.prepare_gpf4_py, '-l',
                            self.AMDock.ligand.pdbqt, '-r', self.AMDock.target.pdbqt, '-p', 'npts={0},{1},{2}'.format(
                            *self.target_info.size), '-p', 'gridcenter={0},{1},{2}'.format(*self.target_info.center),
                            '-p', 'spacing=%.3f' % self.AMDock.spacing_autoligand, '-o', self.AMDock.target.auto_lig]]}
            queue.put(prepare_gpf4)
            autogrid4 = {'AutoGrid4': [self.AMDock.autogrid, ['-p', self.AMDock.target.auto_lig]]}
            queue.put(autogrid4)
            autoligand = {'AutoLigand_point': [self.AMDock.this_python, [self.AMDock.autoligand_py, '-r',
                          self.AMDock.target.pdbqt_name, '-a', '{}'.format(self.AMDock.ligand.ha), '-x',
                          self.target_info.selection_center[0], '-y', self.target_info.selection_center[1], '-z',
                          self.target_info.selection_center[2], '-f', '1']]}
            queue.put(autoligand)

        elif self.AMDock.project.bsd_mode_target == 2:
            self.AMDock.target.selected = str(self.lig_list.currentText())
            self.target_info.get_center_selection(self.AMDock.target.selected)
            self.grid_center = self.target_info.selection_center

        elif self.AMDock.project.bsd_mode_target == 3:
            if self.need_grid:
                # obj = open(self.AMDock.obj_center, 'w')
                # obj.write('center_x = ' + self.coor_x.value() + '\n')
                # obj.write('center_y = ' + self.coor_y.value() + '\n')
                # obj.write('center_z = ' + self.coor_z.value() + '\n')
                # obj.close()
                self.grid_center = [str(self.coor_x.value()), str(self.coor_y.value()), str(self.coor_z.value())]
                if self.size_x.value() < self.lig_size or self.size_y.value() < self.lig_size or self.size_z.value() < \
                        self.lig_size:
                    self.grid_opt, self.dim_list = smallbox_warning(self, {'x': self.size_x.value(),
                                                                           'y': self.size_y.value(),
                                                                           'z': self.size_z.value()}, self.lig_size,
                                                                    self.AMDock.target.name)
                    if self.grid_opt == QtGui.QMessageBox.Yes:
                        if 'x' in self.dim_list:
                            self.size_x.setValue(self.lig_size)
                        if 'y' in self.dim_list:
                            self.size_y.setValue(self.lig_size)
                        if 'z' in self.dim_list:
                            self.size_z.setValue(self.lig_size)
                    else:
                        self.size = [self.size_x.value(), self.size_y.value(), self.size_z.value()]

        if self.AMDock.project.mode == 1:
            if self.AMDock.project.bsd_mode_offtarget == 0:
                self.offtarget_info.get_box()
                prepare_gpf4B = {'Prepare_gpf4 B': [self.AMDock.this_python, [self.AMDock.prepare_gpf4_py, '-l',
                                                                              self.AMDock.ligand.pdbqt, '-r',
                                                                              self.AMDock.offtarget.pdbqt, '-p',
                                                                              'npts={0},{1},{2}'.format(
                                                                                  *self.offtarget_info.size), '-p',
                                                                              'gridcenter={0},{1},{2}'.format(
                                                                                  *self.offtarget_info.center),
                                                                              '-p',
                                                                              'spacing=%.3f' % self.AMDock.spacing_autoligand,
                                                                              '-o', self.AMDock.offtarget.auto_lig]]}
                queue.put(prepare_gpf4B)
                autogrid4B = {'AutoGrid4 B': [self.AMDock.autogrid, ['-p', self.AMDock.offtarget.auto_lig]]}
                queue.put(autogrid4B)
                autoligandB = {'AutoLigand B': [self.AMDock.this_python, [self.AMDock.autoligand_py, '-r',
                                                                          self.AMDock.offtarget.pdbqt_name, '-a',
                                                                          '{}'.format(self.AMDock.ligand.ha)]]}
                queue.put(autoligandB)
            elif self.AMDock.project.bsd_mode_offtarget == 1:
                self.AMDock.offtarget.selected = str(self.grid_predef_textB.text())
                self.offtarget_info.get_box()
                self.offtarget_info.get_center_selection(self.AMDock.offtarget.selected)
                prepare_gpf4B = {'Prepare_gpf4 B': [self.AMDock.this_python, [self.AMDock.prepare_gpf4_py, '-l',
                                                                              self.AMDock.ligand.pdbqt, '-r',
                                                                              self.AMDock.offtarget.pdbqt, '-p',
                                                                              'npts={0},{1},{2}'.format(
                                                                                  *self.offtarget_info.size), '-p',
                                                                              'gridcenter={0},{1},{2}'.format(
                                                                                  *self.offtarget_info.center), '-p',
                                                                              'spacing=%.3f' % self.AMDock.spacing_autoligand,
                                                                              '-o', self.AMDock.offtarget.auto_lig]]}
                queue.put(prepare_gpf4B)
                autogrid4B = {'AutoGrid4 B': [self.AMDock.autogrid, ['-p', self.AMDock.offtarget.auto_lig]]}
                queue.put(autogrid4B)
                autoligandB = {'AutoLigand_point B': [self.AMDock.this_python, [self.AMDock.autoligand_py, '-r',
                                                                          self.AMDock.offtarget.pdbqt_name, '-a',
                                                                          '{}'.format(self.AMDock.ligand.ha), '-x',
                                                                          self.target_info.selection_center[0], '-y',
                                                                          self.target_info.selection_center[1], '-z',
                                                                          self.target_info.selection_center[2], '-f',
                                                                          '1']]}
                queue.put(autoligandB)

            elif self.AMDock.project.bsd_mode_offtarget == 2:
                self.AMDock.offtarget.selected = str(self.lig_listB.currentText())
                self.offtarget_info.get_center_selection(self.AMDock.offtarget.selected)
                self.grid_centerB = self.offtarget_info.selection_center

            elif self.AMDock.project.bsd_mode_offtarget == 3:
                if self.need_gridB:
                    obj = open(self.AMDock.obj_center1, 'w')
                    obj.write('center_x = ' + self.coor_xB.text() + '\n')
                    obj.write('center_y = ' + self.coor_yB.text() + '\n')
                    obj.write('center_z = ' + self.coor_zB.text() + '\n')
                    obj.close()
                    if self.size_xB.value() < self.lig_size or self.size_yB.value() < self.lig_size or \
                            self.size_zB.value() < self.lig_size:
                        self.grid_optB, self.dim_listB = smallbox_warning(self, {'x': self.size_x.value(),
                                                                                 'y': self.size_y.value(),
                                                                                 'z': self.size_z.value()},
                                                                          self.lig_size, self.AMDock.offtarget.name)
                        if self.grid_optB == QtGui.QMessageBox.Yes:
                            if 'x' in self.dim_listB:
                                self.size_xB.setValue(self.lig_size)
                            if 'y' in self.dim_listB:
                                self.size_yB.setValue(self.lig_size)
                            if 'z' in self.dim_listB:
                                self.size_zB.setValue(self.lig_size)
        #             self.progressBar.setValue(50)
        self.W.set_queue(queue)  # , 'Prepare Input Files')
        self.W.start_process()

    def check_res(self, qlineedit):
        inputtext = str(qlineedit.text()).upper()
        qlineedit.setText(inputtext)
        if qlineedit.objectName() == 'grid_predef_text':
            if self.target_info.check_select(inputtext):
                self.AMDock.target.bsd_ready = True
                self.checker_icon_ok.show()
                self.checker_icon.hide()
            else:
                self.AMDock.target.bsd_ready = False
                self.checker_icon.show()
                self.checker_icon_ok.hide()
        else:
            if self.offtarget_info.check_select(inputtext):
                self.AMDock.offtarget.bsd_ready = True
                self.checker_icon_okB.show()
                self.checker_iconB.hide()
            else:
                self.AMDock.offtarget.bsd_ready = False
                self.checker_iconB.show()
                self.checker_icon_okB.hide()

    def output_function(self, callable_name, result):
        # print callable_name, result, '#################'
        if callable_name == 'ProtDim':
            self.grid_center, self.grid_dim = result

        if callable_name == 'Rg':
            pass

    def reset_input_section(self):
        self.reset_ligand()
        self.reset_target()
        self.reset_offtarget()

        self.progressBar_section.setValue(0)
        self.progressBar_global.setValue(10)

    def reset_grid_section(self, all=False):
        self.grid_predef_text.clear()
        self.grid_predef_textB.clear()
        self.coor_x.setValue(0)
        self.coor_y.setValue(0)
        self.coor_z.setValue(0)
        self.coor_xB.setValue(0)
        self.coor_yB.setValue(0)
        self.coor_zB.setValue(0)
        self.size_x.setValue(30)
        self.size_y.setValue(30)
        self.size_z.setValue(30)
        self.size_xB.setValue(30)
        self.size_yB.setValue(30)
        self.size_zB.setValue(30)
        if all:
            self.btnA_auto.setChecked(True)
            self.btnB_auto.setChecked(True)
            self.lig_list.clear()
            self.lig_listB.clear()
            self.size_x.clear()
            self.size_y.clear()
            self.size_z.clear()
            self.size_xB.clear()
            self.size_yB.clear()
            self.size_zB.clear()

        self.progressBar_section.setValue(0)
        self.progressBar_global.setValue(40)

    def reset_sections(self, section):
        if self.AMDock.state == 2:
            msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'Other processes are running in the background. '
                                                                   'Please wait for these to end.',
                                             QtGui.QMessageBox.Ok)
            return
        self.AMDock.section = section - 1
        self.highlight()
        if section == 0:
            self.wdir_text.clear()
            self.project_text.clear()
            self.proj_loc_label.clear()
            self.AMDock.project = PROJECT()
            self.reset_ligand()
            self.reset_target()
            self.reset_offtarget()
            self.reset_grid_section(True)
            # self.progressBar_section.setValue(0)
            self.progressBar_global.setValue(0)
        elif section == 1:
            self.reset_ligand()
            self.reset_target()
            self.reset_offtarget()
            self.reset_grid_section(True)
            # self.progressBar_section.setValue(0)
            self.progressBar_global.setValue(10)
        elif section == 2:
            self.reset_grid_section()
        elif section == 3:
            self.progressBar_global.setValue(70)

    def reset_function(self):
        if self.AMDock.state == 2:
            msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'Other processes are running in the background. '
                                                                   'Please wait for these to end.',
                                             QtGui.QMessageBox.Ok)
            return

        if self.AMDock.section == -1:
            # self.AMDock.statusbar.showMessage("Version: %s" % self.AMDock.version)
            self.AMDock.main_window.setTabEnabled(0, True)
            self.AMDock.main_window.setCurrentIndex(0)
            self.AMDock.main_window.setTabEnabled(1, False)
            return
        else:
            reset_opt = reset_warning(self)
            if reset_opt == QtGui.QMessageBox.Yes:
                self.AMDock.section = -1
                self.AMDock.statusbar.removeWidget(self.AMDock.mess)
                self.program_label.setText('Resetting...Done.')
                self.highlight()
                # self.AMDock.statusbar.showMessage("Version: %s" % self.AMDock.version)
                self.AMDock.main_window.setTabEnabled(0, True)
                self.AMDock.main_window.setCurrentIndex(0)
                self.AMDock.main_window.setTabEnabled(1, False)

                self.wdir_text.clear()
                self.project_text.clear()
                self.proj_loc_label.clear()
                self.AMDock.project = PROJECT()
                self.reset_ligand()
                self.reset_target()
                self.reset_offtarget()
                self.reset_grid_section(True)
                # self.AMDock.statusbar.clear()
                # self.progressBar_section.setValue(0)
                self.progressBar_global.setValue(0)
                # self.AMDock.log_widget.textedit.clear()
                self.hide_all('all')
                self.simple_docking.setChecked(True)



                try:
                    self.b_pymol.__del__()
                except:
                    pass
                try:
                    self.b_pymolB.__del__()
                except:
                    pass
                try:
                    self.b_pymol_timer.stop()
                except:
                    pass
                try:
                    self.b_pymol_timerB.stop()
                except:
                    pass
                if self.AMDock.project.WDIR:
                    rm_folder = QtGui.QMessageBox.warning(self, 'Warning',
                                                          "Do you wish to delete the previous project's folder?.",
                                                          QtGui.QMessageBox.Yes | QtGui.QMessageBox.No)
                    if rm_folder == QtGui.QMessageBox.Yes:
                        try:
                            self.AMDock.output2file.conclude()
                            os.chdir(self.AMDock.project.location)
                            shutil.rmtree(self.AMDock.project.WDIR)
                        except:
                            QtGui.QMessageBox.warning(self, 'Error',
                                                      "The directory cannot be deleted. Probably is being used by "
                                                      "another program. Please check this and delete it ",
                                                      QtGui.QMessageBox.Ok)
                self.AMDock.configuration_tab.initial_config()
                self.AMDock.log_widget.textedit.append('\nAMDOCK: RESETTING... Done.')
                self.AMDock.log_widget.textedit.append(80 * '-' + '\n\n')

                return True


    def hide_all(self, l):
        if l == 'A':
            self.grid_predef_text.hide()
            self.checker_icon.hide()
            self.checker_icon_ok.hide()
            self.lig_list.hide()
            self.coor_box.hide()
            self.size_box.hide()
            # self.grid_icon_ok.hide()
            # self.grid_icon.hide()
        elif l == 'B':
            self.grid_predef_textB.hide()
            self.checker_iconB.hide()
            self.checker_icon_okB.hide()
            self.lig_listB.hide()
            self.coor_boxB.hide()
            self.size_boxB.hide()
            # self.grid_icon_okB.hide()
            # self.grid_iconB.hide()
        else:
            self.grid_predef_text.hide()
            self.checker_icon.hide()
            self.checker_icon_ok.hide()
            self.lig_list.hide()
            self.coor_box.hide()
            self.size_box.hide()
            self.grid_predef_textB.hide()
            self.checker_iconB.hide()
            self.checker_icon_okB.hide()
            self.lig_listB.hide()
            self.coor_boxB.hide()
            self.size_boxB.hide()
            # self.grid_icon_okB.hide()
            # self.grid_iconB.hide()
            # self.grid_icon_ok.hide()
            # self.grid_icon.hide()
            # self.btnA_auto.setChecked(True)
            # self.btnB_auto.setChecked(True)

    def grid_sel_protection(self, id):
        if self.AMDock.state == 2:
            msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'Other processes are running in the background. '
                                                                   'Please wait for these to end.',
                                             QtGui.QMessageBox.Ok)
            # id.setChecked(False)
            return
        elif self.AMDock.section in [-1, 0]:
            msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'It seems that not all previous steps have been '
                                                                   'completed. Please do all the steps sequentially.',
                                             QtGui.QMessageBox.Ok)
            # id.setChecked(False)
            return
        elif self.AMDock.section in [2, 3]:
            msg = QtGui.QMessageBox.warning(self.AMDock, 'Warning', 'This step was successfully completed previously.'
                                                                    ' Do you want to repeat it?',
                                            QtGui.QMessageBox.Yes | QtGui.QMessageBox.No)
            if msg == QtGui.QMessageBox.No:
                # id.setChecked(False)
                return
            elif msg == QtGui.QMessageBox.Yes:
                # id.setChecked(False)
                self.reset_sections(2)

        self.AMDock.section = 1

        id.setChecked(True)
        self.grid_prot(id)

    def grid_prot(self, b):
        # print b.objectName()
        if self.target_column_group_btnA.id(b) == 1:
            self.hide_all('A')
            self.AMDock.project.bsd_mode_target = 0
            # self.grid_pymol_button.setEnabled(False)
            # self.grid_pymol_button.setText('Show in PyMol')
        elif self.target_column_group_btnA.id(b) == 2:
            self.hide_all('A')
            self.grid_predef_text.clear()
            self.grid_predef_text.setReadOnly(False)
            self.grid_predef_text.show()
            self.checker_icon.show()
            self.AMDock.project.bsd_mode_target = 1
            # self.grid_pymol_button.setText('Show in PyMol')
            # self.grid_pymol_button.setEnabled(False)
        elif self.target_column_group_btnA.id(b) == 3:
            if not self.lig_list.count():
                msg = QtGui.QMessageBox.warning(self, 'Error', "There is no hetero to select this option",
                                                QtGui.QMessageBox.Ok)
                self.btnA_auto.setChecked(True)
                return
            self.hide_all('A')
            self.lig_list.show()
            self.AMDock.project.bsd_mode_target = 2
            # self.grid_pymol_button.setEnabled(False)
            # self.grid_pymol_button.setText('Show in PyMol')
        elif self.target_column_group_btnA.id(b) == 4:
            self.hide_all('A')
            self.AMDock.project.bsd_mode_target = 3
            self.coor_box.show()
            self.size_box.show()
            # self.grid_icon.show()
            # self.grid_pymol_button.setText('Build in PyMol')
        if self.offtarget_column_group_btnB.id(b) == 1:
            self.hide_all('B')
            self.AMDock.project.bsd_mode_offtarget = 0
            # self.grid_pymol_buttonB.setEnabled(False)
            # self.grid_pymol_buttonB.setText('Show in PyMol')
        elif self.offtarget_column_group_btnB.id(b) == 2:
            self.hide_all('B')
            self.grid_predef_textB.clear()
            self.grid_predef_textB.setReadOnly(False)
            self.grid_predef_textB.show()
            self.checker_iconB.show()
            self.AMDock.project.bsd_mode_offtarget = 1
            # self.grid_pymol_buttonB.setEnabled(False)
            # self.grid_pymol_buttonB.setText('Show in PyMol')
        elif self.offtarget_column_group_btnB.id(b) == 3:
            self.hide_all('B')
            self.lig_listB.show()
            self.AMDock.project.bsd_mode_offtarget = 2
            # self.grid_pymol_buttonB.setEnabled(False)
            # self.grid_pymol_buttonB.setText('Show in PyMol')
        elif self.offtarget_column_group_btnB.id(b) == 4:
            self.hide_all('B')
            self.AMDock.project.bsd_mode_offtarget = 3
            self.coor_boxB.show()
            self.size_boxB.show()
            # self.grid_iconB.show()
            # self.grid_pymol_buttonB.setText('Build in PyMol')
            # self.grid_pymol_buttonB.setEnabled(True)

        # if (self.target_column_group_btnA.id(b) == 1 and self.offtarget_column_group_btnB.id(
        #         self.offtarget_column_group_btnB.checkedButton()) == 2) or (
        #         self.offtarget_column_group_btnB.id(b) == 2 and self.target_column_group_btnA.id(
        #     self.target_column_group_btnA.checkedButton()) == 1):
        #     if self.AMDock.errorB == 1:
        #         self.checker_iconB.show()
        #         # self.bind_site_button.setEnabled(False)
        #     else:
        #         self.checker_icon_okB.show()
        #         # self.bind_site_button.setEnabled(True)
        # elif (self.target_column_group_btnA.id(b) == 1 and self.offtarget_column_group_btnB.id(
        #         self.offtarget_column_group_btnB.checkedButton()) == 4) or (
        #         self.offtarget_column_group_btnB.id(b) == 4 and self.target_column_group_btnA.id(
        #     self.target_column_group_btnA.checkedButton()) == 1):
        #     self.grid = 2
        #     if self.AMDock.gerrorB == 1:
#         #         self.grid_iconB.show()
        #         # self.bind_site_button.setEnabled(False)
        #     else:
#         #         self.grid_icon_okB.show()
        #         # self.bind_site_button.setEnabled(True)
        # elif (self.target_column_group_btnA.id(b) == 2 and self.offtarget_column_group_btnB.id(
        #         self.offtarget_column_group_btnB.checkedButton()) == 1) or (
        #         self.offtarget_column_group_btnB.id(b) == 1 and self.target_column_group_btnA.id(
        #     self.target_column_group_btnA.checkedButton()) == 2):
        #     if self.AMDock.error == 1:
        #         self.checker_icon.show()
        #         # self.bind_site_button.setEnabled(False)
        #     else:
        #         self.checker_icon_ok.show()
        #         # self.bind_site_button.setEnabled(True)
        # elif (self.target_column_group_btnA.id(b) == 2 and self.offtarget_column_group_btnB.id(
        #         self.offtarget_column_group_btnB.checkedButton()) == 2) or (
        #         self.offtarget_column_group_btnB.id(b) == 2 and self.target_column_group_btnA.id(
        #     self.target_column_group_btnA.checkedButton()) == 2):
        #     if self.AMDock.errorB == 1:
        #         self.checker_iconB.show()
        #     else:
        #         self.checker_icon_okB.show()
        #     if self.AMDock.error == 1:
        #         self.checker_icon.show()
        #     else:
        #         self.checker_icon_ok.show()
        #     # if self.AMDock.errorB == 0 and self.AMDock.error == 0:
        #         # self.bind_site_button.setEnabled(True)
        #     # else:
        #         # self.bind_site_button.setEnabled(False)
        # elif (self.target_column_group_btnA.id(b) == 2 and self.offtarget_column_group_btnB.id(
        #         self.offtarget_column_group_btnB.checkedButton()) == 3) or (
        #         self.offtarget_column_group_btnB.id(b) == 3 and self.target_column_group_btnA.id(
        #     self.target_column_group_btnA.checkedButton()) == 2):
        #     if self.AMDock.error == 1:
        #         self.checker_icon.show()
        #         # self.bind_site_button.setEnabled(False)
        #     else:
        #         self.checker_icon_ok.show()
        #         # self.bind_site_button.setEnabled(True)
        # elif (self.target_column_group_btnA.id(b) == 2 and self.offtarget_column_group_btnB.id(
        #         self.offtarget_column_group_btnB.checkedButton()) == 4) or (
        #         self.offtarget_column_group_btnB.id(b) == 4 and self.target_column_group_btnA.id(
        #     self.target_column_group_btnA.checkedButton()) == 2):
        #     self.grid = 2
        #     if self.AMDock.gerrorB == 1:
#         #         self.grid_iconB.show()
        #     else:
#         #         self.grid_icon_okB.show()
        #     if self.AMDock.error == 1:
        #         self.checker_icon.show()
        #     else:
        #         self.checker_icon_ok.show()
        #     # if self.AMDock.gerrorB == 0 and self.AMDock.error == 0:
        #     #     # self.bind_site_button.setEnabled(True)
        #     # else:
        #     #     # self.bind_site_button.setEnabled(False)
        # elif (self.target_column_group_btnA.id(b) == 3 and self.offtarget_column_group_btnB.id(
        #         self.offtarget_column_group_btnB.checkedButton()) == 2) or (
        #         self.offtarget_column_group_btnB.id(b) == 2 and self.target_column_group_btnA.id(
        #     self.target_column_group_btnA.checkedButton()) == 3):
        #     if self.AMDock.errorB == 1:
        #         self.checker_iconB.show()
        #         # self.bind_site_button.setEnabled(False)
        #     else:
        #         self.checker_icon_okB.show()
        #         # self.bind_site_button.setEnabled(True)
        # elif (self.target_column_group_btnA.id(b) == 3 and self.offtarget_column_group_btnB.id(
        #         self.offtarget_column_group_btnB.checkedButton()) == 4) or (
        #         self.offtarget_column_group_btnB.id(b) == 4 and self.target_column_group_btnA.id(
        #     self.target_column_group_btnA.checkedButton()) == 3):
        #     self.grid = 2
        #     if self.AMDock.gerrorB == 1:
#         #         self.grid_iconB.show()
        #         # self.bind_site_button.setEnabled(False)
        #     else:
#         #         self.grid_icon_okB.show()
        #         # self.bind_site_button.setEnabled(True)
        # elif (self.target_column_group_btnA.id(b) == 4 and self.offtarget_column_group_btnB.id(
        #         self.offtarget_column_group_btnB.checkedButton()) == 1) or (
        #         self.offtarget_column_group_btnB.id(b) == 1 and self.target_column_group_btnA.id(
        #     self.target_column_group_btnA.checkedButton()) == 4):
        #     self.grid = 1
        #     if self.AMDock.gerror == 1:
#         #         self.grid_icon.show()
#         #         self.grid_icon_ok.hide()
        #         # self.bind_site_button.setEnabled(False)
        #     else:
#         #         self.grid_icon_ok.show()
#         #         self.grid_icon.hide()
        #         # self.bind_site_button.setEnabled(True)
        # elif (self.target_column_group_btnA.id(b) == 4 and self.offtarget_column_group_btnB.id(
        #         self.offtarget_column_group_btnB.checkedButton()) == 2) or (
        #         self.offtarget_column_group_btnB.id(b) == 2 and self.target_column_group_btnA.id(
        #     self.target_column_group_btnA.checkedButton()) == 4):
        #     self.grid = 1
        #     if self.AMDock.errorB == 1:
        #         self.checker_iconB.show()
        #     else:
        #         self.checker_icon_okB.show()
        #     if self.AMDock.gerror == 1:
#         #         self.grid_icon.show()
        #     else:
#         #         self.grid_icon_ok.show()
        #     # if self.AMDock.errorB == 0 and self.AMDock.gerror == 0:
        #     #     # self.bind_site_button.setEnabled(True)
        #     # else:
        #     #     # self.bind_site_button.setEnabled(False)
        # elif (self.target_column_group_btnA.id(b) == 4 and self.offtarget_column_group_btnB.id(
        #         self.offtarget_column_group_btnB.checkedButton()) == 3) or (
        #         self.offtarget_column_group_btnB.id(b) == 3 and self.target_column_group_btnA.id(
        #     self.target_column_group_btnA.checkedButton()) == 4):
        #     self.grid = 1
        #     if self.AMDock.gerror == 1:
#         #         self.grid_icon.show()
        #         # self.bind_site_button.setEnabled(False)
        #     else:
#         #         self.grid_icon_ok.show()
        #         # self.bind_site_button.setEnabled(True)
        # elif (self.target_column_group_btnA.id(b) == 4 and self.offtarget_column_group_btnB.id(
        #         self.offtarget_column_group_btnB.checkedButton()) == 4) or (
        #         self.offtarget_column_group_btnB.id(b) == 4 and self.target_column_group_btnA.id(
        #     self.target_column_group_btnA.checkedButton()) == 4):
        #     self.grid = 3
        #     if self.AMDock.gerrorB == 1:
#         #         self.grid_iconB.show()
        #     else:
#         #         self.grid_icon_okB.show()
        #     if self.AMDock.gerror == 1:
#         #         self.grid_icon.show()
        #     else:
#         #         self.grid_icon_ok.show()
        #     # if self.AMDock.gerrorB == 0 and self.AMDock.gerror == 0:
        #      #     # self.bind_site_button.setEnabled(True)
        #      # else:
        #      #     # self.bind_site_button.setEnabled(False)
        #  # else:
        #      # self.bind_site_button.setEnabled(True)

    def info_pass(self, prot):
        if prot == 'target':
            if os.path.exists('user_target_dim.txt'):
                tfile = open('user_target_dim.txt')
                for line in tfile:
                    line = line.strip('\n')
                    self.dim_data_target = line.split()
                tfile.close()
                if self.dim_data_target != self.ttemp:
                    if self.AMDock.project.mode == 1:
                        # self.btnA_user.setChecked(True)
                        if self.need_gridB:
                            self.progressBar.setValue(25)
                        else:
                            self.progressBar.setValue(37)
                    else:
                        # self.grid_user.setChecked(True)
                        self.progressBar.setValue(25)
                    self.btnA_user.setChecked(True)
                    self.coor_x.setText(self.dim_data_target[0])
                    self.coor_y.setText(self.dim_data_target[1])
                    self.coor_z.setText(self.dim_data_target[2])
                    self.size_x.setText(self.dim_data_target[3])
                    self.size_y.setText(self.dim_data_target[4])
                    self.size_z.setText(self.dim_data_target[5])
                    self.ttemp = self.dim_data_target
                    # self.bind_site_button.setEnabled(True)
                    # self.run_button.setEnabled(False)
                    self.need_grid = True
                    os.remove('user_target_dim.txt')
                    self.b_pymol_timer.stop()
                    # self.grid_pymol_button.setEnabled(False)
        elif prot == 'offtarget':
            if os.path.exists('user_off_target_dim.txt'):
                cfile = open('user_off_target_dim.txt')
                for line in cfile:
                    line = line.strip('\n')
                    self.dim_data_offtarget = line.split()
                cfile.close()
                if self.dim_data_offtarget != self.ttempB:
                    if self.need_grid:
                        self.progressBar.setValue(25)
                    else:
                        self.progressBar.setValue(37)
                    self.btnB_user.setChecked(True)
                    self.coor_xB.setText(self.dim_data_offtarget[0])
                    self.coor_yB.setText(self.dim_data_offtarget[1])
                    self.coor_zB.setText(self.dim_data_offtarget[2])
                    self.size_xB.setText(self.dim_data_offtarget[3])
                    self.size_yB.setText(self.dim_data_offtarget[4])
                    self.size_zB.setText(self.dim_data_offtarget[5])
                    self.ttempB = self.dim_data_offtarget
                    # self.bind_site_button.setEnabled(True)
                    # self.run_button.setEnabled(False)
                    self.need_gridB = True
                    os.remove('user_off_target_dim.txt')
                    self.b_pymol_timerB.stop()
                    # self.grid_pymol_buttonB.setEnabled(False)

    def grid_actions(self, btn):
        # print btn.objectName(), btn.text()
        if self.AMDock.state == 2:
            msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'Other processes are running in the background. '
                                                                   'Please wait for these to end.',
                                             QtGui.QMessageBox.Ok)
            # id.setChecked(False)
            return
        elif self.AMDock.section in [-1, 0, 1]:
            msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'It seems that not all previous steps have been '
                                                                   'completed. Please do all the steps sequentially.',
                                             QtGui.QMessageBox.Ok)
            # id.setChecked(False)
            return
        elif self.AMDock.section in [3]:
            msg = QtGui.QMessageBox.warning(self.AMDock, 'Warning', 'This step was successfully completed previously.'
                                                                    ' Do you want to repeat it?',
                                            QtGui.QMessageBox.Yes | QtGui.QMessageBox.No)
            if msg == QtGui.QMessageBox.No:
                # id.setChecked(False)
                return

        if btn.objectName() == 'grid_pymol_button':
            visual_arg = [self.AMDock.pymol, self.AMDock.target.pdbqt, self.AMDock.grid_pymol,
                          '--', '-c', '{},{},{}'.format(*self.grid_center),
                          '-s', '{},{},{}'.format(*self.size), '-p', 'target']
            print visual_arg
            self.box_pymol = {'PyMol_box_Target': [self.AMDock.this_python, visual_arg]}
            self.b_pymol = PROCESS()
            self.b_pymol.process.readyReadStandardOutput.connect(self.pymol_readStdOutput)
            self.b_pymol.process.readyReadStandardError.connect(self.readStdError)
            self.b_pymol.prog_finished.connect(self.for_finished)
            self.b_pymol.state.connect(self.check_state)
            b_pymolq = Queue.Queue()
            b_pymolq.name = -1
            b_pymolq.put(self.box_pymol)
            self.b_pymol.set_queue(b_pymolq)
            self.b_pymol.start_process()

        elif btn.objectName() == 'grid_pymol_buttonB':
            visual_arg = [self.AMDock.pymol, self.AMDock.offtarget.pdbqt, self.AMDock.grid_pymol, '--',
                          '-c', '{},{},{}'.format(*self.grid_centerB),
                          '-s', '{},{},{}'.format(*self.size), '-p', 'off-target']
            self.box_pymolB = {'PyMol_box_Off-Target': [self.AMDock.this_python, visual_arg]}
            self.b_pymolB = PROCESS()
            self.b_pymolB.process.readyReadStandardOutput.connect(self.pymol_readStdOutput)
            self.b_pymolB.process.readyReadStandardError.connect(self.readStdError)
            self.b_pymolB.prog_finished.connect(self.for_finished)
            self.b_pymolB.state.connect(self.check_state)
            b_pymolqB = Queue.Queue()
            b_pymolqB.name = -2
            b_pymolqB.put(self.box_pymolB)
            self.b_pymolB.set_queue(b_pymolqB)
            self.b_pymolB.start_process()

    # def check_queue(self, qname, finished):
    #     if finished:
    #         # self.reset_button.setEnabled(True)
    #         if qname == 'Prepare Input Files':
    #             # self.grid_pymol_button.setEnabled(False)
    #             # self.grid_pymol_buttonB.setEnabled(False)
    #             # self.reset_grid_button.setEnabled(False)
    #             # self.reset_grid_buttonB.setEnabled(False)
    #             if self.AMDock.scoring:
    #                 pass
    #                 # self.grid_box.setEnabled(False)
    #                 # self.input_box.setEnabled(False)
    #                 # self.run_scoring.setEnabled(True)
    #             else:
    #                 # self.grid_box.setEnabled(True)
    #                 # self.input_box.setEnabled(False)
    #                 self.grid_predef_text.setReadOnly(False)
    #                 self.grid_predef_textB.setReadOnly(False)
    #                 self.coor_xB.setReadOnly(False)
    #                 self.coor_yB.setReadOnly(False)
    #                 self.coor_zB.setReadOnly(False)
    #                 self.size_xB.setReadOnly(False)
    #                 self.size_yB.setReadOnly(False)
    #                 self.size_zB.setReadOnly(False)
    #                 self.coor_x.setReadOnly(False)
    #                 self.coor_y.setReadOnly(False)
    #                 self.coor_z.setReadOnly(False)
    #                 self.size_x.setReadOnly(False)
    #                 self.size_y.setReadOnly(False)
    #                 self.size_z.setReadOnly(False)
    #             if self.AMDock.project.mode == 1:
    #                 # self.btnA_auto.setEnabled(True)
    #                 # self.btnA_res.setEnabled(True)
    #                 # self.btnA_user.setEnabled(True)
    #                 # self.btnA_lig.setEnabled(True)
    #                 # self.btnB_auto.setEnabled(True)
    #                 # self.btnB_res.setEnabled(True)
    #                 # self.btnB_user.setEnabled(True)
    #                 # self.btnB_lig.setEnabled(True)
    #                 if self.AMDock.target.pdbqt is not None and self.AMDock.offtarget.pdbqt is not None and self.AMDock.ligand_pdbqt is not None:
    #                     self.progressBar.setValue(25)
    #             else:
    #                 if self.AMDock.target.pdbqt is not None and self.AMDock.ligand_pdbqt is not None:
    #                     if self.AMDock.scoring:
    #                         self.progressBar.setValue(50)
    #                     else:
    #                         self.progressBar.setValue(25)
    #             self.AMDock.log_widget.textedit.append('AMDOCK: IF Prepare Initial Files...Done\n')
    #         elif qname == 'Binding Site Determination':
    #             # self.grid_box.setEnabled(True)
    #             # self.bind_site_button.setEnabled(False)
    #             # self.grid_pymol_button.setEnabled(True)
    #             # self.reset_grid_button.setEnabled(True)
    #             # self.reset_grid_buttonB.setEnabled(True)
    #             # self.grid_pymol_buttonB.setEnabled(True)
    #             if self.AMDock.project.mode == 1:
    #                 # self.btnA_user.setEnabled(False)
    #                 # self.btnA_auto.setEnabled(False)
    #                 # self.btnA_lig.setEnabled(False)
    #                 # self.btnA_res.setEnabled(False)
    #                 # self.btnB_user.setEnabled(False)
    #                 # self.btnB_auto.setEnabled(False)
    #                 # self.btnB_lig.setEnabled(False)
    #                 # self.btnB_res.setEnabled(False)
    #                 self.grid_predef_textB.setReadOnly(True)
    #                 # self.lig_listB.setEnabled(False)
    #                 self.coor_xB.setReadOnly(True)
    #                 self.coor_yB.setReadOnly(True)
    #                 self.coor_zB.setReadOnly(True)
    #                 self.size_xB.setReadOnly(True)
    #                 self.size_yB.setReadOnly(True)
    #                 self.size_zB.setReadOnly(True)
    #                 self.grid_pymol_buttonB.setText('Show in PyMol')
    #                 self.need_gridB = False
    #             self.grid_predef_text.setReadOnly(True)
    #             # self.lig_list.setEnabled(False)
    #             self.coor_x.setReadOnly(True)
    #             self.coor_y.setReadOnly(True)
    #             self.coor_z.setReadOnly(True)
    #             self.size_x.setReadOnly(True)
    #             self.size_y.setReadOnly(True)
    #             self.size_z.setReadOnly(True)
    #
    #             # self.run_button.setEnabled(True)
    #             self.need_grid = False
    #             self.AMDock.log_widget.textedit.append('AMDOCK: BSD Binding Site Definition...Done\n')
    #             self.grid_pymol_button.setText('Show in PyMol')
    #             if self.AMDock.program_mode == 'SCORING':
    #                 self.progressBar.setValue(10)
    #             else:
    #                 self.progressBar.setValue(50)
    #
    #         elif qname == 'Molecular Docking Simulation':
    #             self.go_result()
    #             self.AMDock.log_widget.textedit.append(
    #                 'AMDOCK: MDS Molecular Docking Simulation...Done\n')
    #         else:
    #             # self.grid_box.setEnabled(False)
    #             self.progressBar.setValue(100)
    #             self.go_scoring()
    #     else:
    #         self.queue_name = qname

    # def prog_show(self, prog):
    #     # self.AMDock.project.prog = prog
    #     if self.queue_name == 'Prepare Input Files':
    #         if self.AMDock.project.mode == 1:
    #             if prog == 'PDB2PQR':
    #                 progress(self, 1, 1, 14, time=20, mess='Running PDB2PQR for Target...')
    #                 self.AMDock.log_widget.textedit.append(
    #                     'AMDOCK: IF Running PDB2PQR for Target Protein...')
    #             elif prog == 'PDB2PQR B':
    #                 progress(self, 1, 1, 18, time=20, mess='Running PDB2PQR for Off-Target...')
    #                 self.AMDock.log_widget.textedit.append(
    #                     'AMDOCK: IF Running PDB2PQR for Off-Target Protein...')
    #             elif prog == 'Prepare_Receptor4':
    #                 progress(self, 1, 1, 20, time=7, mess='Prepare receptor A...')
    #                 self.AMDock.log_widget.textedit.append('AMDOCK: IF Prepare Target Protein...')
    #             elif prog == 'Prepare_Receptor4 B':
    #                 progress(self, 1, 1, 22, time=7, mess='Prepare receptor B...')
    #                 self.AMDock.log_widget.textedit.append('AMDOCK: IF Prepare Off-Target Protein...')
    #             elif prog == 'Prepare_Ligand4':
    #                 progress(self, 1, 1, 25, time=5, mess='Prepare ligand...')
    #                 self.AMDock.log_widget.textedit.append('AMDOCK: IF Prepare Ligand...')
    #         else:
    #             if prog == 'PDB2PQR':
    #                 progress(self, 1, 1, 18, time=15, mess='Running %s...' % prog)
    #                 self.AMDock.log_widget.textedit.append('AMDOCK: IF Running PDB2PQR for Protein...')
    #             elif prog == 'Prepare_Receptor4':
    #                 progress(self, 1, 1, 22, time=7, mess='Prepare receptor...')
    #                 self.AMDock.log_widget.textedit.append('AMDOCK: IF Prepare Protein...')
    #             elif prog == 'Prepare_Ligand4':
    #                 progress(self, 1, 1, 25, time=5, mess='Prepare ligand...')
    #                 self.AMDock.log_widget.textedit.append('AMDOCK: IF Prepare Ligand...')
    #     elif self.queue_name == 'Binding Site Determination':
    #         if self.AMDock.project.mode == 1:
    #             if self.AMDock.grid_def == 'auto':
    #                 if prog == 'function GridDefinition: Protein Center':
    #                     progress(self, 0, 2, 25, mess='Determination of Target Center...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Determination of Target Protein Center...')
    #                 if prog == 'Prepare_gpf4':
    #                     progress(self, 0, 2, 25, mess='Generate GPF file...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Generate GPF file for Target Protein...')
    #                 if prog == 'AutoGrid4':
    #                     self.part = 0
    #                     progress(self, 0, 2, 25, mess='Running AutoGrid4 for Target...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Running AutoGrid4 for Target Protein...')
    #                 if prog == 'AutoLigand':
    #                     progress(self, 1, 2, 37, time=1000, mess='Searching Ligand Binding Site in Target...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Searching Ligand Binding Site in Target Protein...')
    #                 if prog == 'function GridDefinition: FILL Center':
    #                     progress(self, 0, 2, 37, mess='FILL Center Determination...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Determination of Center for Search Space in Target Protein...')
    #             elif self.AMDock.grid_def == 'by_residues':
    #                 if prog == 'function GridDefinition: Selected Residues Center':
    #                     progress(self, 0, 2, 25, mess='Determination of Selected Residues Center...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Determination of Selected Residues Center in Target Protein...')
    #                 if prog == 'function GridDefinition: Protein Center':
    #                     progress(self, 0, 2, 26, mess='Determination of Protein center...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Determination of Target Protein Center...')
    #                 if prog == 'Prepare_gpf4':
    #                     progress(self, 0, 2, 25, mess='Generate GPF file...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Generate GPF file for Target Protein...')
    #                 if prog == 'AutoGrid4':
    #                     self.part = 0
    #                     progress(self, 0, 2, 25, mess='Running AutoGrid4 for proein A...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Running AutoGrid4 for Target Protein...')
    #                 if prog == 'AutoLigand':
    #                     progress(self, 0, 2, 30, mess='Searching Ligand Binding Site in Target...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Searching Ligand Binding Site in Target Protein...')
    #                 if prog == 'function GridDefinition: FILL Center':
    #                     progress(self, 0, 2, 37, mess='FILL Center Determination...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Determination of Center for Search Space in Target Protein...')
    #             elif self.AMDock.grid_def == 'by_ligand':
    #                 if prog == 'function GridDefinition: Previous Ligand Center':
    #                     progress(self, 0, 2, 25, mess='Determination of Previous Ligand A Center...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Determination of Center of Previous Ligand in Target Protein...')
    #
    #             if self.AMDock.project.bsd_mode_offtarget == 'auto':
    #                 if prog == 'function GridDefinition: Zn Center B':
    #                     progress(self, 0, 2, 37, mess='Determination of Zn B center...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Determination of Zn Center...')
    #                 if prog == 'function GridDefinition: Protein Center':
    #                     progress(self, 0, 2, 25, mess='Determination of Protein center...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Determination of Off-Target Protein Center...')
    #                 if prog == 'Prepare_gpf4 B':
    #                     progress(self, 0, 2, 37, mess='Generate GPF file...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Generate GPF file for Off-Target Protein...')
    #                 if prog == 'AutoGrid4 B':
    #                     self.part = 0
    #                     progress(self, 0, 2, 37, mess='Running AutoGrid4 for Off-Target...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Running AutoGrid4 for Off-Target Protein...')
    #                 if prog == 'AutoLigand B':
    #                     progress(self, 1, 2, 50, time=1000, mess='Searching Ligand Binding Site in Off-Target...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Searching Ligand Binding Site in Off-Target Protein...')
    #                 if prog == 'function GridDefinition: FILL Center B':
    #                     progress(self, 0, 2, 37, mess='FILL Center Determination...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Determination of Center for Search Space in Off-Target Protein...')
    #             elif self.AMDock.project.bsd_mode_offtarget == 'by_residues':
    #                 if prog == 'function GridDefinition: Selected Residues Center':
    #                     progress(self, 0, 2, 25, mess='Determination of Selected Residues Center...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD SDetermination of Selected Residues Center in Off-Target Protein...')
    #                 if prog == 'function GridDefinition: Protein Center B':
    #                     progress(self, 0, 2, 37, mess='Determination of Off-Target Center...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Determination of Off-Target Protein Center...')
    #                 if prog == 'Prepare_gpf4 B':
    #                     progress(self, 0, 2, 38, mess='Generate GPF file...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Generate GPF file for Off-Target Protein...')
    #                 if prog == 'AutoGrid4 B':
    #                     self.part = 0
    #                     progress(self, 0, 2, 38, mess='Running AutoGrid4 for Off-Target...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Running AutoGrid4 for Off-Target Protein...')
    #                 if prog == 'AutoLigand B':
    #                     progress(self, 0, 2, 43, mess='Searching Ligand Binding Site in Off-Target...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Searching Ligand Binding Site in Off-Target Protein...')
    #                 if prog == 'function GridDefinition: FILL Center B':
    #                     progress(self, 0, 2, 50, mess='FILL Center Determination...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Determination of Center for Search Space in Off-Target Protein...')
    #             elif self.AMDock.project.bsd_mode_offtarget == 'by_ligand':
    #                 if prog == 'function GridDefinition: Previous Ligand Center B':
    #                     progress(self, 0, 2, 37, mess='Determination of Previous Ligand B Center...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Determination of Center of Previous Ligand in Off-Target Protein...')
    #         else:
    #             if self.AMDock.grid_def == 'auto':
    #
    #                 if prog == 'function GridDefinition: Protein Center':
    #                     progress(self, 0, 2, 25, mess='Determination of Protein center...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Determination of Protein Center...')
    #
    #                 if prog == 'Prepare_gpf4':
    #                     progress(self, 0, 2, 26, mess='Generate GPF file...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Generate GPF file for Protein...')
    #
    #                 if prog == 'AutoGrid4':
    #                     self.part = 0
    #                     progress(self, 0, 2, 27, mess='Running AutoGrid4...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Running AutoGrid4 for Protein...')
    #
    #                 if prog == 'AutoLigand':
    #                     progress(self, 1, 2, 50, time=1000, mess='Searching Ligand Binding Site...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Searching Ligand Binding Site in Protein...')
    #                 if prog == 'function GridDefinition: FILL Center B':
    #                     progress(self, 0, 2, 50, mess='FILL Center Determination...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Determination of Center for Search Space in Protein...')
    #             elif self.AMDock.grid_def == 'by_residues':
    #                 if prog == 'function GridDefinition: Selected Residues Center':
    #                     progress(self, 0, 2, 25, mess='Determination of Selected Residues Center...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD SDetermination of Selected Residues Center in Protein...')
    #                 if prog == 'function GridDefinition: Protein Center':
    #                     progress(self, 0, 2, 26, mess='Determination of Protein center...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Determination of Protein Center...')
    #                 if prog == 'Prepare_gpf4':
    #                     progress(self, 0, 2, 27, mess='Generate GPF file...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Generate GPF file for Protein...')
    #                 if prog == 'AutoGrid4':
    #                     self.part = 0
    #                     progress(self, 0, 2, 28, mess='Running AutoGrid4...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Running AutoGrid4 for Protein...')
    #                 if prog == 'AutoLigand':
    #                     progress(self, 0, 2, 38, mess='Searching Ligand Binding Site...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Searching Ligand Binding Site in Protein...')
    #                 if prog == 'function GridDefinition: FILL Center':
    #                     progress(self, 0, 2, 50, mess='FILL Center Determination...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Determination of Center for Search Space in Protein...')
    #             elif self.AMDock.grid_def == 'by_ligand':
    #                 if prog == 'function GridDefinition: Previous Ligand Center':
    #                     progress(self, 0, 2, 25, mess='Determination of Previous Ligand Center...')
    #                     self.AMDock.log_widget.textedit.append(
    #                         'AMDOCK: BSD Determination of Center of Previous Ligand in Protein...')
    #     elif self.queue_name == 'Molecular Docking Simulation':
    #         if self.AMDock.project.mode == 1:
    #             if prog == 'AutoDock Vina':
    #                 self.part = 0
    #                 progress(self, 0, 2, 50, mess='Determining better poses for Target...')
    #                 self.AMDock.log_widget.textedit.append(
    #                     'AMDOCK: MDS Determination of better poses for Target Protein...')
    #             if prog == 'AutoDock Vina B':
    #                 self.part = 0
    #                 progress(self, 0, 2, 75, mess='Determining better poses for Off-Target...')
    #                 self.AMDock.log_widget.textedit.append(
    #                     'AMDOCK: MDS Determination of better poses for Off-Target Protein...')
    #             if prog == 'Prepare_gpf4':
    #                 progress(self, 0, 2, 50, mess='Generate GPF file...')
    #                 self.AMDock.log_widget.textedit.append(
    #                     'AMDOCK: MDS Generate GPF file for Target Protein...')
    #             if prog == 'Prepare_gpf4 B':
    #                 progress(self, 0, 2, 75, mess='Generate GPF file...')
    #                 self.AMDock.log_widget.textedit.append(
    #                     'AMDOCK: MDS Generate GPF file for Off-Target Protein...')
    #             if prog == 'AutoGrid4':
    #                 self.part = 0
    #                 progress(self, 0, 2, 50, mess='Running AutoGrid4 for Target...')
    #                 self.AMDock.log_widget.textedit.append(
    #                     'AMDOCK: MDS Running AutoGrid4 for Target Protein...')
    #             if prog == 'AutoGrid4 B':
    #                 self.part = 0
    #                 progress(self, 0, 2, 75, mess='Running AutoGrid4 for Off-Target...')
    #                 self.AMDock.log_widget.textedit.append(
    #                     'AMDOCK: MDS Running AutoGrid4 for Off-Target Protein...')
    #             if prog == 'Prepare_dpf4':
    #                 progress(self, 0, 2, 55, mess='Generate DPF file...')
    #                 self.AMDock.log_widget.textedit.append(
    #                     'AMDOCK: MDS Generate DPF file for Target Protein...')
    #             if prog == 'Prepare_dpf4 B':
    #                 progress(self, 0, 2, 80, mess='Generate DPF file...')
    #                 self.AMDock.log_widget.textedit.append(
    #                     'AMDOCK: MDS Generate DPF file for Off-Target Protein...')
    #             if prog == 'AutoDock4':
    #                 self.part = 0
    #                 progress(self, 0, 2, 55, mess='Determining better poses for Target...')
    #                 self.AMDock.log_widget.textedit.append(
    #                     'AMDOCK: MDS Determination of better poses for Target Protein...')
    #                 self.timerAD = QtCore.QTimer()
    #                 self.timerAD.timeout.connect(self.autodock_output)
    #                 self.timerAD.start(5000)
    #             if prog == 'AutoDock4 B':
    #                 self.part = 0
    #                 progress(self, 0, 2, 80, mess='Determining better poses for Off-Target...')
    #                 self.AMDock.log_widget.textedit.append(
    #                     'AMDOCK: MDS Determination of better poses for Off-Target Protein...')
    #                 self.timerAD = QtCore.QTimer()
    #                 self.timerAD.timeout.connect(self.autodock_output)
    #                 self.timerAD.start(5000)
    #             if prog == 'AutoDock4ZN':
    #                 self.part = 0
    #                 progress(self, 0, 2, 55, mess='Determining better poses for Target...')
    #                 self.AMDock.log_widget.textedit.append(
    #                     'AMDOCK: MDS Determination of better poses for Target Protein...')
    #                 self.timerAD = QtCore.QTimer()
    #                 self.timerAD.timeout.connect(self.autodock_output)
    #                 self.timerAD.start(5000)
    #             if prog == 'AutoDock4ZN B':
    #                 self.part = 0
    #                 progress(self, 0, 2, 80, mess='Determining better poses for Off-Target...')
    #                 self.AMDock.log_widget.textedit.append(
    #                     'AMDOCK: MDS Determination of better poses for Off-Target Protein...')
    #                 self.timerAD = QtCore.QTimer()
    #                 self.timerAD.timeout.connect(self.autodock_output)
    #                 self.timerAD.start(5000)
    #         else:
    #             if prog == 'AutoDock Vina':
    #                 self.part = 0
    #                 progress(self, 0, 2, 50, mess='Determining better poses...')
    #                 self.AMDock.log_widget.textedit.append(
    #                     'AMDOCK: MDS Determination of better poses for Protein...')
    #             if prog == 'Prepare_gpf4':
    #                 progress(self, 0, 2, 50, mess='Generate GPF file...')
    #                 self.AMDock.log_widget.textedit.append(
    #                     'AMDOCK: MDS Generate GPF file for Protein...')
    #             if prog == 'AutoGrid4':
    #                 self.part = 0
    #                 progress(self, 0, 2, 51, mess='Running AutoGrid4...')
    #                 self.AMDock.log_widget.textedit.append(
    #                     'AMDOCK: MDS Running AutoGrid4 for Protein...')
    #             if prog == 'Prepare_dpf4':
    #                 progress(self, 0, 2, 59, mess='Generate DPF file...')
    #                 self.AMDock.log_widget.textedit.append(
    #                     'AMDOCK: MDS Generate DPF file for Protein...')
    #             if prog == 'AutoDock4':
    #                 self.part = 0
    #                 progress(self, 0, 2, 60, mess='Determining better poses...')
    #                 self.AMDock.log_widget.textedit.append(
    #                     'AMDOCK: MDS Determination of better poses for Protein...')
    #                 self.timerAD = QtCore.QTimer()
    #                 self.timerAD.timeout.connect(self.autodock_output)
    #                 self.timerAD.start(5000)
    #             if prog == 'AutoDock4ZN':
    #                 self.part = 0
    #                 progress(self, 0, 2, 60, mess='Determining better poses...')
    #                 self.AMDock.log_widget.textedit.append(
    #                     'AMDOCK: MDS Determination of better poses for Protein...')
    #                 self.timerAD = QtCore.QTimer()
    #                 self.timerAD.timeout.connect(self.autodock_output)
    #                 self.timerAD.start(5000)
    #     elif self.queue_name == 'Visualization':
    #         pass
    #         # if self.AMDock.project.prog == 'pymol_boxA':
    #         #     # self.grid_pymol_buttonB.setEnabled(False)
    #         #     # self.reset_grid_buttonB.setEnabled(False)
    #         # elif self.AMDock.project.prog == 'pymol_boxB':
    #             # self.grid_pymol_button.setEnabled(False)
    #             # self.reset_grid_button.setEnabled(False)
    #     elif self.queue_name == 'Construction':
    #         pass
    #         # if self.AMDock.project.prog == 'pymol_buildA':
    #         #     # self.reset_grid_buttonB.setEnabled(False)
    #         #     # self.reset_grid_buttonB.setEnabled(False)
    #         # elif self.AMDock.project.prog == 'pymol_buildB':
    #             # self.reset_grid_button.setEnabled(False)
    #             # self.reset_grid_button.setEnabled(False)

    # def process_progress(self, prog, i, err):
    #     if prog == 'PyMol_box_Target' or prog == 'PyMol_box_Off-Target' or prog == 'pymol_buildA' or prog == 'pymol_buildB':
    #         try:
    #             os.remove('pymol_data.txt')
    #         except:
    #             pass
    #     if prog in ['pymol_buildA', 'pymol_buildB', 'PyMol_box_Target', 'PyMol_box_Off-Target']:
    #         # TODO: change status for pymol buttons
    #         pass
    #         # self.grid_pymol_button.setEnabled(True)
    #         # self.grid_pymol_buttonB.setEnabled(True)
    #         # self.reset_grid_button.setEnabled(True)
    #         # self.reset_grid_buttonB.setEnabled(True)
    #         # pass
    #     if self.queue_name == 'Prepare Input Files':
    #         if self.AMDock.project.mode == 1:
    #             if prog == 'PDB2PQR':
    #                 if i == 0:
    #                     progress(self, 1, 1, 14, finish=True, mess='Running PDB2PQR for Target...')
    #                 else:
    #                     progress(self, 1, 1, 10, reverse=True, mess='Running PDB2PQR for Target...')
    #             elif prog == 'PDB2PQR B':
    #                 if i == 0:
    #                     progress(self, 1, 1, 18, finish=True, mess='Running PDB2PQR for Off-Target...')
    #                 else:
    #                     progress(self, 1, 1, 14, reverse=True, mess='Running PDB2PQR for Off-Target...')
    #             elif prog == 'Prepare_Receptor4':
    #                 if i == 0:
    #                     progress(self, 1, 1, 20, finish=True, mess='Prepare receptor A...')
    #                 else:
    #                     progress(self, 1, 1, 18, reverse=True, mess='Prepare receptor A...')
    #             elif prog == 'Prepare_Receptor4 B':
    #                 if i == 0:
    #                     progress(self, 1, 1, 22, finish=True, mess='Prepare receptor B...')
    #                 else:
    #                     progress(self, 1, 1, 20, reverse=True, mess='Prepare receptor B...')
    #
    #             elif prog == 'Prepare_Ligand4':
    #                 if i == 0:
    #                     progress(self, 1, 1, 25, finish=True, mess='Prepare ligand...')
    #                 else:
    #                     progress(self, 1, 1, 22, reverse=True, mess='Prepare ligand...')
    #         else:
    #             if prog == 'PDB2PQR':
    #                 if i == 0:
    #                     progress(self, 1, 1, 18, finish=True, mess='Running PDB2PQR...')
    #                 else:
    #                     progress(self, 1, 1, 10, reverse=True, mess='Running PDB2PQR...')
    #             elif prog == 'Prepare_Receptor4':
    #                 if i == 0:
    #                     progress(self, 1, 1, 22, finish=True, mess='Prepare receptor...')
    #                 else:
    #                     progress(self, 1, 1, 18, reverse=True, mess='Prepare receptor...')
    #             elif prog == 'Prepare_Ligand4':
    #                 if i == 0:
    #                     progress(self, 1, 1, 25, finish=True, mess='Prepare ligand...')
    #                 else:
    #                     progress(self, 1, 1, 22, reverse=True, mess='Prepare ligand...')
    #     elif self.queue_name == 'Binding Site Determination':
    #         if self.AMDock.project.mode == 1:
    #             if self.AMDock.grid_def == 'auto':
    #                 if prog == 'Prepare_gpf4':
    #                     if i == 0:
    #                         progress(self, 0, 2, 25, finish=True, mess='Generate GPF file...')
    #                     else:
    #                         progress(self, 0, 2, 25, reverse=True, mess='Generate GPF file...')
    #                 elif prog == 'AutoGrid4':
    #                     if i == 0:
    #                         progress(self, 0, 2, 30, finish=True, mess='Running AutoGrid4 for Target...')
    #                     else:
    #                         progress(self, 0, 2, 25, reverse=True, mess='Running AutoGrid4 for Target...')
    #                 elif prog == 'AutoLigand':
    #                     if i == 0:
    #                         progress(self, 0, 2, 37, finish=True, mess='Searching Ligand Binding Site in Target...')
    #                     else:
    #                         progress(self, 0, 2, 30, reverse=True, mess='Searching Ligand Binding Site in Target...')
    #                 elif prog == 'function GridDefinition: FILL Center':
    #                     if i == 0:
    #                         progress(self, 0, 2, 37, finish=True, mess='FILL Center Determination...')
    #                     else:
    #                         progress(self, 0, 2, 37, reverse=True, mess='FILL Center Determination...')
    #             elif self.AMDock.grid_def == 'by_residues':
    #                 if prog == 'function GridDefinition: Selected Residues Center':
    #                     if i == 0:
    #                         progress(self, 0, 2, 25, finish=True, mess='Determination of Selected Residues Center...')
    #                     else:
    #                         progress(self, 0, 2, 25, reverse=True, mess='Determination of Selected Residues Center...')
    #                 elif prog == 'function GridDefinition: Protein Center':
    #                     if i == 0:
    #                         progress(self, 0, 2, 25, finish=True, mess='Determination of Target center...')
    #                     else:
    #                         progress(self, 0, 2, 25, reverse=True, mess='Determination of Target center...')
    #                 elif prog == 'Prepare_gpf4':
    #                     if i == 0:
    #                         progress(self, 0, 2, 25, finish=True, mess='Generate GPF file...')
    #                     else:
    #                         progress(self, 0, 2, 25, reverse=True, mess='Generate GPF file...')
    #                 elif prog == 'AutoGrid4':
    #                     if i == 0:
    #                         progress(self, 0, 2, 30, finish=True, mess='Running AutoGrid4 for Target...')
    #                     else:
    #                         progress(self, 0, 2, 25, reverse=True, mess='Running AutoGrid4 for Target...')
    #                 elif prog == 'AutoLigand':
    #                     if i == 0:
    #                         progress(self, 0, 2, 37, finish=True, mess='Searching Ligand Binding Site in Target...')
    #                     else:
    #                         progress(self, 0, 2, 30, reverse=True, mess='Searching Ligand Binding Site in Target...')
    #                 elif prog == 'function GridDefinition: FILL Center':
    #                     if i == 0:
    #                         progress(self, 0, 2, 37, finish=True, mess='FILL Center Determination...')
    #                     else:
    #                         progress(self, 0, 2, 37, reverse=True, mess='FILL Center Determination...')
    #             elif self.AMDock.grid_def == 'by_ligand':
    #                 if prog == 'function GridDefinition: Previous Ligand Center':
    #                     if i == 0:
    #                         progress(self, 0, 2, 37, finish=True, mess='Determination of Previous Ligand A Center...')
    #                     else:
    #                         progress(self, 0, 2, 25, reverse=True, mess='Determination of Previous Ligand A Center...')
    #
    #             if self.AMDock.project.bsd_mode_offtarget == 'auto':
    #                 if prog == 'function GridDefinition: Zn Center B':
    #                     if i == 0:
    #                         progress(self, 0, 2, 50, finish=True, mess='Determination of Zn B Center...')
    #                     else:
    #                         progress(self, 0, 2, 37, reverse=True, mess='Determination of Zn B Center...')
    #                 elif prog == 'Prepare_gpf4 B':
    #                     if i == 0:
    #                         progress(self, 0, 2, 38, finish=True, mess='Generate GPF file...')
    #                     else:
    #                         progress(self, 0, 2, 37, reverse=True, mess='Generate GPF file...')
    #                 elif prog == 'AutoGrid4 B':
    #                     if i == 0:
    #                         progress(self, 0, 2, 43, finish=True, mess='Running AutoGrid4...')
    #                     else:
    #                         progress(self, 0, 2, 38, reverse=True, mess='Running AutoGrid4...')
    #                 elif prog == 'AutoLigand B':
    #                     if i == 0:
    #                         progress(self, 1, 2, 50, finish=True, mess='Searching Ligand Binding Site...')
    #                     else:
    #                         progress(self, 1, 2, 43, reverse=True, mess='Searching Ligand Binding Site...')
    #                 elif prog == 'function GridDefinition: FILL Center B':
    #                     if i == 0:
    #                         progress(self, 0, 2, 50, finish=True, mess='FILL Center Determination...')
    #                     else:
    #                         progress(self, 0, 2, 50, reverse=True, mess='FILL Center Determination...')
    #             elif self.AMDock.project.bsd_mode_offtarget == 'by_residues':
    #                 if prog == 'function GridDefinition: Selected Residues Center B':
    #                     if i == 0:
    #                         progress(self, 0, 2, 38, finish=True, mess='Determination of Selected Residues Center...')
    #                     else:
    #                         progress(self, 0, 2, 37, reverse=True, mess='Determination of Selected Residues Center...')
    #                 elif prog == 'function GridDefinition: Protein Center B':
    #                     if i == 0:
    #                         progress(self, 0, 2, 38, finish=True, mess='Determination of Protein center...')
    #                     else:
    #                         progress(self, 0, 2, 38, reverse=True, mess='Determination of Protein center...')
    #                 elif prog == 'Prepare_gpf4 B':
    #                     if i == 0:
    #                         progress(self, 0, 2, 38, finish=True, mess='Generate GPF file...')
    #                     else:
    #                         progress(self, 0, 2, 38, reverse=True, mess='Generate GPF file...')
    #                 elif prog == 'AutoGrid4 B':
    #                     if i == 0:
    #                         progress(self, 0, 2, 43, finish=True, mess='Running AutoGrid4...')
    #                     else:
    #                         progress(self, 0, 2, 38, reverse=True, mess='Running AutoGrid4...')
    #                 elif prog == 'AutoLigand B':
    #                     if i == 0:
    #                         progress(self, 0, 2, 50, finish=True, mess='Searching Ligand Binding Site...')
    #                     else:
    #                         progress(self, 0, 2, 43, reverse=True, mess='Searching Ligand Binding Site...')
    #                 elif prog == 'function GridDefinition: FILL Center B':
    #                     if i == 0:
    #                         progress(self, 0, 2, 50, finish=True, mess='FILL Center Determination...')
    #                     else:
    #                         progress(self, 0, 2, 50, reverse=True, mess='FILL Center Determination...')
    #             elif self.AMDock.project.bsd_mode_offtarget == 'by_ligand':
    #                 if prog == 'function GridDefinition: Previous Ligand Center B':
    #                     if i == 0:
    #                         progress(self, 0, 2, 50, finish=True, mess='Determination of Previous Ligand Center...')
    #                     else:
    #                         progress(self, 0, 2, 37, reverse=True, mess='Determination of Previous Ligand Center...')
    #         else:
    #             if self.AMDock.grid_def == 'auto':
    #                 if prog == 'function GridDefinition: Protein Center':
    #                     if i == 0:
    #                         progress(self, 0, 2, 26, finish=True, mess='Determination of Protein Center...')
    #                     else:
    #                         progress(self, 0, 2, 25, reverse=True, mess='Determination of Protein Center...')
    #                 elif prog == 'Prepare_gpf4':
    #                     if i == 0:
    #                         progress(self, 0, 2, 27, finish=True, mess='Generate GPF file...')
    #                     else:
    #                         progress(self, 0, 2, 26, reverse=True, mess='Generate GPF file...')
    #                 elif prog == 'AutoGrid4':
    #                     if i == 0:
    #                         progress(self, 0, 2, 37, finish=True, mess='Running AutoGrid4...')
    #                     else:
    #                         progress(self, 0, 2, 27, reverse=True, mess='Running AutoGrid4...')
    #                 elif prog == 'AutoLigand':
    #                     if i == 0:
    #                         progress(self, 0, 2, 50, finish=True, mess='Searching Ligand Binding Site...')
    #                     else:
    #                         progress(self, 0, 2, 37, reverse=True, mess='Searching Ligand Binding Site...')
    #                 elif prog == 'function GridDefinition: FILL Center':
    #                     if i == 0:
    #                         progress(self, 0, 2, 50, finish=True, mess='FILL Center Determination...')
    #                     else:
    #                         progress(self, 0, 2, 50, reverse=True, mess='FILL Center Determination...')
    #             elif self.AMDock.grid_def == 'by_residues':
    #                 if prog == 'function GridDefinition: Selected Residues Center':
    #                     if i == 0:
    #                         progress(self, 0, 2, 25, finish=True, mess='Determination of Selected Residues Center...')
    #                     else:
    #                         progress(self, 0, 2, 25, reverse=True, mess='Determination of Selected Residues Center...')
    #                 elif prog == 'function GridDefinition: Protein Center':
    #                     if i == 0:
    #                         progress(self, 0, 2, 26, finish=True, mess='Determination of Protein center...')
    #                     else:
    #                         progress(self, 0, 2, 25, reverse=True, mess='Determination of Protein center...')
    #                 elif prog == 'Prepare_gpf4':
    #                     if i == 0:
    #                         progress(self, 0, 2, 27, finish=True, mess='Generate GPF file...')
    #                     else:
    #                         progress(self, 0, 2, 26, reverse=True, mess='Generate GPF file...')
    #                 elif prog == 'AutoGrid4':
    #                     if i == 0:
    #                         progress(self, 0, 2, 37, finish=True, mess='Running AutoGrid4...')
    #                     else:
    #                         progress(self, 0, 2, 27, reverse=True, mess='Running AutoGrid4...')
    #                 elif prog == 'AutoLigand':
    #                     if i == 0:
    #                         progress(self, 0, 2, 50, finish=True, mess='Searching Ligand Binding Site...')
    #                     else:
    #                         progress(self, 0, 2, 37, reverse=True, mess='Searching Ligand Binding Site...')
    #                 elif prog == 'function GridDefinition: FILL Center':
    #                     if i == 0:
    #                         progress(self, 0, 2, 50, finish=True, mess='FILL Center Determination...')
    #                     else:
    #                         progress(self, 0, 2, 50, reverse=True, mess='FILL Center Determination...')
    #             elif self.AMDock.grid_def == 'by_ligand':
    #                 if prog == 'function GridDefinition: Previous Ligand Center':
    #                     if i == 0:
    #                         progress(self, 0, 2, 50, finish=True, mess='Determination of Previous Ligand Center...')
    #                     else:
    #                         progress(self, 0, 2, 25, reverse=True, mess='Determination of Previous Ligand Center...')
    #     elif self.queue_name == 'Molecular Docking Simulation':
    #         if self.AMDock.project.mode == 1:
    #             if prog == 'AutoDock Vina':
    #                 if i == 0:
    #                     progress(self, 0, 3, 75, finish=True, mess='Determining better poses for Target...')
    #                 else:
    #                     progress(self, 0, 2, 50, reverse=True, mess='Determining better poses for Target...')
    #             if prog == 'AutoDock Vina B':
    #                 if i == 0:
    #                     progress(self, 0, 3, 100, finish=True, mess='Determining better poses for Off-Target...')
    #                 else:
    #                     progress(self, 0, 2, 50, reverse=True, mess='Determining better poses for Off-Target...')
    #             if prog == 'Prepare_gpf4':
    #                 if i == 0:
    #                     progress(self, 0, 2, 51, finish=True, mess='Generate GPF file...')
    #                 else:
    #                     progress(self, 0, 2, 50, reverse=True, mess='Generate GPF file...')
    #             if prog == 'Prepare_gpf4 B':
    #                 if i == 0:
    #                     progress(self, 0, 2, 76, finish=True, mess='Generate GPF file...')
    #                 else:
    #                     progress(self, 0, 2, 50, reverse=True, mess='Generate GPF file...')
    #             if prog == 'AutoGrid4':
    #                 if i == 0:
    #                     progress(self, 0, 2, 55, finish=True, mess='Running AutoGrid4 for Target...')
    #                 else:
    #                     progress(self, 0, 2, 50, reverse=True, mess='Running AutoGrid4 for Target...')
    #             if prog == 'AutoGrid4 B':
    #                 if i == 0:
    #                     progress(self, 0, 2, 80, finish=True, mess='Running AutoGrid4 for Off-Target...')
    #                 else:
    #                     progress(self, 0, 2, 50, reverse=True, mess='Running AutoGrid4 for Off-Target...')
    #             if prog == 'Prepare_dpf4':
    #                 if i == 0:
    #                     progress(self, 0, 2, 56, finish=True, mess='Generate DPF file...')
    #                 else:
    #                     progress(self, 0, 2, 50, reverse=True, mess='Generate DPF file...')
    #             if prog == 'Prepare_dpf4 B':
    #                 if i == 0:
    #                     progress(self, 0, 2, 81, finish=True, mess='Generate DPF file...')
    #                 else:
    #                     progress(self, 0, 2, 50, reverse=True, mess='Generate DPF file...')
    #             if prog == 'AutoDock4':
    #                 if i == 0:
    #                     progress(self, 0, 2, 75, finish=True, mess='Determining better poses for Target...')
    #                     self.part = 0
    #                     self.timerAD.stop()
    #                 else:
    #                     progress(self, 0, 2, 50, reverse=True, mess='Determining better poses for Target...')
    #                     self.timerAD.stop()
    #             if prog == 'AutoDock4 B':
    #                 if i == 0:
    #                     progress(self, 0, 2, 100, finish=True, mess='Determining better poses for Off-Target...')
    #                     self.part = 0
    #                     self.timerAD.stop()
    #                 else:
    #                     progress(self, 0, 2, 50, reverse=True, mess='Determining better poses for Off-Target...')
    #                     self.timerAD.stop()
    #         else:
    #             if prog == 'AutoDock Vina':
    #                 if i == 0:
    #                     progress(self, 0, 3, 100, finish=True, mess='Determining better poses...')
    #                 else:
    #                     progress(self, 0, 2, 50, reverse=True, mess='Determining better poses...')
    #             if prog == 'Prepare_gpf4':
    #                 if i == 0:
    #                     progress(self, 0, 2, 51, finish=True, mess='Generate GPF file...')
    #                 else:
    #                     progress(self, 0, 2, 50, reverse=True, mess='Generate GPF file...')
    #             if prog == 'AutoGrid4':
    #                 if i == 0:
    #                     progress(self, 0, 2, 59, finish=True, mess='Running AutoGrid4...')
    #                 else:
    #                     progress(self, 0, 2, 50, reverse=True, mess='Running AutoGrid4...')
    #             if prog == 'Prepare_dpf4':
    #                 if i == 0:
    #                     progress(self, 0, 2, 60, finish=True, mess='Generate DPF file...')
    #                 else:
    #                     progress(self, 0, 2, 50, reverse=True, mess='Generate DPF file...')
    #             if prog == 'AutoDock4':
    #                 if i == 0:
    #                     progress(self, 0, 2, 100, finish=True, mess='Determining better poses...')
    #                     self.part = 0
    #                     self.timerAD.stop()
    #                 else:
    #                     progress(self, 0, 2, 50, reverse=True, mess='Determining better poses...')
    #                     self.timerAD.stop()

    def autoligand_out(self, name):
        fill_list = []
        try:
            ofile = open('{}_{}Results.txt'.format(name, self.AMDock.ligand.ha * 6))
        except:
            return

        for line in ofile:
            line = line.strip('\n')
            fill_list.append([line.split()[6].strip(','), line.split()[13]])
        return fill_list

    def fill_selection(self, autoligand_table):
        if autoligand_table.objectName() == 'autoligand_target':
            items = self.autoligand_target.selectedItems()
            # print items
            row = self.autoligand_target.row(items[0]) + 1
            fill_info = PDBINFO('FILL_{}_{}out{}.pdb'.format(self.AMDock.target.pdbqt_name, self.AMDock.ligand.ha*6, row))
            if fill_info.center:
                self.grid_center = fill_info.center
            else:
                msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'This FILL no exist or is not possible to open '
                                                                       'pdb file. Please, select a new FILL',
                                                 QtGui.QMessageBox.Ok)
                for item in items:
                    item.setFlags(QtCore.Qt.NoItemFlags)

                return
        else:
            items = self.autoligand_offtarget.selectedItems()
            row = self.autoligand_offtarget.row(items[0]) + 1
            fill_info = PDBINFO('FILL_{}_{}out{}.pdb'.format(self.AMDock.offtarget.pdbqt_name,
                                                              self.ligand_info.get_ha() * 6, row))
            if fill_info.center:
                self.grid_centerB = fill_info.center
            else:
                for item in items:
                    item.setFlags(QtCore.Qt.NoItemFlags)
                msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'This FILL no exist or is not possible to open '
                                                                       'pdb file. Please, select a new FILL',
                                                 QtGui.QMessageBox.Ok)
                return

    def for_finished(self, info):
        prog_name, exitcode, exitstatus = info
        self.AMDock.project.part = 0

        # print prog_name,exitcode, exitstatus
        # self.AMDock.project.prog = prog_name
        if prog_name == 'AutoLigand':
            # FIXME: check if exitcode
            fill_list = self.autoligand_out(self.AMDock.target.pdbqt_name)
            self.autoligand_target.setRowCount(len(fill_list))
            f = 0
            for fill in fill_list:
                c = 0
                for ele in fill:
                    self.autoligand_target.setItem(f, c, QtGui.QTableWidgetItem(ele))
                    self.autoligand_target.item(f, c).setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                    c += 1
                f += 1
            self.autoligand_target.selectRow(0)
            self.autoligand_target.show()

        elif prog_name == 'AutoLigand_point':
            # FIXME: check if exitcode
            fill_info = PDBINFO('FILL_{}_{}out1.pdb'.format(self.AMDock.target.pdbqt_name, self.AMDock.ligand.ha * 6))
            # print fill_info, fill_info.center, '#####'
            if fill_info.center:
                self.grid_center = fill_info.center
            else:
                msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'This FILL no exist or is not possible to open '
                                                                       'pdb file. Please, select a new FILL',
                                                 QtGui.QMessageBox.Ok)
        elif prog_name == 'AutoLigand B':
            # FIXME: check if exitcode
            fill_list = self.autoligand_out(self.AMDock.offtarget.pdbqt_name)
            self.autoligand_offtarget.setRowCount(len(fill_list))
            f = 0
            for fill in fill_list:
                c = 0
                for ele in fill:
                    self.autoligand_offtarget.setItem(f, c, QtGui.QTableWidgetItem(ele))
                    self.autoligand_offtarget.item(f, c).setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                    c += 1
                f += 1
            self.autoligand_offtarget.selectRow(0)
            self.autoligand_offtarget.show()

        elif prog_name == 'AutoLigand_point B':
            # FIXME: check if exitcode
            fill_info = PDBINFO('FILL_{}_{}out1.pdb'.format(self.AMDock.offtarget.pdbqt_name, self.AMDock.ligand.ha *
                                                            6))
            # print fill_info, fill_info.center, '#####'
            if fill_info.center:
                self.grid_centerB = fill_info.center
            else:
                msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'This FILL no exist or is not possible to open '
                                                                       'pdb file. Please, select a new FILL',
                                                 QtGui.QMessageBox.Ok)

        # if self.AMDock.section == 1:
        if prog_name == 'PDB2PQR':
            if not exitcode:
                self.progress(40, self.AMDock.project.mode,  'Running PDB2PQR for Target...Done.')
                self.AMDock.log_widget.textedit.append('AMDOCK: IF > Running PDB2PQR for Target...Done.')
        elif prog_name == 'PDB2PQR B':
            if not exitcode:
                self.progress(20, 0, 'Running PDB2PQR for Off-Target...Done')
                self.AMDock.log_widget.textedit.append('AMDOCK: IF > Running PDB2PQR for Off-Target...Done.')
        elif prog_name == 'Prepare_Receptor4':
            if not exitcode:
                self.progress(40, self.AMDock.project.mode, 'Prepare receptor (Target)...Done')
                self.AMDock.log_widget.textedit.append('AMDOCK: IF > Prepare Target...Done.')
        elif prog_name == 'Prepare_Receptor4 B':
            if not exitcode:
                self.progress(20, 0, 'Prepare receptor (Off-Target)...Done')
                self.AMDock.log_widget.textedit.append('AMDOCK: IF > Prepare Off-Target...Done.')
        elif prog_name == 'Prepare_Ligand4':
            if not exitcode:
                self.progress(20, 0,'Prepare ligand...Done')
                self.AMDock.log_widget.textedit.append('AMDOCK: IF > Prepare Ligand...Done.')
        # print self.AMDock.section, '########',
        if self.AMDock.section == 1:
            if self.AMDock.project.bsd_mode_target in [0, 1]:
                if prog_name == 'Prepare_gpf4':
                    self.progress(20, self.AMDock.project.mode, 'Generate Target GPF file...')
                    self.AMDock.log_widget.textedit.append('AMDOCK: BSD > Generate Target GPF file...Done.')
                if prog_name == 'AutoGrid4':
                    self.progress(60,self.AMDock.project.mode, 'Running AutoGrid4 for Target...', 1)
                    self.AMDock.log_widget.textedit.append('AMDOCK: BSD > Running AutoGrid4 for Target Protein... '
                                                           'Done.')

                if prog_name in  ['AutoLigand', 'AutoLigand_point']:
                    self.progress(100,self.AMDock.project.mode, 'Searching Ligand Binding Site in Target...', 1)

                    self.AMDock.log_widget.textedit.append('AMDOCK: BSD > Searching Ligand Binding Site in Target '
                                                            'Protein... Done.')

            if self.AMDock.project.bsd_mode_offtarget in [0, 1]:
                if prog_name == 'Prepare_gpf4 B':
                    self.progress(10, 0, 'Generate Off-Target GPF file...')
                    self.AMDock.log_widget.textedit.append(
                        'AMDOCK: BSD > Generate GPF file for Off-Target Protein... Done.')
                if prog_name == 'AutoGrid4 B':
                    self.part = 0
                    self.progress(80, 0, 'Running AutoGrid4 for Off-Target...', 1)
                    self.AMDock.log_widget.textedit.append(
                        'AMDOCK: BSD > Running AutoGrid4 for Off-Target Protein... Done.')
                if prog_name in ['AutoLigand B', 'AutoLigand_point B']:
                    self.progress(100, 0, 'Searching Ligand Binding Site in Off-Target...', 1)
                    self.AMDock.log_widget.textedit.append(
                        'AMDOCK: BSD > Searching Ligand Binding Site in Off-Target Protein... Done.')

        elif self.AMDock.section == 2:
            if prog_name == 'AutoDock Vina':
                self.part = 0
                self.progress(100, self.AMDock.project.mode, 'Determining better poses for Target...', 1)
                self.AMDock.log_widget.textedit.append(
                        'AMDOCK: MD > Determination of better poses for Target Protein... Done.')
            if prog_name == 'AutoDock Vina B':
                # self.part = 0
                self.progress(100, 0, 'Determining better poses for Off-Target...', 1)
                self.AMDock.log_widget.textedit.append(
                        'AMDOCK: MD > Determination of better poses for Off-Target Protein... Done.')
            if prog_name == 'Prepare_gpf4':
                self.progress(10, self.AMDock.project.mode, 'Generate GPF file...')
                self.AMDock.log_widget.textedit.append(
                    'AMDOCK: MD > Generate GPF file for Target Protein... Done.')
            if prog_name == 'Prepare_gpf4 B':
                self.progress(10, 0, 'Generate GPF file...')
                self.AMDock.log_widget.textedit.append(
                    'AMDOCK: MD > Generate GPF file for Off-Target Protein... Done.')
            if prog_name == 'AutoGrid4':
                self.part = 0
                self.progress(50, self.AMDock.project.mode, 'Running AutoGrid4 for Target...', 1)
                self.AMDock.log_widget.textedit.append(
                    'AMDOCK: MD > Running AutoGrid4 for Target Protein... Done.')
            if prog_name == 'AutoGrid4 B':
                self.part = 0
                self.progress(75, 0, 'Running AutoGrid4 for Off-Target...', 1)
                self.AMDock.log_widget.textedit.append(
                    'AMDOCK: MD > Running AutoGrid4 for Off-Target Protein... Done.')
            if prog_name == 'Prepare_dpf4':
                self.progress(10, self.AMDock.project.mode, 'Generate DPF file...')
                self.AMDock.log_widget.textedit.append(
                    'AMDOCK: MD > Generate DPF file for Target Protein... Done.')
            if prog_name == 'Prepare_dpf4 B':
                self.progress(10, 0, 'Generate DPF file...')
                self.AMDock.log_widget.textedit.append(
                    'AMDOCK: MD > Generate DPF file for Off-Target Protein... Done.')
            if prog_name == 'AutoDock4':
                self.timerAD.stop()
                self.progress(100, self.AMDock.project.mode, 'Determining better poses for Target...', 1)
                self.AMDock.log_widget.textedit.append(
                    'AMDOCK: MD > Determination of better poses for Target Protein... Done.')
            if prog_name == 'AutoDock4 B':
                self.timerAD.stop()
                self.progress(100, 0, 'Determining better poses for Off-Target...', 1)
                self.AMDock.log_widget.textedit.append(
                    'AMDOCK: MD > Determination of better poses for Off-Target Protein... Done.')
            if prog_name == 'AutoDock4ZN':
                self.timerAD.stop()
                self.progress(100, self.AMDock.project.mode, 'Determining better poses for Target...', 1)
                self.AMDock.log_widget.textedit.append(
                    'AMDOCK: MD > Determination of better poses for Target Protein... Done.')
            if prog_name == 'AutoDock4ZN B':
                self.timerAD.stop()
                self.progress(100, 0, 'Determining better poses for Off-Target...', 1)
                self.AMDock.log_widget.textedit.append(
                    'AMDOCK: MD > Determination of better poses for Off-Target Protein... Done.')

        if prog_name == 'PyMol_box_Target':
            if hasattr(self, 'b_pymol'):
                delattr(self, 'b_pymol')
        elif prog_name == 'PyMol_box_Off-Target':
            if hasattr(self, 'b_pymolB'):
                delattr(self, 'b_pymolB')

        # elif i == -9999999999:
        #     error_warning(self, prog, err)
        #     # self.reset_button.setEnabled(True)
        # else:
        #     if prog == 'AutoDock4' or prog == 'AutoDock4 B' or prog == 'AutoDock4ZN' or prog == 'AutoDock4ZN B':
        #         error_warning(self, prog, 'The program was finalized manually or closed by the occurrence of an '
        #                                   'internal error.')
        #         # self.reset_button.setEnabled(True)
        #     elif prog == 'AutoLigand':
        #         if self.AMDock.grid_def == 'by_residues':
        #             select_res = QtGui.QMessageBox.critical(self, 'Warning',
        #                                                     'Autoligand has failed generating an object '
        #                                                     'centered on the selected residue(s) (See the Manual). Now the box will be centered on the '
        #                                                     'selected residues.\n Take into account that this could decrease the search space'
        #                                                     ' considerably. Do you wish to continue?',
        #                                                     QtGui.QMessageBox.Yes | QtGui.QMessageBox.No)
        #             if select_res == QtGui.QMessageBox.Yes:
        #                 os.rename(self.AMDock.res_center, self.AMDock.obj_center)
        #                 # self.run_button.setEnabled(True)
        #                 # self.reset_button.setEnabled(True)
        #                 # self.reset_grid_button.setEnabled(True)
        #                 # self.grid_pymol_button.setEnabled(True)
        #                 # self.grid_box.setEnabled(True)
        #                 if self.AMDock.project.mode == 1:
        #                     self.progressBar.setValue(37)
        #                 else:
        #                     self.progressBar.setValue(50)
        #             else:
        #                 # self.grid_box.setEnabled(True)
        #                 self.progressBar.setValue(25)
        #                 # self.reset_button.setEnabled(True)
        #                 files = []
        #                 dd = '%s*.map' % self.AMDock.target.name
        #                 files.extend(glob.glob(dd))
        #                 dd = '%s*.fld' % self.AMDock.target.name
        #                 # files.extend(glob.glob('%s*.fld') % self.AMDock.target.name)
        #                 files.extend(glob.glob(dd))
        #                 dd = '%s*.xyz' % self.AMDock.target.name
        #                 # files.extend(glob.glob('%s*.xyz') % self.AMDock.target.name)
        #                 # dd = '%s*.fld' % self.AMDock.target.name
        #                 files.extend(glob.glob(dd))
        #                 # files.extend(glob.glob('%s*.gpf') % self.AMDock.target.name)
        #                 dd = '%s*.gpf' % self.AMDock.target.name
        #                 files.extend(glob.glob(dd))
        #                 files.extend([self.AMDock.res_center, self.AMDock.obj_center])
        #                 # os.get
        #                 for file in files:
        #                     try:
        #                         os.remove(file)
        #                     except:
        #                         pass
        #         else:
        #             error_warning(self, prog, 'The program was finalized manually or closed by the occurrence of an '
        #                                       'internal error.')
        #             # self.grid_box.setEnabled(True)
        #             # self.reset_button.setEnabled(True)
        #     elif prog == 'AutoLigand B':
        #         if self.AMDock.analog_grid_def == 'by_residues':
        #             select_res = QtGui.QMessageBox.critical(self, 'Warning',
        #                                                     'Autoligand has failed generating an object '
        #                                                     'centered on the selected residue(s) (See the Manual). Now the box will be centered on the '
        #                                                     'selected residues.\n Take into account that this could decrease the search space'
        #                                                     'considerably. Do you wish to continue?',
        #                                                     QtGui.QMessageBox.Yes | QtGui.QMessageBox.No)
        #             if select_res == QtGui.QMessageBox.Yes:
        #                 os.rename(self.AMDock.res_center1, self.AMDock.obj_center1)
        #                 # self.run_button.setEnabled(True)
        #                 self.progressBar.setValue(50)
        #                 # self.reset_button.setEnabled(True)
        #                 # self.reset_grid_buttonB.setEnabled(True)
        #                 # self.grid_pymol_buttonB.setEnabled(True)
        #             else:
        #                 try:
        #                     os.remove(glob.glob('%s*.map') % self.AMDock.offtarget.name)
        #                 except:
        #                     pass
        #                 try:
        #                     os.remove(glob.glob('%s*.fld') % self.AMDock.offtarget.name)
        #                 except:
        #                     pass
        #                 try:
        #                     os.remove(glob.glob('%s*.xyz') % self.AMDock.offtarget.name)
        #                 except:
        #                     pass
        #                 try:
        #                     os.remove(glob.glob('%s*.gpf') % self.AMDock.offtarget.name)
        #                 except:
        #                     pass
        #                 ##FIXME
        #                 # self.grid_box.setEnabled(True)
        #                 self.progressBar.setValue(37)
        #                 # self.reset_button.setEnabled(True)
        #         else:
        #             error_warning(self, prog, 'The program was finalized manually or closed by the occurrence of an '
        #                                       'internal error.')
        #             # self.reset_button.setEnabled(True)
        #     else:
        #         error_warning(self, prog, err)
        #         # self.reset_button.setEnabled(True)
        if not exitcode:
            self.W.start_process()
        else:
            #TODO: si da error mostrarlo
            pass

    def progress(self, value, mode=0, mess=None, set=0):
        # print mode, '@@@@'
        if mode == 1 and value:
            value = value/2
        # print value, 'value'
        if set:
            self.progressBar_section.setValue(value)
        else:
            self.progressBar_section.setValue(self.progressBar_section.value() + value)

        # self.program_label.setText()


    def readStdOutput(self):
        self.output = QtCore.QString(self.W.process.readAllStandardOutput())
        # print self.output
        self.out = str(self.output)
        thread = THREAD(self.AMDock, self.out)
        thread.run()
        print self.out
        if self.AMDock.project.prog == 'AutoGrid4':
            if re.search('%', self.out):
                current = float(self.out.split()[2].strip('%'))*0.4 - self.AMDock.project.part
                if current < 1:
                    return
                # print current
                self.AMDock.program_body.progress(current, self.AMDock.project.mode)
                self.AMDock.project.part = float(self.out.split()[2].strip('%'))*0.4

        elif self.AMDock.project.prog == 'AutoGrid4 B':
            if re.search('%', self.out):
                current = float(self.out.split()[2].strip('%')) * 0.4 - self.AMDock.project.part
                if current < 1:
                    return
                self.AMDock.program_body.progress(current, 0)
                self.AMDock.project.part = float(self.out.split()[2].strip('%')) * 0.4

        elif self.AMDock.project.prog == 'AutoDock Vina':
            current = self.out.count('*') * 2
            self.AMDock.program_body.progress(current, self.AMDock.project.mode, mess='Running Molecular Docking Simulation...')
            # if '*' in self.out:
            #     cursor = self.AMDock.log_widget.textedit.textCursor()
            #     cursor.movePosition(cursor.EndOfWord)
            #     cursor.insertText(self.out)
            # else:
            #     cursor = self.AMDock.log_widget.textedit.textCursor()
            #     cursor.movePosition(cursor.End)
            #     cursor.insertText(self.out)

        elif self.AMDock.project.prog == 'AutoDock Vina B':
            current = self.out.count('*')
            self.AMDock.program_body.progress(current, 0)
            # if '*' in self.out:
            #     cursor = self.AMDock.log_widget.textedit.textCursor()
            #     cursor.movePosition(cursor.EndOfWord)
            #     cursor.insertText(self.out)
            # else:
            #     cursor = self.AMDock.log_widget.textedit.textCursor()
            #     cursor.movePosition(cursor.End)
            #     cursor.insertText(self.out)
        #
        elif self.AMDock.project.prog == 'AutoLigand':
            if re.search('Progress:', self.out):
                current = float(self.out.split()[1]) * 0.4 - self.AMDock.project.part
                if current < 1:
                    return
                self.AMDock.program_body.progress(current, self.AMDock.project.mode)
                self.AMDock.project.part = float(self.out.split()[1]) * 0.4


    def readStdError(self):
        self.error = QtCore.QString(self.worker.readAllStandardError())

    def pymol_readStdOutput(self):
        if hasattr(self, 'b_pymol'):
            pymol_output = QtCore.QString(self.b_pymol.process.readAllStandardOutput())
        elif hasattr(self, 'b_pymolB'):
            pymol_output = QtCore.QString(self.b_pymolB.process.readAllStandardOutput())

        self.pymol_out = str(pymol_output)
        print self.pymol_out
        if re.search('AMDock INFO', self.pymol_out):
            a, i, prot, cx, cy, cz, sx, sy, sz = self.pymol_out.split()
            if prot == 'target':
                self.btnA_user.setChecked(True)
                self.coor_x.setValue(float(cx))
                self.coor_y.setValue(float(cy))
                self.coor_z.setValue(float(cz))
                self.size_x.setValue(int(float(sx)))
                self.size_y.setValue(int(float(sy)))
                self.size_z.setValue(int(float(sz)))

            elif prot == 'off-target':
                self.btnB_user.setChecked(True)
                self.coor_xB.setValue(float(cx))
                self.coor_yB.setValue(float(cy))
                self.coor_zB.setValue(float(cz))
                self.size_xB.setValue(int(float(sx)))
                self.size_yB.setValue(int(float(sy)))
                self.size_zB.setValue(int(float(sz)))
            self.AMDock.section = 1
            self.progressBar_global.setValue(40)

    def autodock_output(self):
        if self.AMDock.project.prog in ['AutoDock4', 'AutoDock4ZN']:
            self.ADout_file = os.path.join(self.AMDock.project.results, self.AMDock.ligand.pdbqt_name + '_' +
                                           self.AMDock.target.dlg)
        elif self.AMDock.project.prog in ['AutoDock4 B', 'AutoDock4ZN B']:
            self.ADout_file = os.path.join(self.AMDock.project.results, self.AMDock.ligand.pdbqt_name + '_' +
                                           self.AMDock.offtarget.dlg)

        ADout = open(self.ADout_file)
        Ad_count = 0
        for line in ADout:
            line = line.strip('\n')
            if re.search('DOCKED: MODEL', line):
                Ad_count += 1
            else:
                continue
        if self.AMDock.runs <= 40:
            current = float(Ad_count)/self.AMDock.runs * 40 - self.AMDock.project.part
        else:
            current = float(Ad_count)/self.AMDock.runs * 0.4 - self.AMDock.project.part
        if current < 1:
            return
        self.progress(current, self.AMDock.project.mode)
        if self.AMDock.runs <= 40:
            self.AMDock.project.part = float(Ad_count)/self.AMDock.runs * 40
        else:
            self.AMDock.project.part = float(Ad_count)/self.AMDock.runs * 0.4

        ADout.close()

    # def values(self, k):  # ok
    #     self.AMDock.pH = str(self.pH_value.value())

    def lig_select(self, lig):
        if lig.objectName() == 'lig_list':
            self.AMDock.target.selected = str(self.lig_list.currentText())
        else:
            self.AMDock.offtarget.selected = str(self.lig_listB.currentText())



    def go_result(self):
        # self.AMDock.amdock_file = os.path.normpath(os.path.join(self.AMDock.project.WDIR, self.AMDock.project.output))

        self.AMDock.result_tab.import_text.setText(self.AMDock.project.output)
        self.AMDock.output2file.out2file('>> RESULT\n')
        self.AMDock.statusbar.showMessage(" Go to Results Analysis", 2000)
        self.AMDock.main_window.setTabEnabled(2, True)
        self.AMDock.main_window.setCurrentIndex(2)
        self.AMDock.main_window.setTabEnabled(1, False)
        self.AMDock.main_window.setTabEnabled(0, False)
#         # self.AMDock.result_tab.load_button.setEnabled(False)
        os.chdir(self.AMDock.project.results)
        self.AMDock.result_tab.prot_label.setText('Target: %s' % self.AMDock.target.name)
        self.AMDock.result_tab.prot_labelB.setText('Off-Target: %s' % self.AMDock.offtarget.name)
        self.AMDock.result_tab.prot_label_sel.setText('%s' % self.AMDock.target.name)
        self.AMDock.result_tab.prot_label_selB.setText('%s' % self.AMDock.offtarget.name)
        # self.AMDock.result_tab.best_button.setEnabled(True)
        # self.AMDock.result_tab.all_button.setEnabled(True)
        self.AMDock.output2file.out2file('>  Target_Protein: %s\n' % self.AMDock.target.name)
        if self.AMDock.docking_program == 'AutoDock Vina':
            self.re = Result_Analysis(self.AMDock.target.vina_output, self.AMDock.target.vina_all, self.AMDock.target.vina_best,
                                      os.path.join(self.AMDock.project.input, self.AMDock.target.pdbqt),
                                      self.AMDock.ligand.ha)
            self.AMDock.output2file.out2file('>  all_poses_target_file: %s\n' % self.AMDock.target.vina_all)
            self.AMDock.output2file.out2file('>  best_pose_target_file: %s\n' % self.AMDock.target.vina_best)
        else:
            self.re = Result_Analysis(self.AMDock.target.ad4_output, self.AMDock.target.ad4_all, self.AMDock.target.ad4_best,
                                      os.path.join(self.AMDock.project.input, self.AMDock.target.pdbqt),
                                      self.AMDock.ligand.ha)
            self.AMDock.output2file.out2file('>  all_poses_target_file: %s\n' % self.AMDock.target.ad4_all)
            self.AMDock.output2file.out2file('>  best_pose_target_file: %s\n' % self.AMDock.target.ad4_best)
        self.results = self.re.result2table()

        self.AMDock.output2file.out2file(
            ' ______________________________________________________________________________ \n'
            '|                                                                              |\n'
            '|'.ljust(1) + (' Result for %s' % self.AMDock.target.name).ljust(78) + '|\n'
             '|______________________________________________________________________________|\n'
             '|               |                |              |               |              |\n'
             '|     POSES     |    AFFINITY    | ESTIMATED Ki |    Ki UNITS   |   LIGAND     |\n'
             '|               |   (KCAL/MOL)   |              |               |  EFFICIENCY  |\n'
             '|_______________|________________|______________|_______________|______________|\n')

        self.AMDock.result_tab.result_table.setRowCount(len(self.results))
        self.AMDock.result_tab.sele1.setRange(1, len(self.results))
        f = 0
        for x in self.results:
            c = 0
            out_line = '|' + ('%s' % x[0]).center(15) + '|' + ('%s' % x[1]).center(16) + '|' + ('%s' % x[2]).center(
                14) + '|' + ('%s' % x[3]).center(15) + '|' + ('%s' % x[4]).center(14) + '|\n'
            self.AMDock.output2file.out2file(out_line)
            for item in x:
                item = str(item)
                self.AMDock.result_tab.result_table.setItem(f, c, QtGui.QTableWidgetItem(item))
                self.AMDock.result_tab.result_table.item(f, c).setTextAlignment(
                    QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                if c == 4:
                    item_v = float(item)
                    if item_v <= -0.3:
                        self.AMDock.result_tab.result_table.item(f, c).setBackgroundColor(
                            QtGui.QColor(0, 255, 128, 200))
                c += 1
            f += 1
            self.AMDock.result_tab.value1 = float(self.AMDock.result_tab.result_table.item(0, 1).text())
        self.AMDock.result_tab.result_table.item(0, 1).setBackgroundColor(QtGui.QColor('darkGray'))
        self.AMDock.output2file.out2file(
            '|_______________|________________|______________|_______________|______________|\n\n\n')

        if self.AMDock.project.mode == 1:
            self.AMDock.result_tab.best_button.setText('Best Pose + Target')
            self.AMDock.result_tab.all_button.setText('All Poses + Target')
            self.AMDock.result_tab.best_buttonB.show()
            self.AMDock.result_tab.all_buttonB.show()
            self.AMDock.result_tab.result_tableB.show()
            self.AMDock.result_tab.selectivity_value_text.show()
            self.AMDock.result_tab.selectivity.show()
            self.AMDock.result_tab.sele1.show()
            self.AMDock.result_tab.sele2.show()
            self.AMDock.result_tab.prot_label_sel.show()
            self.AMDock.result_tab.prot_label_selB.show()
            self.AMDock.result_tab.minus.show()
            self.AMDock.result_tab.equal.show()
            self.AMDock.result_tab.prot_labelB.show()
            self.AMDock.output2file.out2file('>  Off-Target_Protein: %s\n' % self.AMDock.offtarget.name)
            if self.AMDock.docking_program == 'AutoDock Vina':
                self.reB = Result_Analysis(self.AMDock.offtarget.vina_output, self.AMDock.offtarget.vina_all,
                                           self.AMDock.offtarget.vina_best,
                                           os.path.join(self.AMDock.project.input, self.AMDock.offtarget.pdbqt),
                                           self.AMDock.ligand.ha)
                self.AMDock.output2file.out2file('>  all_poses_off-target_file: %s\n' % self.AMDock.offtarget.vina_all)
                self.AMDock.output2file.out2file('>  best_pose_off-target_file: %s\n' % self.AMDock.offtarget.vina_best)
            else:
                self.reB = Result_Analysis(self.AMDock.offtarget.ad4_output, self.AMDock.offtarget.ad4_all, self.AMDock.offtarget.ad4_best,
                                           os.path.join(self.AMDock.project.input, self.AMDock.offtarget.pdbqt),
                                           self.AMDock.ligand.ha)
                self.AMDock.output2file.out2file('>  all_poses_off-target_file: %s\n' % self.AMDock.offtarget.ad4_all)
                self.AMDock.output2file.out2file('>  best_pose_off-target_file: %s\n' % self.AMDock.offtarget.ad4_best)
            self.resultsB = self.reB.result2table()

            self.AMDock.output2file.out2file(
                ' ______________________________________________________________________________ \n'
                '|                                                                              |\n'
                '|' + (' Result for %s' % self.AMDock.offtarget.name).ljust(78) + '|\n'
                '|______________________________________________________________________________|\n'
                '|               |                |              |               |              |\n'
                '|     POSES     |    AFFINITY    | ESTIMATED Ki |    Ki UNITS   |   LIGAND     |\n'
                '|               |   (KCAL/MOL)   |              |               |  EFFICIENCY  |\n'
                '|_______________|________________|______________|_______________|______________|\n')
            self.AMDock.result_tab.result_tableB.setRowCount(len(self.resultsB))
            self.AMDock.result_tab.sele2.setRange(1, len(self.resultsB))
            f = 0
            for x in self.resultsB:
                c = 0
                out_line = '|' + ('%s' % x[0]).center(15) + '|' + ('%s' % x[1]).center(16) + '|' + ('%s' % x[2]).center(
                    14) + '|' + ('%s' % x[3]).center(15) + '|' + ('%s' % x[4]).center(14) + '|\n'
                self.AMDock.output2file.out2file(out_line)
                for item in x:
                    item = str(item)
                    self.AMDock.result_tab.result_tableB.setItem(f, c, QtGui.QTableWidgetItem(item))
                    self.AMDock.result_tab.result_tableB.item(f, c).setTextAlignment(
                        QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                    if c == 4:
                        item_v = float(item)
                        if item_v <= -0.3:
                            self.AMDock.result_tab.result_tableB.item(f, c).setBackgroundColor(
                                QtGui.QColor(0, 255, 128, 200))
                    c += 1
                f += 1
                self.AMDock.result_tab.value2 = float(self.AMDock.result_tab.result_tableB.item(0, 1).text())
            self.AMDock.result_tab.result_tableB.item(0, 1).setBackgroundColor(QtGui.QColor('darkGray'))
            self.AMDock.output2file.out2file(
                '|_______________|________________|______________|_______________|______________|\n\n\n')

            self.AMDock.result_tab.selectivity_value = self.AMDock.result_tab.value1 - self.AMDock.result_tab.value2
            self.AMDock.result_tab.selectivity_value_text.setText(
                '%s kcal/mol' % self.AMDock.result_tab.selectivity_value)
            self.AMDock.output2file.out2file(
                '   Selectivity                        #Using only the best pose(smallest energy)\n')
            self.AMDock.output2file.out2file('   Target  -  Off-Target  =  selectivity\n')
            self.AMDock.output2file.out2file('   ' + ('%s' % self.AMDock.result_tab.value1).center(6) + '  -  ' + (
                    '%s' % self.AMDock.result_tab.value2).center(7) + '  =  ' + (
                                                     '%s' % self.AMDock.result_tab.selectivity_value).center(
                11) + 'kcal/mol\n')

        else:
            self.AMDock.result_tab.result_tableB.hide()
            self.AMDock.result_tab.selectivity_value_text.hide()
            self.AMDock.result_tab.selectivity.hide()
            self.AMDock.result_tab.sele1.hide()
            self.AMDock.result_tab.sele2.hide()
            self.AMDock.result_tab.prot_label_sel.hide()
            self.AMDock.result_tab.prot_label_selB.hide()
            self.AMDock.result_tab.minus.hide()
            self.AMDock.result_tab.equal.hide()
            self.AMDock.result_tab.prot_labelB.hide()
            # self.AMDock.result_tab.best_button.setText('Show Best Pose')
            # self.AMDock.result_tab.all_button.setText('Show All Poses')
            self.AMDock.result_tab.best_buttonB.hide()
            self.AMDock.result_tab.all_buttonB.hide()
        self.AMDock.output2file.conclude()

    def go_scoring(self):

        self.AMDock.result_tab.import_text.setText(self.AMDock.project.output)
        self.AMDock.output2file.out2file('>> RESULT\n')
        self.AMDock.main_window.setTabEnabled(2, True)
        self.AMDock.main_window.setCurrentIndex(2)
        self.AMDock.main_window.setTabEnabled(1, False)
        self.AMDock.main_window.setTabEnabled(0, False)
        # self.AMDock.result_tab.load_button.setEnabled(False)
        os.chdir(self.AMDock.project.results)

        self.AMDock.result_tab.best_button.hide()
        self.AMDock.result_tab.all_button.hide()
        self.AMDock.result_tab.show_complex.show()
        self.AMDock.result_tab.prot_label.setText('Target: %s' % self.AMDock.target.name)
        self.AMDock.output2file.out2file('>  Target_Protein: %s\n' % self.AMDock.target.name)

        self.AMDock.result_tab.result_table.setRowCount(1)
        self.scoring_re = Scoring2table(self.AMDock.target.score, ha=self.AMDock.ligand.ha)
        self.results = self.scoring_re.result2table()
        # print self.results
        self.AMDock.output2file.out2file(
            ' ______________________________________________________________________________ \n'
            '|                                                                              |\n'
            '|'.ljust(1) + (' Result for %s' % self.AMDock.target.name).ljust(78) + '|\n'
                                                                                       '|______________________________________________________________________________|\n'
                                                                                       '|               |                |              |               |              |\n'
                                                                                       '|     POSES     | BINDING ENERGY | ESTIMATED Ki |    Ki UNITS   |   LIGAND     |\n'
                                                                                       '|               |   (KCAL/MOL)   |              |               |  EFFICIENCY  |\n'
                                                                                       '|_______________|________________|______________|_______________|______________|\n')

        f = 0
        for x in self.results:
            c = 0
            out_line = '|' + ('%s' % x[0]).center(15) + '|' + ('%s' % x[1]).center(16) + '|' + ('%s' % x[2]).center(
                14) + '|' + ('%s' % x[3]).center(15) + '|' + ('%s' % x[4]).center(14) + '|\n'
            self.AMDock.output2file.out2file(out_line)
            for item in x:
                item = str(item)
                self.AMDock.result_tab.result_table.setItem(f, c, QtGui.QTableWidgetItem(item))
                self.AMDock.result_tab.result_table.item(f, c).setTextAlignment(
                    QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                if c == 4:
                    item_v = float(item)
                    if item_v <= -0.3:
                        self.AMDock.result_tab.result_table.item(f, c).setBackgroundColor(
                            QtGui.QColor(0, 255, 128, 200))
                c += 1
            f += 1
        self.AMDock.output2file.out2file(
            '|_______________|________________|______________|_______________|______________|\n\n\n')
        self.AMDock.output2file.conclude()

    # def check_grid(self):
    #     if self.size_x.value() >= self.size and self.size_y.value() >= self.size \
    #             and self.size_z.value() >= self.size:
    #         if self.btnA_user.isChecked():
    #             # self.grid_icon_ok.show()
    #             # self.grid_icon.hide()
    #     else:
    #         if self.btnA_user.isChecked():
    #             # self.grid_icon.show()
    #             # self.grid_icon_ok.hide()
    #     if self.AMDock.project.mode == 1:
    #         if self.size_xB.value() >= self.size and self.size_yB.value() >= self.size and self.size_zB.value() >= \
    #                 self.size:
    #             if self.btnB_user.isChecked():
    #                 # self.grid_icon_okB.show()
    #                 # self.grid_iconB.hide()
    #         else:
    #             if self.btnB_user.isChecked():
    #                 # self.grid_iconB.show()
    #                 # self.grid_icon_okB.hide()


    def scoring(self):
        '''scoring'''
        # self.reset_button.setEnabled(False)
        # self.run_scoring.setEnabled(False)
        queue = Queue.Queue()
        if self.AMDock.docking_program == 'AutoDock Vina':
            pass
        elif self.AMDock.docking_program == 'AutoDock4':
            protein_gpf = str(self.AMDock.target.pdbqt.split('.')[0] + '.gpf')
            protein_dlg = str(self.AMDock.target.pdbqt.split('.')[0] + '.dlg')
            protein_dpf = str(self.AMDock.target.pdbqt.split('.')[0] + '.dpf')

            prepare_gpf4_arg = [self.AMDock.prepare_gpf4_py, '-l', self.AMDock.ligand.pdbqt, '-r',
                                self.AMDock.target.pdbqt, '-f', self.AMDock.gd, '-p', 'spacing=%.3f' %
                                self.AMDock.spacing_autodock, '-p', 'npts=%d,%d,%d' % (
                                    self.size[0] / self.AMDock.spacing_autodock,
                                    self.size[1] / self.AMDock.spacing_autodock,
                                    self.size[2] / self.AMDock.spacing_autodock)]
            self.prepare_gpf4 = {'Prepare_gpf4': [self.AMDock.this_python, prepare_gpf4_arg]}
            autogrid_arg = ['-p', protein_gpf]
            self.autogrid4 = {'AutoGrid4': [self.AMDock.autogrid, autogrid_arg]}
            prepare_dpf_arg = [self.AMDock.prepare_dpf_py, '-l', str(self.AMDock.ligand_pdbqt), '-r',
                               str(self.AMDock.target.pdbqt), '-e']
            self.prepare_dpf4 = {'Prepare_dpf4': [self.AMDock.this_python, prepare_dpf_arg]}
            self.autodock_dlg = str(self.AMDock.ligand_pdbqt.split('.')[0] + '_' + protein_dlg)
            autodock_arg = ['-p', str(self.AMDock.ligand_pdbqt.split('.')[0] + '_' + protein_dpf), '-l',
                            os.path.join(self.AMDock.project.results, self.AMDock.ligand.name + '_score.log')]
            self.autodock = {'AutoDock4': [self.AMDock.autodock, autodock_arg]}
            self.list_process = [self.prepare_gpf4, self.autogrid4, self.prepare_dpf4, self.autodock]
            for process in self.list_process:
                self.queue.put(process)
        else:
            shutil.copy(self.AMDock.zn_ff, os.getcwd())
            protein_TZ = str(self.AMDock.target.pdbqt.split('.')[0] + '_TZ.pdbqt')
            protein_gpf = str(self.AMDock.target.pdbqt.split('.')[0] + '_TZ.gpf')
            protein_dlg = str(self.AMDock.target.pdbqt.split('.')[0] + '_TZ.dlg')
            protein_dpf = str(self.AMDock.target.pdbqt.split('.')[0] + '_TZ.dpf')
            pseudozn_arg = [self.AMDock.zinc_pseudo_py, '-r', str(self.AMDock.target.pdbqt)]
            self.pseudozn = {'PseudoZn': [self.AMDock.this_python, pseudozn_arg]}
            prepare_gpf4zn_arg = [self.AMDock.prepare_gpf4zn_py, '-l', str(self.AMDock.ligand_pdbqt), '-r',
                                  protein_TZ, '-f', self.AMDock.gd, '-p',
                                  'spacing=%.3f' % self.AMDock.spacing_autodock, '-p', 'npts=%d,%d,%d' %
                                  (self.size[0] / self.AMDock.spacing_autodock,
                                   self.size[1] / self.AMDock.spacing_autodock,
                                   self.size[2] / self.AMDock.spacing_autodock), '-p',
                                  'parameter_file=AD4Zn.dat']
            self.prepare_gpf4zn = {'Prepare_gpf4zn': [self.AMDock.this_python, prepare_gpf4zn_arg]}
            autogridzn_arg = ['-p', protein_gpf]
            self.autogrid4 = {'AutoGrid4': [self.AMDock.autogrid, autogridzn_arg]}
            prepare_dpfzn_arg = [self.AMDock.prepare_dpf_py, '-l', str(self.AMDock.ligand_pdbqt), '-r', protein_TZ, '-e']
            self.prepare_dfp4zn = {'Prepare_dpf4': [self.AMDock.this_python, prepare_dpfzn_arg]}
            self.autodock_dlg = str(self.AMDock.ligand_pdbqt.split('.')[0] + '_' + protein_dlg)
            autodockzn_arg = ['-p', str(self.AMDock.ligand_pdbqt.split('.')[0] + '_' + protein_dpf),
                              '-l', os.path.join(self.AMDock.project.results, self.AMDock.ligand.name + '_score.log')]
            self.autodockzn = {'AutoDock4ZN': [self.AMDock.autodock, autodockzn_arg]}
            self.list_process = [self.pseudozn, self.prepare_gpf4zn, self.autogrid4, self.prepare_dfp4zn,
                                 self.autodockzn]
            for process in self.list_process:
                self.queue.put(process)
        self.worker.init(self.queue, 'Scoring Process')
        self.worker.start_process()

    def stop_function(self):
        if self.AMDock.state:
            self.stop_opt = stop_warning(self)
            if self.stop_opt == QtGui.QMessageBox.Yes:
                self.W.force_finished()
            # self.stop_button.setEnabled(False)
            # self.run_button.setEnabled(True)
            # self.reset_button.setEnabled(True)

    def start_docking_prog(self):
        # try:
        #     self.b_pymol.__del__()
        # except:
        #     pass
        # try:
        #     self.b_pymolB.__del__()
        # except:
        #     pass
        # try:
        #     self.b_pymol_timerB.stop()
        # except:
        #     pass
        # try:
        #     self.b_pymol_timer.stop()
        # except:
        #     pass
        self.need_grid = self.need_gridB = True

        queue = Queue.Queue()

        if self.AMDock.state == 2:
            msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'Other processes are running in the background. '
                                                                   'Please wait for these to end.',
                                             QtGui.QMessageBox.Ok)
            return
        elif self.AMDock.section in [-1, 0, 1 ]:
            msg = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'It seems that not all previous steps have been '
                                                                   'completed. Please do all the steps sequentially.',
                                             QtGui.QMessageBox.Ok)
            return
        elif self.AMDock.section in [3]:
            msg = QtGui.QMessageBox.warning(self.AMDock, 'Warning', 'This step was successfully completed previously.'
                                                                    ' Do you want to repeat it?',
                                            QtGui.QMessageBox.Yes | QtGui.QMessageBox.No)
            if msg == QtGui.QMessageBox.No:
                return


        if self.AMDock.docking_program == 'AutoDock Vina':
            if self.AMDock.project.mode == 2:
                queue.name = 4
                self.AMDock.target.score = os.path.join(self.AMDock.project.results, self.AMDock.ligand.name + '_score.log')
                vina_score = {'AutoDock Vina Scoring': [self.AMDock.vina_exec, ['--receptor', self.AMDock.target.pdbqt,
                                                                                '--ligand', self.AMDock.ligand.pdbqt,
                                                                                '--score_only', "--log",
                                                                                self.AMDock.target.score]]}
                queue.put(vina_score)
            else:
                queue.name = 3
                self.AMDock.target.vina_output = os.path.join(self.AMDock.project.results, self.AMDock.ligand.pdbqt_name +'_' +
                                                        self.AMDock.target.name + '_out.pdbqt')
                self.AMDock.target.vina_log = os.path.join(self.AMDock.project.results, self.AMDock.ligand.pdbqt_name + '_' +
                                                        self.AMDock.target.name + '_out.log')
                vina_arg = ['--receptor', self.AMDock.target.pdbqt, '--ligand', self.AMDock.ligand.pdbqt, '--center_x',
                            '{}'.format(self.grid_center[0]), '--center_y', '{}'.format(self.grid_center[1]),
                            '--center_z', '{}'.format(self.grid_center[2]), '--size_x', '{}'.format(
                            self.size[0]),'--size_y','{}'.format(self.size[1]), '--size_z', '{}'.format(
                            self.size[2]), '--cpu', str(self.AMDock.ncpu), '--num_modes', str(self.AMDock.poses_vina),
                            '--exhaustiveness', str(self.AMDock.exhaustiveness), '--out', self.AMDock.target.vina_output ,
                            "--log", self.AMDock.target.vina_log]
                vina = {'AutoDock Vina': [self.AMDock.vina_exec, vina_arg]}
                queue.put(vina)
                if self.AMDock.project.mode == 1:
                    self.AMDock.offtarget.vina_output = os.path.join(self.AMDock.project.results, self.AMDock.ligand.pdbqt_name +
                                                              '_' + self.AMDock.offtarget.name + '_out.pdbqt')
                    self.AMDock.offtarget.vina_log = os.path.join(self.AMDock.project.results, self.AMDock.ligand.pdbqt_name + '_' +
                                                        self.AMDock.offtarget.name + '_out.log')
                    vina_argB = ['--receptor', self.AMDock.offtarget.pdbqt, '--ligand', self.AMDock.ligand.pdbqt,'--center_x',
                                '{}'.format(self.grid_centerB[0]), '--center_y', '{}'.format(self.grid_centerB[1]),
                                '--center_z', '{}'.format(self.grid_centerB[2]), '--size_x', '{}'.format(
                                self.size[0]),'--size_y','{}'.format(self.size[0]), '--size_z', '{}'.format(
                                self.size[2]), '--cpu', str(self.AMDock.ncpu), '--num_modes',
                                 str(self.AMDock.poses_vina),
                                '--exhaustiveness', str(self.AMDock.exhaustiveness), '--out',
                                 self.AMDock.offtarget.vina_output, "--log", self.AMDock.offtarget.vina_log]
                    vinaB = {'AutoDock Vina B': [self.AMDock.vina_exec, vina_argB]}
                    queue.put(vinaB)

        elif self.AMDock.docking_program == 'AutoDock4':
            if self.AMDock.project.mode == 2:
                queue.name = 4
                self.AMDock.target.score = os.path.join(self.AMDock.project.results, self.AMDock.ligand.name + '_score.log')
                prepare_gpf4_arg = [self.AMDock.prepare_gpf4_py, '-l', self.AMDock.ligand.pdbqt, '-r',
                                    self.AMDock.target.pdbqt, '-p', 'spacing=%.3f' % self.AMDock.spacing_autodock, '-p',
                                    'npts=%d,%d,%d' % (self.size[0] / self.AMDock.spacing_autodock,
                                    self.size[1] / self.AMDock.spacing_autodock, self.size[2] /
                                    self.AMDock.spacing_autodock),
                                    '-p', 'gridcenter={0},{1},{2}'.format(*self.ligand_info.center)]
                prepare_gpf4 = {'Prepare_gpf4': [self.AMDock.this_python, prepare_gpf4_arg]}
                queue.put(prepare_gpf4)
                autogrid4 = {'AutoGrid4': [self.AMDock.autogrid, ['-p', self.AMDock.target.gpf]]}
                queue.put(autogrid4)
                prepare_dpf_arg = [self.AMDock.prepare_dpf_py, '-l', self.AMDock.ligand.pdbqt, '-r',
                                   self.AMDock.target.pdbqt, '-e']
                prepare_dpf4 = {'Prepare_dpf4': [self.AMDock.this_python, prepare_dpf_arg]}
                queue.put(prepare_dpf4)
                autodock_arg = ['-p', self.AMDock.ligand.pdbqt_name + '_' + self.AMDock.target.dpf, '-l', self.AMDock.target.score]
                autodock = {'AutoDock4': [self.AMDock.autodock, autodock_arg]}
                queue.put(autodock)
            else:
                queue.name = 3

                self.AMDock.target.ad4_output = os.path.join(self.AMDock.project.results, self.AMDock.ligand.pdbqt_name + '_' +
                                                      self.AMDock.target.dlg)
                prepare_gpf4_arg = [self.AMDock.prepare_gpf4_py, '-l', self.AMDock.ligand.pdbqt, '-r',
                                    self.AMDock.target.pdbqt, '-p', 'spacing=%.3f' % self.AMDock.spacing_autodock, '-p',
                                    'npts=%d,%d,%d' % (self.size[0] / self.AMDock.spacing_autodock, self.size[1] /
                                                       self.AMDock.spacing_autodock, self.size[2] /
                                                       self.AMDock.spacing_autodock), '-p', 'gridcenter={0},{1},'
                                                       '{2}'.format(*self.grid_center)]
                prepare_gpf4 = {'Prepare_gpf4': [self.AMDock.this_python, prepare_gpf4_arg]}
                queue.put(prepare_gpf4)
                autogrid4 = {'AutoGrid4': [self.AMDock.autogrid, ['-p', self.AMDock.target.gpf]]}
                queue.put(autogrid4)
                prepare_dpf_arg = [self.AMDock.prepare_dpf_py, '-l', self.AMDock.ligand.pdbqt, '-r',
                                   self.AMDock.target.pdbqt, '-p', 'rmstol=%s' % self.AMDock.rmsd, '-p',
                                   'ga_num_evals=%s' % self.AMDock.eval, '-p', 'ga_run=%s' % self.AMDock.runs]
                prepare_dpf4 = {'Prepare_dpf4': [self.AMDock.this_python, prepare_dpf_arg]}
                queue.put(prepare_dpf4)
                autodock_arg = ['-p', self.AMDock.ligand.pdbqt_name + '_' + self.AMDock.target.dpf, '-l', self.AMDock.target.ad4_output]
                autodock = {'AutoDock4': [self.AMDock.autodock, autodock_arg]}
                queue.put(autodock)

                if self.AMDock.project.mode == 1:
                    self.AMDock.offtarget.ad4_output = os.path.join(self.AMDock.project.results,
                                                                    self.AMDock.ligand.pdbqt_name + '_' +
                                                                 self.AMDock.offtarget.dlg)
                    prepare_gpf4_argB = [self.AMDock.prepare_gpf4_py, '-l', self.AMDock.ligand.pdbqt, '-r',
                                    self.AMDock.offtarget.pdbqt, '-p', 'spacing=%.3f' % self.AMDock.spacing_autodock, '-p',
                                    'npts=%d,%d,%d' % (self.size[0] / self.AMDock.spacing_autodock, self.size[1] /
                                                       self.AMDock.spacing_autodock, self.size[2] /
                                                       self.AMDock.spacing_autodock), '-p', 'gridcenter={0},{1},'
                                                       '{2}'.format(*self.grid_centerB)]
                    prepare_gpf4B = {'Prepare_gpf4 B': [self.AMDock.this_python, prepare_gpf4_argB]}
                    queue.put(prepare_gpf4B)

                    autogrid4B = {'AutoGrid4 B': [self.AMDock.autogrid, ['-p', self.AMDock.offtarget.gpf]]}
                    queue.put(autogrid4B)

                    prepare_dpf_argB = [self.AMDock.prepare_dpf_py, '-l', self.AMDock.ligand.pdbqt, '-r', self.AMDock.offtarget.pdbqt,
                                        '-p', 'rmstol=%s' % self.AMDock.rmsd, '-p', 'ga_num_evals=%s' % self.AMDock.eval,
                                        '-p', 'ga_run=%s' % self.AMDock.runs]
                    prepare_dpf4B = {'Prepare_dpf4 B': [self.AMDock.this_python, prepare_dpf_argB]}
                    queue.put(prepare_dpf4B)

                    autodock_argB = ['-p', self.AMDock.ligand.pdbqt_name + '_' + self.AMDock.offtarget.dpf, '-l',
                                     self.AMDock.offtarget.ad4_output]
                    autodockB = {'AutoDock4 B': [self.AMDock.autodock, autodock_argB]}
                    queue.put(autodockB)

        elif self.AMDock.docking_program == 'AutoDockZn':
            shutil.copy(self.AMDock.zn_ff, os.getcwd())
            self.AMDock.target.score = os.path.join(self.AMDock.project.results, self.AMDock.ligand.name + '_score.log')
            if self.AMDock.project.mode == 2:
                queue.name = 4
                pseudozn = { 'PseudoZn': [self.AMDock.this_python, [self.AMDock.zinc_pseudo_py, '-r',
                                                                    self.AMDock.target.pdbqt]]}
                queue.put(pseudozn)
                prepare_gpf4zn_arg = [self.AMDock.prepare_gpf4zn_py, '-l', str(self.AMDock.ligand.pdbqt), '-r',
                                      self.AMDock.target.tzpdbqt, '-p', 'spacing=%.3f' % self.AMDock.spacing_autodock, '-p',
                                      'npts=%d,%d,%d' % (self.size[1] / self.AMDock.spacing_autodock, self.size[1] /
                                      self.AMDock.spacing_autodock, self.size[2] / self.AMDock.spacing_autodock), '-p',
                                      'gridcenter={0},{1},{2}'.format(*self.ligand_info.center), '-p',
                                      'parameter_file=AD4Zn.dat']
                prepare_gpf4zn = {'Prepare_gpf4zn': [self.AMDock.this_python, prepare_gpf4zn_arg]}
                queue.put(prepare_gpf4zn)
                autogrid4 = {'AutoGrid4': [self.AMDock.autogrid, ['-p', self.AMDock.target.tzgpf]]}
                queue.put(autogrid4)
                prepare_dpf_arg = [self.AMDock.prepare_dpf_py, '-l', self.AMDock.ligand.pdbqt, '-r',
                                   self.AMDock.target.pdbqt, '-e']
                prepare_dpf4 = {'Prepare_dpf4': [self.AMDock.this_python, prepare_dpf_arg]}

                queue.put(prepare_dpf4)
                autodockzn_arg = ['-p', self.AMDock.ligand.pdbqt_name + '_' + self.AMDock.target.tzdpf, '-l', self.AMDock.target.score]
                autodockzn = {'AutoDock4ZN': [self.AMDock.autodock, autodockzn_arg]}
                queue.put(autodockzn)
            else:
                queue.name = 3

                self.AMDock.target.ad4_output = os.path.join(self.AMDock.project.results, self.AMDock.ligand.pdbqt_name + '_' +
                                                      self.AMDock.target.dlg)
                pseudozn = {'PseudoZn': [self.AMDock.this_python, [self.AMDock.zinc_pseudo_py, '-r', self.AMDock.target.pdbqt]]}
                queue.put(pseudozn)
                prepare_gpf4zn_arg = [self.AMDock.prepare_gpf4zn_py, '-l', self.AMDock.ligand.pdbqt, '-r',
                                      self.AMDock.target.tzpdbqt,'-p', 'spacing=%.3f' % self.AMDock.spacing_autodock, '-p',
                                    'npts=%d,%d,%d' % (self.size[0] / self.AMDock.spacing_autodock, self.size[1] /
                                                       self.AMDock.spacing_autodock, self.size[2] /
                                                       self.AMDock.spacing_autodock), '-p', 'gridcenter={0},{1},'
                                                       '{2}'.format(*self.grid_center),'-p', 'parameter_file=AD4Zn.dat']
                prepare_gpf4zn = {'Prepare_gpf4zn': [self.AMDock.this_python, prepare_gpf4zn_arg]}
                queue.put(prepare_gpf4zn)
                autogrid4 = {'AutoGrid4': [self.AMDock.autogrid, ['-p', self.AMDock.target.tzgpf]]}
                queue.put(autogrid4)
                prepare_dpf_arg = [self.AMDock.prepare_dpf_py, '-l', self.AMDock.ligand.pdbqt, '-r',
                                   self.AMDock.target.tzpdbqt, '-p', 'rmstol=%s' % self.AMDock.rmsd, '-p',
                                   'ga_num_evals=%s' % self.AMDock.eval, '-p', 'ga_run=%s' % self.AMDock.runs]
                prepare_dpf4 = {'Prepare_dpf4': [self.AMDock.this_python, prepare_dpf_arg]}
                queue.put(prepare_dpf4)
                autodockzn_arg = ['-p', self.AMDock.ligand.pdbqt_name + '_' + self.AMDock.target.tzdpf, '-l', self.AMDock.target.ad4_output]
                autodockzn = {'AutoDock4ZN': [self.AMDock.autodock, autodockzn_arg]}
                queue.put(autodockzn)

                if self.AMDock.project.mode == 1:
                    self.AMDock.offtarget.ad4_output = os.path.join(self.AMDock.project.results,
                                                                    self.AMDock.ligand.pdbqt_name + '_' +
                                                                 self.AMDock.offtarget.dlg)
                    pseudoznB = {'PseudoZn B': [self.AMDock.this_python, [self.AMDock.zinc_pseudo_py, '-r',
                                                                        self.AMDock.offtarget.pdbqt]]}
                    queue.put(pseudoznB)

                    prepare_gpf4zn_argB = [self.AMDock.prepare_gpf4zn_py, '-l', self.AMDock.ligand.pdbqt, '-r',
                                          self.AMDock.offtarget.tzpdbqt, '-p', 'spacing=%.3f' % self.AMDock.spacing_autodock, '-p',
                                          'npts=%d,%d,%d' % (self.size[0] / self.AMDock.spacing_autodock, self.size[1] /
                                          self.AMDock.spacing_autodock, self.size[2] / self.AMDock.spacing_autodock),
                                          '-p', 'gridcenter={0},{1},{2}'.format(*self.grid_centerB), '-p',
                                          'parameter_file=AD4Zn.dat']
                    prepare_gpf4znB = {'Prepare_gpf4zn B': [self.AMDock.this_python, prepare_gpf4zn_argB]}
                    queue.put(prepare_gpf4znB)

                    autogrid4B = {'AutoGrid4 B': [self.AMDock.autogrid, ['-p', self.AMDock.offtarget.tzgpf]]}
                    queue.put(autogrid4B)

                    prepare_dpf_argB = [self.AMDock.prepare_dpf_py, '-l', self.AMDock.ligand.pdbqt, '-r', self.AMDock.offtarget.tzpdbqt,
                                        '-p', 'rmstol=%s' % self.AMDock.rmsd, '-p', 'ga_num_evals=%s' % self.AMDock.eval,
                                        '-p', 'ga_run=%s' % self.AMDock.runs]
                    prepare_dpf4B = {'Prepare_dpf4 B': [self.AMDock.this_python, prepare_dpf_argB]}
                    queue.put(prepare_dpf4B)

                    autodockzn_argB = ['-p', self.AMDock.ligand.pdbqt_name + '_' + self.AMDock.offtarget.tzdpf, '-l',
                                        self.AMDock.offtarget.ad4_output]
                    autodockznB = {'AutoDock4ZN B': [self.AMDock.autodock, autodockzn_argB]}
                    queue.put(autodockznB)

        self.W.set_queue(queue)  # , 'Molecular Docking Simulation')
        self.W.start_process()

    def check_state(self, state, prog):
        self.AMDock.state = state
        if self.AMDock.state == 2:
            self.process_state.setText('RUNNING...    ')
            self.init_prog(prog)
        elif self.AMDock.state == 1:
            self.process_state.setText('STARTING...   ')
        else:
            self.process_state.setText('NOT RUNNING...')

    def check_section(self, qname):
        self.AMDock.project.previous = 0
        self.AMDock.section = qname
        # print self.AMDock.section
        self.highlight()
        if self.AMDock.section == 1:
            self.progressBar_global.setValue(40)
            self.progressBar_section.setValue(0)
            self.program_label.setText('Processing Input Files...Done.')
            self.size_x.setValue(self.lig_size)
            self.size_y.setValue(self.lig_size)
            self.size_z.setValue(self.lig_size)
            self.size_xB.setValue(self.lig_size)
            self.size_yB.setValue(self.lig_size)
            self.size_zB.setValue(self.lig_size)
            self.AMDock.log_widget.textedit.append('AMDOCK: IF > Prepare Initial Files...Done.\n')
        elif self.AMDock.section == 2:
            self.progressBar_global.setValue(70)
            self.progressBar_section.setValue(0)
            self.coor_x.setValue(float(self.grid_center[0]))
            self.coor_y.setValue(float(self.grid_center[1]))
            self.coor_z.setValue(float(self.grid_center[2]))
            if self.AMDock.project.mode == 1:
                self.coor_xB.setValue(float(self.grid_centerB[0]))
                self.coor_yB.setValue(float(self.grid_centerB[1]))
                self.coor_zB.setValue(float(self.grid_centerB[2]))
            self.program_label.setText('Binding Site Definition...Done.')
            self.AMDock.log_widget.textedit.append('AMDOCK: BSD > Binding Site Definition...Done.\n')
        elif self.AMDock.section == 3:
            self.progressBar_global.setValue(100)
            self.progressBar_section.setValue(0)
            self.program_label.setText('Molecular Docking...Done.')
            self.AMDock.log_widget.textedit.append('AMDOCK: MD > Molecular Docking...Done.\n')
            self.go_result()
        elif self.AMDock.section == 4:
            self.progressBar_global.setValue(100)
            self.progressBar_section.setValue(0)
            self.program_label.setText('Scoring...Done.')
            self.AMDock.log_widget.textedit.append('AMDOCK: S > Scoring...Done.\n')
            self.go_scoring()
        # print self.grid_center, self.grid_centerB

    def reset_ligand(self):
        try:
            os.remove(self.AMDock.ligand.input)
        except:
            pass
        self.ligand_label.clear()
        self.ligand_text.clear()
        self.ligand_label.hide()
        self.AMDock.ligand = BASE()

    def reset_target(self):
        try:
            os.remove(self.AMDock.target.input)
        except:
            pass
        self.target_label.clear()
        self.target_text.clear()
        self.target_label.hide()
        self.AMDock.target = BASE()

    def reset_offtarget(self):
        try:
            os.remove(self.AMDock.offtarget.input)
        except:
            pass
        self.offtarget_label.clear()
        self.offtarget_text.clear()
        self.offtarget_label.hide()
        self.AMDock.offtarget = BASE()

    def init_prog(self, prog):
        self.AMDock.project.prog = prog
        self.program_label.setText('Running {}...'.format(prog))
        if prog == 'PDB2PQR':
            # self.progressBar_section.setValue(18)

            # progress(self, 1, 1, 18, time=15, mess='Running %s...' % prog)
            self.AMDock.log_widget.textedit.append('AMDOCK: IF > Running PDB2PQR for Target...')
        elif prog == 'Prepare_Receptor4':
            # self.progressBar_section.setValue(22)
            # progress(self, 1, 1, 22, time=7, mess='Prepare receptor...')
            self.AMDock.log_widget.textedit.append('AMDOCK: IF > Prepare Target...')
        elif prog == 'Prepare_Ligand4':
            # self.progressBar_section.setValue(25)
            # progress(self, 1, 1, 25, time=5, mess='Prepare ligand...')
            self.AMDock.log_widget.textedit.append('AMDOCK: IF > Prepare Ligand...')
        elif prog == 'PDB2PQR B':
            # progress(self, 1, 1, 18, time=20, mess='Running PDB2PQR for Off-Target...')
            self.AMDock.log_widget.textedit.append('AMDOCK: IF > Running PDB2PQR for Off-Target...')
        elif prog == 'Prepare_Receptor4 B':
            # progress(self, 1, 1, 22, time=7, mess='Prepare receptor B...')
            self.AMDock.log_widget.textedit.append('AMDOCK: IF > Prepare Off-Target...')
        elif prog == 'AutoDock4':
            self.AMDock.log_widget.textedit.append('AMDOCK: MD > Determination of better poses for Target Protein...')
            self.AMDock.log_widget.textedit.append('AMDOCK: MD > Running AutoDock4...')
            self.timerAD = QtCore.QTimer()
            self.timerAD.timeout.connect(self.autodock_output)
            self.timerAD.start(500)
        if prog == 'AutoDock4 B':
            self.AMDock.log_widget.textedit.append('AMDOCK: MD > Determination of better poses for Off-Target '
                                                   'Protein...')
            self.AMDock.log_widget.textedit.append('AMDOCK: MD > Running AutoDock4...')

            self.timerAD = QtCore.QTimer()
            self.timerAD.timeout.connect(self.autodock_output)
            self.timerAD.start(500)
        if prog == 'AutoDock4ZN':
            self.AMDock.log_widget.textedit.append('AMDOCK: MD > Determination of better poses for Target Protein...')
            self.AMDock.log_widget.textedit.append('AMDOCK: MD > Running AutoDock4 Zn...')

            self.timerAD = QtCore.QTimer()
            self.timerAD.timeout.connect(self.autodock_output)
            self.timerAD.start(500)
        if prog == 'AutoDock4ZN B':
            self.part = 0
            self.AMDock.log_widget.textedit.append('AMDOCK: MD > Determination of better poses for Off-Target '
                                                    'Protein...')
            self.AMDock.log_widget.textedit.append('AMDOCK: MD > Running AutoDock4 Zn...')

            self.timerAD = QtCore.QTimer()
            self.timerAD.timeout.connect(self.autodock_output)
            self.timerAD.start(500)
        if prog == 'AutoDock Vina':
            self.AMDock.log_widget.textedit.append('AMDOCK: MD > Determination of better poses for Target Protein...')
            self.AMDock.log_widget.textedit.append('AMDOCK: MD > Running AutoDock Vina...')
        if prog == 'AutoDock Vina B':
            self.AMDock.log_widget.textedit.append('AMDOCK: MD > Determination of better poses for Off-Target '
                                                   'Protein...')
            self.AMDock.log_widget.textedit.append('AMDOCK: MD > Running AutoDock Vina...')
        if prog == 'AutoGrid4':
            print self.AMDock.section
            if self.AMDock.section == 1:
                self.AMDock.log_widget.textedit.append('AMDOCK: BSD > Running AutoGrid4 for Target Protein...')
            else:
                self.AMDock.log_widget.textedit.append('AMDOCK: MD > Running AutoGrid4 for Target Protein...')
        if prog == 'AutoGrid4 B':
            self.AMDock.log_widget.textedit.append('AMDOCK: MD > Running AutoGrid4 for Off-Target Protein...')




    def log_toggle(self):
        if self.AMDock.log_widget.isVisible():
            self.AMDock.log_widget.hide()
        else:
            self.AMDock.log_widget.show()

    def highlight(self):
        # self.p0.setStyleSheet("QLabel { color : black; }")
        self.p1.setStyleSheet("QLabel { color : black; }")
        self.p2.setStyleSheet("QLabel { color : black; }")
        self.p3.setStyleSheet("QLabel { color : black; }")
        self.p4.setStyleSheet("QLabel { color : black; }")
        if self.AMDock.section == -1:
            self.p1.setStyleSheet("QLabel { background-color : blue; color : white; }")
        if self.AMDock.section == 0:
            self.p2.setStyleSheet("QLabel { background-color : blue; color : white; }")
        elif self.AMDock.section == 1:
            self.p3.setStyleSheet("QLabel { background-color : blue; color : white; }")
        elif self.AMDock.section == 2:
            self.p4.setStyleSheet("QLabel { background-color : blue; color : white; }")
        # elif self.AMDock.section == 3:
        #     self.p4.setStyleSheet("QLabel { background-color : blue; color : white; }")