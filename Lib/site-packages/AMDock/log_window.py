from PyQt4 import QtGui, QtCore
from PyQt4.QtCore import pyqtSignal
import sys

class LogWindow(QtGui.QDockWidget):
    def __init__(self, parent=None):
        QtGui.QDockWidget.__init__(self, parent)
        self.setAllowedAreas(QtCore.Qt.AllDockWidgetAreas)

        # screen = QtGui.QDesktopWidget().screenGeometry()
        # mysize = self.geometry()
        # self.hpos = (screen.width() - mysize.width()) / 2
        # self.vpos = 170
        # self.setGeometry(QtCore.QRect(self.hpos + 100, self.vpos, 600, 500))
        # self.setModal(False)
        self.AMDock = parent
        # layout = QtGui.QVBoxLayout()

        self.splitter = QtGui.QSplitter(QtCore.Qt.Vertical, self)

        self.list_view = QtGui.QTreeWidget(self)
        self.list_view.setColumnCount(2)
        self.list_view.header().setResizeMode(QtGui.QHeaderView.Stretch)
        # self.list_view.setHeaderLabels(['Step', 'State'])
        self.list_view.setHeaderHidden(True)
        # self.list_view.

        # items list
        self.dp = QtGui.QTreeWidgetItem(self.list_view, ['Docking Program'])

        self.pf = QtGui.QTreeWidgetItem(self.list_view, ['Project'])

        self.inp = QtGui.QTreeWidgetItem(self.list_view, ['Input Files'])
        self.target = QtGui.QTreeWidgetItem(self.inp, ['Target'])
        # self.tpdb2pqr = QtGui.QTreeWidgetItem(self.target, ['PDB2PQR'])
        # self.tfix = QtGui.QTreeWidgetItem(self.target, ['Fix PDB'])
        # self.tprepare = QtGui.QTreeWidgetItem(self.target, ['Prepare Receptor'])

        self.offtarget = QtGui.QTreeWidgetItem(self.inp, ['Off-Target'])
        # self.opdb2pqr = QtGui.QTreeWidgetItem(self.offtarget, ['PDB2PQR'])
        # self.ofix = QtGui.QTreeWidgetItem(self.offtarget, ['Fix PDB'])
        # self.oprepare = QtGui.QTreeWidgetItem(self.offtarget, ['Prepare Receptor'])

        self.ligand = QtGui.QTreeWidgetItem(self.inp, ['Ligand'])
        # self.lpdb2pqr = QtGui.QTreeWidgetItem(self.ligand, ['Obabel'])
        # self.lprepare = QtGui.QTreeWidgetItem(self.ligand, ['Prepare Ligand'])

        self.ss = QtGui.QTreeWidgetItem(self.list_view, ['Search Space'])
        self.target = QtGui.QTreeWidgetItem(self.ss, ['Target'])
        # self.tgpf = QtGui.QTreeWidgetItem(self.target, ['Prepare GPF'])
        # self.tfix = QtGui.QTreeWidgetItem(self.target, ['Fix PDB'])
        # self.tprepare = QtGui.QTreeWidgetItem(self.target, ['Prepare Receptor'])

        self.offtarget = QtGui.QTreeWidgetItem(self.ss, ['Off-Target'])
        # self.opdb2pqr = QtGui.QTreeWidgetItem(self.offtarget, ['PDB2PQR'])
        # self.ofix = QtGui.QTreeWidgetItem(self.offtarget, ['Fix PDB'])
        # self.oprepare = QtGui.QTreeWidgetItem(self.offtarget, ['Prepare Receptor'])
        self.md = QtGui.QTreeWidgetItem(self.list_view, ['Docking'])
        self.target = QtGui.QTreeWidgetItem(self.md, ['Target'])
        self.offtarget = QtGui.QTreeWidgetItem(self.md, ['Off-Target'])




        font = QtGui.QFont('Courier New')
        # font.setPointSize(10)
        font.setKerning(False)
        self.textedit = QtGui.QTextEdit(self)
        self.textedit.setMinimumWidth(500)
        self.textedit.ensureCursorVisible()
        self.textedit.setLineWrapMode(QtGui.QTextEdit.NoWrap)
        self.textedit.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.textedit.setFont(font)
        self.textedit.setReadOnly(True)
        self.textedit.append('Welcome to AMDock\nVersion %s\n' % self.AMDock.version)
        self.textedit.append('AMDOCK: IP Defining Initial Parameters...')
        self.textedit.textChanged.connect(self.jump)
        # layout.addWidget(self.textedit)
        # self.parent.log_view.stateChanged.connect(lambda: self.ch_state(self.parent.log_view))
        # self.finished.connect(self.closed)
        # if self.parent.log_view.isChecked():
        #     self.show()

        # self.setLayout(layout)
        self.splitter.addWidget(self.list_view)
        self.splitter.addWidget(self.textedit)
        self.splitter.setStretchFactor(1, 10)

        self.setWidget(self.splitter)

    # def closed(self):
    #     self.parent.log_view.setChecked(False)
    def jump(self):
        self.textedit.verticalScrollBar().setValue(self.textedit.verticalScrollBar().maximum())

    def ch_state(self, st):
        if st.isChecked() == False:
            self.close()
        else:
            self.show()
