from PyQt4 import QtGui, QtCore
import os, Queue
from command_runner import PROCESS
from warning import reset_warning, amdock_file_warning
from variables import Variables
from rfile_show import Result_File

class Results(QtGui.QWidget):
    def __init__(self, parent=None):
        super(Results, self).__init__(parent)
        self.AMDock = parent
        self.setObjectName("result_tab")

        self.rfile_show = Result_File(self)
        # self.only_one = 0
        self.rfile_show.close()

        self.import_box = QtGui.QGroupBox(self)
        self.import_box.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.import_box.setObjectName("import_box")
        self.import_box.setTitle("Import")
        self.import_box.setToolTip(self.AMDock.result_tt)

        self.load_button = QtGui.QPushButton(self.import_box)
        self.load_button.setObjectName("load_button")
        self.load_button.setText("Load Data")

        self.import_text = QtGui.QLineEdit(self.import_box)
        self.import_text.setReadOnly(True)
        self.import_text.setObjectName("import_text")
        self.import_text.setPlaceholderText('*.amdock')

        self.show_rfile = QtGui.QPushButton(self.import_box)
        self.show_rfile.setObjectName("show_rfile")
        self.show_rfile.setText("Results File")

        self.import_layout = QtGui.QHBoxLayout(self.import_box)
        self.import_layout.addWidget(self.load_button)
        self.import_layout.addWidget(self.import_text, 1)
        self.import_layout.addWidget(self.show_rfile)

        self.data_box = QtGui.QGroupBox(self)
        self.data_box.setAlignment(QtCore.Qt.AlignCenter)
        self.data_box.setObjectName("data_box")
        self.data_box.setTitle("Data Result")
        self.prot_label = QtGui.QLabel('Target: ', self.data_box)
        self.prot_labelB = QtGui.QLabel('Off-Target: ', self.data_box)
        self.prot_labelB.hide()
        self.prot_label_sel = QtGui.QLabel(self)
        self.prot_label_sel.setAlignment(QtCore.Qt.AlignCenter)
        self.prot_label_sel.hide()

        self.prot_label_selB = QtGui.QLabel(self)
        self.prot_label_selB.setAlignment(QtCore.Qt.AlignCenter)
        self.prot_label_selB.hide()

        self.minus = QtGui.QLabel(self)
        self.minus.setText('-')
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.minus.setFont(font)
        self.minus.hide()

        self.equal = QtGui.QLabel(self)
        self.equal.setText('=')
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.equal.setFont(font)
        self.equal.hide()

        self.selectivity = QtGui.QLabel(self)
        self.selectivity.setText('Selectivity: ')
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.selectivity.setFont(font)
        self.selectivity.hide()

        self.selectivity_value_text = QtGui.QLabel(self)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.selectivity_value_text.setFont(font)
        self.selectivity_value_text.hide()

        self.sele1 = QtGui.QSpinBox(self)
        self.sele1.setRange(1, 10)
        self.sele1.setObjectName('sele1')
        self.sele1.hide()

        self.sele2 = QtGui.QSpinBox(self)
        self.sele2.setRange(1, 10)
        self.sele2.setObjectName('sele2')
        self.sele2.hide()

        self.sele1.valueChanged.connect(lambda: self.select_row(self.sele1))
        self.sele2.valueChanged.connect(lambda: self.select_row(self.sele2))

        self.result_table = QtGui.QTableWidget(self.data_box)
        self.result_table.setObjectName("result_table")
        self.result_table.setColumnCount(5)
        self.result_table.setHorizontalHeaderLabels(
            QtCore.QString("Pose;Affinity(kcal/mol);Estimated Ki;Ki Units;Ligand Efficiency").split(";"))
        self.result_table.horizontalHeader().setResizeMode(QtGui.QHeaderView.Stretch)
        self.result_table.verticalHeader().setVisible(False)
        self.result_table.sortItems(0, QtCore.Qt.AscendingOrder)
        # self.result_table.setSelectionBehavior(QtGui.QAbstractItemView.SelectRows)

        self.result_tableB = QtGui.QTableWidget(self.data_box)
        self.result_tableB.setObjectName("result_tableB")
        self.result_tableB.setColumnCount(5)
        self.result_tableB.setHorizontalHeaderLabels(
            QtCore.QString("Pose;Affinity(kcal/mol);Estimated Ki;Ki Units;Ligand Efficiency").split(";"))
        self.result_tableB.horizontalHeader().setResizeMode(QtGui.QHeaderView.Stretch)
        self.result_tableB.verticalHeader().setVisible(False)
        self.result_tableB.sortItems(0, QtCore.Qt.AscendingOrder)
        self.result_tableB.hide()
        # self.result_tableB.setSelectionBehavior(QtGui.QAbstractItemView.SelectRows)

        # self.best_button = QtGui.QPushButton(self)
        # self.best_button.setObjectName("best_button")
        # self.best_button.setText("Target Best Pose")
        # self.best_button.setFont(font)

        self.showinpymol = QtGui.QPushButton(self)
        self.showinpymol.setObjectName("showinpymol")
        self.showinpymol.setText("Show in PyMol")

        # self.best_buttonB = QtGui.QPushButton(self)
        # self.best_buttonB.setObjectName("best_buttonB")
        # self.best_buttonB.setText("Off-Target Best Pose")
        # self.best_buttonB.hide()

        # self.all_button = QtGui.QPushButton(self)
        # self.all_button.setObjectName("all_button")
        # self.all_button.setText("Target All Poses")

        # self.all_buttonB = QtGui.QPushButton(self)
        # self.all_buttonB.setObjectName("all_buttonB")
        # self.all_buttonB.setText("Off-Target All Poses")
        # self.all_buttonB.hide()

        # self.show_complex = QtGui.QPushButton(self)
        # self.show_complex.setObjectName("show_complex")
        # self.show_complex.setText("Show Complex")
        # self.show_complex.setFont(font)
        # self.show_complex.hide()

        self.new_button = QtGui.QPushButton(self)
        self.new_button.setObjectName("new_button")
        self.new_button.setText("New Project")
        self.new_button.setIcon(QtGui.QIcon(QtGui.QPixmap(self.AMDock.new_icon)))

        # self.back = QtGui.QPushButton('Back')

        self.current_pose = self.sele1.value()
        self.current_poseB = self.sele2.value()

        self.data_box_layout = QtGui.QVBoxLayout(self.data_box)
        self.data_box_layout.addWidget(self.prot_label)
        self.data_box_layout.addWidget(self.result_table)
        self.data_box_layout.addWidget(self.prot_labelB)
        self.data_box_layout.addWidget(self.result_tableB)

        self.spacer = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.rest_layout = QtGui.QGridLayout()

        self.rest_layout.addWidget(self.prot_label_sel, 0, 1)
        self.rest_layout.addWidget(self.prot_label_selB, 0, 3)
        self.rest_layout.addWidget(self.selectivity, 1, 0)
        self.rest_layout.addWidget(self.sele1, 1, 1)
        self.rest_layout.addWidget(self.minus, 1, 2, QtCore.Qt.AlignCenter)
        self.rest_layout.addWidget(self.sele2, 1, 3)
        self.rest_layout.addWidget(self.equal, 1, 4, QtCore.Qt.AlignCenter)
        self.rest_layout.addWidget(self.selectivity_value_text, 1, 5, QtCore.Qt.AlignCenter)
        # self.rest_layout.setColumnStretch(0, 1)
        # self.rest_layout.setColumnStretch(1, 1)
        # self.rest_layout.setColumnStretch(2, 1)
        # self.rest_layout.setColumnStretch(3, 1)
        # self.rest_layout.setColumnStretch(4, 1)
        # self.rest_layout.setColumnStretch(5, 1)
        # self.rest_layout.setColumnStretch(6, 5)

        self.buttons_layout = QtGui.QHBoxLayout()
        # self.buttons_layout.addWidget(self.show_complex)
        # self.buttons_layout.addWidget(self.best_button)
        self.buttons_layout.addWidget(self.showinpymol)
        # self.buttons_layout.addWidget(self.all_button)
        # self.buttons_layout.addStretch(1)
        # self.buttons_layout.addWidget(self.best_buttonB)
        # self.buttons_layout.addWidget(self.all_buttonB)
        self.buttons_layout.addStretch(10)
        # self.buttons_layout.addWidget(self.back)
        self.buttons_layout.addWidget(self.new_button)

        self.tab_layout = QtGui.QVBoxLayout(self)
        self.tab_layout.addWidget(self.import_box)
        self.tab_layout.addWidget(self.data_box, 4)
        self.tab_layout.addStretch(2)
        self.tab_layout.addLayout(self.rest_layout, 2)
        self.tab_layout.addLayout(self.buttons_layout, 1)

        self.new_button.clicked.connect(self.new_project)
        self.load_button.clicked.connect(self.load_file)
        # self.best_button.clicked.connect(lambda: self.show_best(self.best_button))
        self.showinpymol.clicked.connect(self.show_inPyMol)
        # self.all_button.clicked.connect(lambda: self.show_all(self.all_button))
        # self.best_buttonB.clicked.connect(lambda: self.show_best(self.best_buttonB))
        # self.all_buttonB.clicked.connect(lambda: self.show_all(self.all_buttonB))
        # self.show_complex.clicked.connect(self._show_complex)
        # self.back.clicked.connect(self.back_function)
        self.show_rfile.clicked.connect(self.show_result_file)

    def load_file(self):
        if self.AMDock.project.output:
            self.prot_opt = amdock_file_warning(self)
            if self.prot_opt == QtGui.QMessageBox.Yes:
                self.clear_result_tab()
            else:
                return
        self.amdock_load()
        self.AMDock.statusbar.showMessage(" Loading amdock file...", 2000)

    def amdock_load(self):
        elements = {0: 'Working Directory', 1: 'Input Directory', 2: 'Results Directory', 3: 'PDBQT of Target Protein',
                    4: 'All Poses File of Target Result', 5: 'Best Pose File of Target Result',
                    6: 'PDBQT of Off-Target Protein', 7: 'All Poses File of Off-Target Result',
                    8: 'Best Pose File of Off-Target Result'}
        elements_score = {0: 'Working Directory', 1: 'Input Directory', 2: 'Results Directory',
                          3: 'PDBQT of Target Protein', 4: 'PDBQT of Ligand'}
        self.AMDock.statusbar.showMessage(" Loading .amdock file...", 2000)
        # if self.
        self.data = self.AMDock.loader.load_amdock_file()
        if self.data:
            if self.AMDock.project.mode == 1:
                self.table1 = self.data[0]
                self.complete = self.data[1]
                self.table2 = self.data[2]
            else:
                self.table1 = self.data[0]
                self.complete = self.data[1]
            errlist = ''
            errlist2 = []
            if self.AMDock.project.mode != 2:
                for index in range(0, len(self.complete)):
                    if self.complete[index] == '1':
                        errlist += '\n-%s' % elements[index]
                if len(errlist) != 0:
                    QtGui.QMessageBox.critical(self, 'Error', 'Some files defined in .amdock file were not found or '
                                                              'they are inaccessible.\nMissing elements:%s' % errlist)
                    self.import_text.clear()
                    self.AMDock = Variables()
                else:
                    os.chdir(self.AMDock.project.results)
                    self.prot_label.setText('Target: %s' % self.AMDock.target.name)
                    self.prot_label_sel.setText('%s' % self.AMDock.target.name)
                    # self.best_button.setEnabled(True)
                    # self.all_button.setEnabled(True)

                    self.result_table.setRowCount(len(self.table1))
                    self.sele1.setRange(1, len(self.table1))
                    f = 0
                    for x in self.table1:
                        c = 0
                        for item in x:
                            item = str(item)
                            self.result_table.setItem(f, c, QtGui.QTableWidgetItem(item))
                            self.result_table.item(f, c).setTextAlignment(
                                QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                            if c == 4:
                                item_v = float(item)
                                if item_v <= -0.3:
                                    self.result_table.item(f, c).setBackgroundColor(
                                        QtGui.QColor(0, 255, 128, 200))
                            c += 1
                        f += 1
                    self.value1 = float(self.result_table.item(0, 1).text())
                    self.result_table.item(0, 1).setBackgroundColor(QtGui.QColor('darkGray'))

                    if self.AMDock.project.mode == 1:
                        self.prot_labelB.setText('Off-Target: %s' % self.AMDock.offtarget.name)
                        self.prot_label_selB.setText('%s' % self.AMDock.offtarget.name)
                        # self.best_button.setText('Target Best Pose')
                        # self.all_button.setText('All Poses + Target')
                        # self.best_buttonB.show()
                        # self.all_buttonB.show()
                        self.result_tableB.show()
                        self.selectivity_value_text.show()
                        self.selectivity.show()
                        self.sele1.show()
                        self.sele2.show()
                        self.prot_label_sel.show()
                        self.prot_label_selB.show()
                        self.minus.show()
                        self.equal.show()
                        self.prot_labelB.show()

                        self.result_tableB.setRowCount(len(self.table2))
                        self.sele2.setRange(1, len(self.table2))
                        f = 0
                        for x in self.table2:
                            c = 0
                            for item in x:
                                item = str(item)
                                self.result_tableB.setItem(f, c, QtGui.QTableWidgetItem(item))
                                self.result_tableB.item(f, c).setTextAlignment(
                                    QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                                if c == 4:
                                    item_v = float(item)
                                    if item_v <= -0.3:
                                        self.result_tableB.item(f, c).setBackgroundColor(
                                            QtGui.QColor(0, 255, 128, 200))
                                c += 1
                            f += 1
                            self.value2 = float(
                                self.result_tableB.item(0, 1).text())
                        self.result_tableB.item(0, 1).setBackgroundColor(QtGui.QColor('darkGray'))
                        self.selectivity_value = self.value1 - self.value2
                        self.selectivity_value_text.setText(
                            '%s kcal/mol' % self.selectivity_value)
            else:
                for index in range(0, len(self.complete)):
                    if self.complete[index] == '1':
                        errlist += '\n-%s' % elements_score[index]
                        errlist2.append(index)
                if len(errlist) != 0:
                    QtGui.QMessageBox.critical(self, 'Error', 'Some files defined in .amdock file were not found or '
                                                              'they are inaccessible.\nMissing elements:%s' % errlist)
                    self.import_text.clear()
                    # self.AMDock = Variables()
                else:
                    os.chdir(self.AMDock.project.results)
                    self.prot_label.setText('Target: %s' % self.AMDock.target.name)
                    # self.best_button.hide()
                    # self.all_button.hide()
                    # self.show_complex.show()

                    self.result_table.setRowCount(len(self.table1))
                    self.sele1.setRange(1, len(self.table1))
                    f = 0
                    for x in self.table1:
                        c = 0
                        for item in x:
                            item = str(item)
                            self.result_table.setItem(f, c, QtGui.QTableWidgetItem(item))
                            self.result_table.item(f, c).setTextAlignment(
                                QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                            if c == 4:
                                item_v = float(item)
                                if item_v <= -0.3:
                                    self.result_table.item(f, c).setBackgroundColor(
                                        QtGui.QColor(0, 255, 128, 200))
                            c += 1
                        f += 1
                    self.result_table.item(0, 1).setBackgroundColor(QtGui.QColor('darkGray'))

    def show_result_file(self):
        if self.AMDock.project.output:
            self.rfile_show.show()
            self.rfile_show.lineEdit.setText(self.AMDock.project.name)
            self.rfile_show.lineEdit_2.setText(os.path.normpath(self.AMDock.project.WDIR))
            self.rfile_show.lineEdit_3.setText(self.AMDock.docking_program)
            self.rfile_show.lineEdit_4.setText(self.AMDock.ligand.name)
            self.rfile_show.lineEdit_5.setText(self.AMDock.target.name)
            print self.AMDock.target.het, self.AMDock.target.zn_atoms
            self.rfile_show.lineEdit_6.setText(str(self.AMDock.target.het))
            self.rfile_show.lineEdit_7.setText(str(self.AMDock.target.zn_atoms))
            if not self.AMDock.project.mode == 2:
                if self.AMDock.docking_program == 'AutoDock Vina':
                    self.rfile_show.lineEdit_8.setText(self.AMDock.target.vina_all)
                    self.rfile_show.lineEdit_9.setText(self.AMDock.target.vina_best)
                else:
                    self.rfile_show.lineEdit_8.setText(self.AMDock.target.ad4_all)
                    self.rfile_show.lineEdit_9.setText(self.AMDock.target.ad4_best)
            if self.AMDock.project.mode == 0:
                self.rfile_show.mode_label.setText('SIMPLE')
            elif self.AMDock.project.mode == 1:
                self.rfile_show.mode_label.setText('OFF-TARGET')
            else:
                self.rfile_show.mode_label.setText('SCORING')
            # if self.AMDock.v.analog_protein_name != 'protein B':
            self.rfile_show.lineEdit_10.setText(str(self.AMDock.offtarget.name))
            self.rfile_show.lineEdit_11.setText(str(self.AMDock.offtarget.het))
            self.rfile_show.lineEdit_12.setText(str(self.AMDock.offtarget.zn_atoms))
            if not self.AMDock.project.mode == 2:
                if self.AMDock.docking_program == 'AutoDock Vina':
                    self.rfile_show.lineEdit_13.setText(str(self.AMDock.offtarget.vina_all))
                    self.rfile_show.lineEdit_14.setText(str(self.AMDock.offtarget.vina_best))
                else:
                    self.rfile_show.lineEdit_13.setText(str(self.AMDock.offtarget.ad4_all))
                    self.rfile_show.lineEdit_14.setText(str(self.AMDock.offtarget.ad4_best))
        else:
            QtGui.QMessageBox.information(self, 'Information',
                                          'The amdock file is not defined yet. Please define amdock file.',
                                          QtGui.QMessageBox.Ok)

    def new_project(self):
        if self.AMDock.program_body.reset_function():

        # reset_opt = reset_warning(self)
        # if reset_opt == QtGui.QMessageBox.Yes:
            # self.AMDock.main_window.setTabEnabled(0, True)
            # self.AMDock.main_window.setCurrentIndex(0)
            # self.AMDock.main_window.setTabEnabled(2, False)
            # self.AMDock.program_body.project_text.setEnabled(True)
            # self.AMDock.program_body.wdir_button.setEnabled(True)
            # self.AMDock.program_body.project_text.clear()
            # self.AMDock.program_body.project_box.setEnabled(True)
            # self.AMDock.program_body.wdir_text.clear()
            # self.AMDock.program_body.input_box.setEnabled(False)
            # self.AMDock.program_body.target_text.clear()
            # self.AMDock.program_body.target_label.clear()
            # self.AMDock.program_body.offtarget_text.clear()
            # self.AMDock.program_body.offtarget_label.clear()
            # self.AMDock.program_body.ligand_text.clear()
            # self.AMDock.program_body.ligand_label.clear()
            # self.AMDock.program_body.grid_box.setEnabled(False)
            # self.AMDock.program_body.btnA_auto.setChecked(True)
            # self.AMDock.program_body.btnB_auto.setChecked(True)
            # self.AMDock.program_body.progressBar_global.setValue(0)
            # self.AMDock.program_body.run_button.setEnabled(False)
            # self.AMDock.program_body.stop_button.setEnabled(False)
            # self.AMDock.program_body.reset_button.setEnabled(True)
            # self.AMDock.program_body.bind_site_button.setEnabled(True)
            self.prot_label.setText('Target: ')
            self.prot_labelB.setText('Off-Target: ')
            # self.AMDock.program_body.simple_docking.setChecked(True)
            # self.AMDock.program_body.run_scoring.hide()
            # self.AMDock.program_body.non_button.hide()
            # self.all_button.show()
            # self.best_button.show()
            # self.back.setEnabled(True)
            # self.show_complex.hide()
            try:
                self.AMDock.output2file.conclude()
            except:
                pass
            try:
                os.chdir(self.AMDock.loc_project)
            except:
                pass


            # self.AMDock.configuration_tab.initial_config()
            self.clear_result_tab()
            try:
                self.bestw.__del__()
            except:
                pass
            try:
                self.bestwB.__del__()
            except:
                pass
            try:
                self.allw.__del__()
            except:
                pass
            try:
                self.allwB.__del__()
            except:
                pass
            try:
                self.complexw.__del__()
            except:
                pass

            # self.AMDock.program_body.grid_icon.hide()
            # self.AMDock.program_body.grid_iconB.hide()
            # self.AMDock.program_body.grid_icon_ok.hide()
            # self.AMDock.program_body.grid_icon_okB.hide()
            # self.AMDock.program_body.checker_icon.hide()
            # self.AMDock.program_body.checker_iconB.hide()
            # self.AMDock.program_body.checker_icon_ok.hide()
            # self.AMDock.program_body.checker_icon_okB.hide()
            # self.AMDock.program_body.lig_list.clear()
            # self.AMDock.program_body.lig_list.hide()
            # self.AMDock.program_body.lig_listB.clear()
            # self.AMDock.program_body.lig_listB.hide()
            self.AMDock.log_widget.textedit.append(80 * '#')
            self.AMDock.log_widget.textedit.append('AMDOCK: NEW PROJECT...\n\n')

    def clear_result_tab(self):
        self.import_text.clear()
        self.result_table.clearContents()
        # self.result_table.setRowCount(0)
        self.result_tableB.clearContents()
        self.result_tableB.hide()
        self.selectivity.hide()
        self.sele1.hide()
        self.sele2.hide()
        self.minus.hide()
        self.equal.hide()
        self.import_text.clear()
        self.selectivity_value_text.hide()
        self.prot_label_sel.hide()
        self.prot_label_selB.hide()
        self.prot_labelB.hide()
        # self.best_buttonB.hide()
        # self.all_buttonB.hide()
        # self.show_complex.hide()
        # self.best_button.show()
        # self.all_button.show()

    def show_inPyMol(self):
        # check if exist items
        poses = {'target': [], 'offtarget': []}
        for titem in self.result_table.selectedItems():
            if not titem.row() + 1 in poses['target']:
                poses['target'].append(titem.row() + 1)


        for oitem in self.result_tableB.selectedItems():
            if not oitem.row() + 1 in poses['offtarget']:
                poses['offtarget'].append(oitem.row() + 1)
        # makes at least one selected item always exist
        if not len(self.result_table.selectedItems() + self.result_tableB.selectedItems()):
            poses['target'] = [1]
            selection_model = self.result_table.selectionModel()
            selection_model.select(self.result_table.model().index(0, 0), QtGui.QItemSelectionModel.ClearAndSelect)

        visual_arg = [self.AMDock.pymol, self.AMDock.lig_site_pymol, '--']

        if poses['target']:
            poses['target'].sort()
            target_arg = '%s,Target,' % os.path.join(self.AMDock.project.input,self.AMDock.target.pdb)
            ligands = ''
            c = 1
            for num in poses['target']:
                ligands += '%s_%s_out%02d.pdb' % (self.AMDock.ligand.name, self.AMDock.target.name, num)
                if c < len(poses['target']):
                    ligands += ','
                    c += 1
            target_arg += ligands
            visual_arg.append(target_arg)

        if poses['offtarget']:
            poses['offtarget'].sort()
            offtarget_arg = '%s,Off-Target,'% os.path.join(self.AMDock.project.input,self.AMDock.offtarget.pdb)
            ligands = ''
            c = 1
            for num in poses['offtarget']:
                ligands += '%s_%s_out%02d.pdb' % (self.AMDock.ligand.name, self.AMDock.offtarget.name, num)
                if c < len(poses['offtarget']):
                    ligands += ','
                    c += 1
            offtarget_arg += ligands
            visual_arg.append(offtarget_arg)

        print visual_arg
        self.best_pymol = {'PyMol': [self.AMDock.this_python, visual_arg]}
        self.bestw = PROCESS()
        self.bestw.state.connect(self.AMDock.program_body.check_state)
        bestq = Queue.Queue()
        bestq.name = -3
        bestq.put(self.best_pymol)
        self.bestw.set_queue(bestq)
        self.bestw.start_process()
        #
        # else:
        #     visual_arg = [self.AMDock.pymol, os.path.join(self.AMDock.project.results, self.AMDock.offtarget.best_pose),
        #                       self.AMDock.lig_site_pymol]
        #     self.best_pymolB = {'Pymol': [self.AMDock.this_python, visual_arg]}
        #     self.bestwB = PROCESS()
        #     self.bestwB.state.connect(self.AMDock.program_body.check_state)
        #     bestqB = Queue.Queue()
        #     bestqB.name = -3
        #     bestqB.put(self.best_pymolB)
        #     self.bestwB.set_queue(bestqB)
        #     self.bestwB.start_process()

    # def show_all(self, b):
    #     if b.objectName() == 'all_button':
    #         print self.result_table.selectedItems()
    #         visual_arg = [self.AMDock.pymol, os.path.join(self.AMDock.project.input, self.AMDock.target.pdbqt),
    #                           os.path.join(self.AMDock.project.results, self.AMDock.target.all_poses),
    #                           self.AMDock.protein_cartoon_pymol]
    #         self.all_pymol = {'Pymol': [self.AMDock.this_python, visual_arg]}
    #         self.allw = PROCESS()
    #         self.allw.state.connect(self.AMDock.program_body.check_state)
    #         allq = Queue.Queue()
    #         allq.name = -4
    #         allq.put(self.all_pymol)
    #         self.allw.set_queue(allq)
    #         self.allw.start_process()
    #     else:
    #         visual_arg = [self.AMDock.pymol, os.path.join(self.AMDock.project.input, self.AMDock.offtarget.pdbqt),
    #                           os.path.join(self.AMDock.project.results, self.AMDock.offtarget.all_poses),
    #                           self.AMDock.protein_cartoon_pymol]
    #         self.all_pymolB = {'Pymol': [self.AMDock.this_python, visual_arg]}
    #         self.allwB = PROCESS()
    #         self.allwB.state.connect(self.AMDock.program_body.check_state)
    #         allqB = Queue.Queue()
    #         allqB.name = -4
    #         allqB.put(self.all_pymolB)
    #         self.allwB.set_queue(allqB)
    #         self.allwB.start_process()

    # def _show_complex(self):
    #     visual_arg = [self.AMDock.pymol, os.path.join(self.AMDock.project.input, self.AMDock.target.pdbqt),
    #                   os.path.join(self.AMDock.project.input, self.AMDock.ligand_pdbqt),
    #                   self.AMDock.protein_cartoon_pymol]
    #     self.complex_pymol = {'Pymol': [self.AMDock.this_python, visual_arg]}
    #     self.complexw = Worker()
    #     self.complexw.readyReadStandardOutput.connect(self.AMDock.program_body.readStdOutput)
    #     self.complexw.readyReadStandardError.connect(self.AMDock.program_body.readStdError)
    #     self.complexw.prog_started.connect(self.AMDock.program_body.prog_show)
    #     self.complexw.queue_finished.connect(self.AMDock.program_body.check_queue)
    #     self.complexq = Queue.Queue()
    #     self.complexq.put(self.complex_pymol)
    #     self.complexw.init(self.complexq, 'Visualization')
    #     self.complexw.start_process()

    def select_row(self, sele):
        if sele.objectName() == 'sele1':
            self.result_table.item(self.current_pose - 1, 1).setBackgroundColor(QtGui.QColor('white'))
            self.current_pose = sele.value()
            self.result_table.item(self.current_pose - 1, 1).setBackgroundColor(QtGui.QColor('darkGray'))
            self.value1 = float(self.result_table.item(self.current_pose - 1, 1).text())
        else:
            self.result_tableB.item(self.current_poseB - 1, 1).setBackgroundColor(QtGui.QColor('white'))
            self.current_poseB = sele.value()
            self.result_tableB.item(self.current_poseB - 1, 1).setBackgroundColor(QtGui.QColor('darkGray'))
            self.value2 = float(self.result_tableB.item(self.current_poseB - 1, 1).text())
        self.selectivity_value = self.value1 - self.value2
        self.selectivity_value_text.setText('%s kcal/mol' % self.selectivity_value)

    # def back_function(self):
    #     msg = QtGui.QMessageBox.warning(self.AMDock, 'Warning', 'You are trying to return to the previous page. If '
    #                                                             'you accept, all data in the table (s) will be '
    #                                                             'deleted. Do you wish to continue?',
    #                                     QtGui.QMessageBox.Yes | QtGui.QMessageBox.No)
    #     if msg == QtGui.QMessageBox.No:
    #         # id.setChecked(False)
    #         return
    #     self.clear_result_tab()
    #     os.chdir(self.AMDock.project.input)
    #     self.prot_label.setText('Target: ')
    #     self.prot_labelB.setText('Off-Target: ')
    #     self.AMDock.main_window.setCurrentIndex(1)
    #     self.AMDock.main_window.setTabEnabled(1, True)
    #     self.AMDock.main_window.setTabEnabled(2, False)
    #     self.AMDock.section = 2
    #     self.AMDock.program_body.progressBar_global.setValue(70)
    