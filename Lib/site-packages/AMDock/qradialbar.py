from PyQt4 import QtCore, QtGui

class QRadialBar(QtGui.QWidget):
    def __init__(self, parent=None):
        super(QRadialBar, self).__init__(parent)

        self.setFixedSize(200, 200)

        self.min_value = 0
        self.max_value = 100
        self.value = 0

        self.dialwidth = 15

        self._BackgroundColor = QtCore.Qt.transparent
        self._DialColor = QtGui.QColor('#D1FFED')
        self._ProgressColor = QtGui.QColor('blue')
        self._TextColor = QtGui.QColor('black')
        self._SuffixText = "%"
        self._ShowText = True
        self._PenStyle = QtCore.Qt.FlatCap
        self._TextFont = QtGui.QFont()

    def paintEvent(self, event):

        # painter.save() # avoid warning in PyQt4
        r = min(self.width(), self.height())
        painter = QtGui.QPainter(self)
        painter.setRenderHint(QtGui.QPainter.Antialiasing)
        rect = QtCore.QRectF(0, 0, r - 2, r - 2) #self.boundingRect()

        pen = painter.pen()
        pen.setCapStyle(QtCore.Qt.FlatCap) # rounded border

        painter.setPen(QtGui.QPen(self.palette().shadow().color(), 1))
        painter.setBrush(self.palette().window())
        painter.drawEllipse(rect)

        startAngle = 90
        # if RadialBar.DialType.FullDial != self._DialType:
        #     spanAngle = 0 - self._SpanAngle
        # else:
        spanAngle = -360

        #Draw outer dial
        painter.save()
        pen.setWidth(self.dialwidth)
        pen.setColor(self._DialColor)
        painter.setPen(pen)
        offset = self.dialwidth / 2
        # if self._DialType == RadialBar.DialType.MinToMax:
        #     painter.drawArc(rect.adjusted(offset, offset, -offset, -offset), startAngle * 16, spanAngle * 16)
        # elif self._DialType == RadialBar.DialType.FullDial:
        painter.drawArc(rect.adjusted(offset, offset, -offset, -offset), -90 * 16, -360 * 16)
        # else:
        #     pass
            #do not draw dial

        painter.restore()

        #Draw background
        painter.save()
        painter.setBrush(self._BackgroundColor)
        painter.setPen(self._BackgroundColor)
        inner = offset * 2
        painter.drawEllipse(rect.adjusted(inner, inner, -inner, -inner))
        painter.restore()

        #Draw progress text with suffix
        painter.save()
        painter.setFont(self._TextFont)
        pen.setColor(self._TextColor)
        painter.setPen(pen)
        if self._ShowText:
            painter.drawText(rect.adjusted(offset, offset, -offset, -offset), QtCore.Qt.AlignCenter,str(self.value) + self._SuffixText)
        else:
            painter.drawText(rect.adjusted(offset, offset, -offset, -offset), QtCore.Qt.AlignCenter, self._SuffixText)
        painter.restore()

        #Draw progress bar
        painter.save()
        pen.setWidth(self.dialwidth)
        pen.setColor(self._ProgressColor)
        valueAngle = float(float(self.value - self.min_value)/float(self.max_value - self.min_value)) * float(spanAngle)  #Map value to angle range
        painter.setPen(pen)
        painter.drawArc(rect.adjusted(offset, offset, -offset, -offset), startAngle * 16, valueAngle * 16)
        painter.restore()

    @QtCore.pyqtSlot(float)
    def setValue(self, value):
        if self.value == value:
            return
        if value < self.min_value:
            self.value = self.min_value
        elif value > self.max_value:
            self.value = self.max_value
        else:
            self.value = value
        self.update()

    # @QtCore.pyqtProperty(str, notify=sizeChanged)
    # def size(self):
    #     return self._Size
    #
    # @size.setter
    # def size(self, size):
    #     if self._Size == size:
    #         return
    #     self._Size = size
    #     self.sizeChanged.emit()
    #     self.update()

    # @QtCore.pyqtProperty(int, notify=spanAngleChanged)
    # def spanAngle(self):
    #     return self._SpanAngle
    #
    # @spanAngle.setter
    # def spanAngle(self, angle):
    #     if self._SpanAngle == angle:
    #         return
    #     self._SpanAngle = angle
    #     self.spanAngleChanged.emit()
    #     self.update()
    #
    # @QtCore.pyqtProperty(int, notify=minValueChanged)
    # def minValue(self):
    #     return self._MinValue
    #
    # @minValue.setter
    # def minValue(self, value):
    #     if self._MinValue == value:
    #         return
    #     self._MinValue = value
    #     self.minValueChanged.emit()
    #     self.update()
    #
    # @QtCore.pyqtProperty(int, notify=maxValueChanged)
    # def maxValue(self):
    #     return self._MaxValue
    #
    # @maxValue.setter
    # def maxValue(self, value):
    #     if self._MaxValue == value:
    #         return
    #     self._MaxValue = value
    #     self.maxValueChanged.emit()
    #     self.update()

    # @QtCore.pyqtProperty(float, notify=valueChanged)
    # def value(self):
    #     return self._Value
    #
    # @value.setter
    # def value(self, value):
    #     if self._Value == value:
    #         return
    #     self._Value = value
    #     self.valueChanged.emit()
    #     self.update()

    #
    # @QtCore.pyqtProperty(str, notify=suffixTextChanged)
    # def suffixText(self):
    #     return self._SuffixText
    #
    # @suffixText.setter
    # def suffixText(self, text):
    #     if self._SuffixText == text:
    #         return
    #     self._SuffixText = text
    #     self.suffixTextChanged.emit()
    #     self.update()
    #
    # @QtCore.pyqtProperty(str, notify=showTextChanged)
    # def showText(self):
    #     return self._ShowText
    #
    # @showText.setter
    # def showText(self, show):
    #     if self._ShowText == show:
    #         return
    #     self._ShowText = show
    #     self.update()

    # @QtCore.pyqtProperty(QtCore.Qt.PenCapStyle, notify=penStyleChanged)
    # def penStyle(self):
    #     return self._PenStyle
    #
    # @penStyle.setter
    # def penStyle(self, style):
    #     if self._PenStyle == style:
    #         return
    #     self._PenStyle = style
    #     self.penStyleChanged.emit()
    #     self.update()

    # @QtCore.pyqtProperty(int, notify=dialTypeChanged)
    # def dialType(self):
    #     return self._DialType
    #
    # @dialType.setter
    # def dialType(self, type):
    #     if self._DialType == type:
    #         return
    #     self._DialType = type
    #     self.dialTypeChanged.emit()
    #     self.update()
    #
    # @QtCore.pyqtProperty(QtGui.QFont, notify=textFontChanged)
    # def textFont(self):
    #     return self._TextFont
    #
    # @textFont.setter
    # def textFont(self, font):
    #     if self._TextFont == font:
    #         return
    #     self._TextFont = font
    #     self.textFontChanged.emit()
    #     self.update()


if __name__ == '__main__':
    import sys
    app = QtGui.QApplication(sys.argv)
    w = QRadialBar()

    timeline = QtCore.QTimeLine(10000, w)
    timeline.setFrameRange(0, 100)
    timeline.frameChanged.connect(lambda val: w.setValue(val/3.1))
    timeline.start()
    w.show()
    sys.exit(app.exec_())