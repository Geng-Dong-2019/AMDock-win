import os, time, shutil, math, Queue, re
from PyQt4 import QtGui
from warning import wdir_warning, same_protein, wdir3_warning, wdir2_warning
from tools import PDBMap, HeavyAtoms, Gyrate, Converter, ClearAndFix
import subprocess
from some_slots import progress
from command_runner import Worker
import pybel


class Loader():
    def __init__(self, parent=None):
        # QtGui.QMainWindow.__init__(parent)
        self.AMDock = parent

    def copy_target(self):
        try:
            shutil.copy('%s' % self.AMDock.program_body.target.path, self.t_input)
            self.AMDock.program_body.target.input = self.t_input
        except:
            nowdir = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'The working directory was not found or '
                                                              'it does not have permission for writing.'
                                                              '\nPlease reset the program.',
                                                QtGui.QMessageBox.Retry | QtGui.QMessageBox.Cancel)
            if nowdir == QtGui.QMessageBox.Retry:
                self.copy_target()
            else:
                return False
        return True
    def copy_offtarget(self):
        try:
            shutil.copy('%s' % self.AMDock.program_body.offtarget.path, self.o_input)
            self.AMDock.program_body.offtarget.input = self.o_input
        except:
            nowdir = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'The working directory was not found or '
                                                              'it does not have permission for writing.'
                                                              '\nPlease reset the program.',
                                                QtGui.QMessageBox.Retry | QtGui.QMessageBox.Cancel)
            if nowdir == QtGui.QMessageBox.Retry:
                self.copy_offtarget()
            else:
                return False
        return True

    def copy_ligand(self):
        try:
            shutil.copy('%s' % self.AMDock.program_body.ligand.path, self.l_input)
            self.AMDock.program_body.ligand.input = self.l_input
        except:
            nowdir = QtGui.QMessageBox.critical(self.AMDock, 'Error', 'The working directory was not found or '
                                                              'it does not have permission for writing.'
                                                              '\nPlease reset the program.',
                                                QtGui.QMessageBox.Retry | QtGui.QMessageBox.Cancel)
            if nowdir == QtGui.QMessageBox.Retry:
                self.copy_ligand()
            else:
                return False
        return True

    def create_project_function(self):
        if self.AMDock.program_body.project_text.text() != '':
            self.AMDock.project_name = str(self.AMDock.program_body.project_text.text())
        try:
            os.chdir(self.AMDock.loc_project)
        except:
            wdir_warning(self.AMDock)
        if os.path.exists(self.AMDock.project_name):
            rt = wdir3_warning(self.AMDock)
            if rt == QtGui.QMessageBox.Yes:
                try:
                    os.rename(self.AMDock.project_name, self.AMDock.project_name + '_old_' + "%s-%s-%s-%s-%s-%s"
                      % time.localtime(os.path.getmtime(self.AMDock.project_name))[0:6])
                except:
                    #TODO: add exception
                    wdir_warning()
            else:
                self.AMDock.loc_project = None
                self.AMDock.program_body.project_text.clear()
                # self.AMDock.program_body.create_project.setEnabled(False)

        try:
            os.mkdir(self.AMDock.project_name)
            self.AMDock.WDIR = os.path.join(self.AMDock.loc_project, self.AMDock.project_name)
            os.chdir(self.AMDock.WDIR)
            os.mkdir('input')
            os.mkdir('results')
            self.AMDock.program_body.input_box.setEnabled(True)
            progress(self.AMDock.program_body, 0, 1, 2, finish=True, mess='Working Directory Definition...')
            self.AMDock.statusbar.showMessage("Create project: %s" % self.AMDock.WDIR, 10000)
            self.AMDock.input_dir = os.path.join(self.AMDock.WDIR, 'input')
            self.AMDock.result_dir = os.path.join(self.AMDock.WDIR, 'results')
            self.AMDock.output2file.file_header(
                    os.path.join(self.AMDock.WDIR, self.AMDock.project_name + '.amdock'))
            self.AMDock.output2file.out2file('>> PROJECT_NAME: %s\n' % self.AMDock.project_name)
            self.AMDock.output2file.out2file('>> WORKING_DIRECTORY: %s\n' % os.path.normpath(self.AMDock.WDIR))
            return True
        except:
            wdir_warning(self.AMDock)
            self.AMDock.loc_project = None
            self.AMDock.program_body.project_text.setDisabled(False)
            return False

    def project_location(self):
        data_file = QtGui.QFileDialog()
        data_file.setFileMode(QtGui.QFileDialog.DirectoryOnly)
        if data_file.exec_():
            # self.AMDock.program_body.project_text.setDisabled(True)
            #### when pressed location button, it is create a folder tree
            filenames = data_file.selectedFiles()
            self.AMDock.loc_project = str(filenames[0])



        return self.AMDock.loc_project

    def load_protein(self):
        data_file = QtGui.QFileDialog()
        data_file.setFileMode(QtGui.QFileDialog.AnyFile)
        data_file.setFilter("Protein Data Bank (*.pdb *.ent *.pdbqt)")

        if data_file.exec_():
            filenames = data_file.selectedFiles()
            self.AMDock.program_body.target.get_data(filenames)

            if self.AMDock.program_body.target.name == self.AMDock.program_body.offtarget.name:
                self.same = same_protein(self, 'Target Protein', self.AMDock.program_body.target.name, 'Off-Target Protein')
                if self.same == QtGui.QMessageBox.Ok:
                    self.AMDock.program_body.target_text.clear()
                    self.AMDock.program_body.target_label.clear()
                    self.load_protein()
            elif self.AMDock.program_body.target.name == self.AMDock.program_body.ligand.name:
                self.same = same_protein(self, 'Target Protein', self.AMDock.program_body.target.name, 'Ligand')
                if self.same == QtGui.QMessageBox.Ok:
                    self.AMDock.program_body.target_text.clear()
                    self.AMDock.program_body.target_label.clear()
                    self.load_protein()
            else:
                self.AMDock.program_body.target_label.setText('Loaded Target Protein from: %s' % self.AMDock.program_body.target.path)
                self.AMDock.program_body.target_text.setText(os.path.basename(self.AMDock.program_body.target.path))

                self.t_input = os.path.join(self.AMDock.input_dir, self.AMDock.program_body.target.name + '.' + self.AMDock.program_body.target.ext)

                if not self.copy_target():
                    self.AMDock.program_body.target_text.clear()
                    self.AMDock.program_body.target_label.clear()
                    self.load_protein()
                else:
                    return self.AMDock.program_body.target
        #         # TODO: cambiar esto a preparar input
        #         os.chdir(self.AMDock.input_dir)
        #
        #         self.AMDock.protein = PDBMap(self.target_path)
        #         try:
        #             self.AMDock.ligands = self.AMDock.protein.count_molecules()['ligands']
        #
        #             if self.target_ext == 'pdbqt':
        #                 elim_lig = QtGui.QMessageBox.warning(self.AMDock., 'Warning',
        #                                                      'The pdbqt file selected have a ligand.\n Do you wish to eliminate it?',
        #                                                      QtGui.QMessageBox.Yes | QtGui.QMessageBox.No)
        #                 if elim_lig == QtGui.QMessageBox.Yes:
        #                     ClearAndFix(self.AMDock.input_target).write()
        #                     self.AMDock.ligands = None
        #         except:
        #             pass
        #         try:
        #             self.AMDock.metals = self.AMDock.protein.count_molecules()['metals']
        #         except:
        #             pass
        #         os.chdir(self.AMDock.loc_project)
        #         ###lista de ligandos
        #         if self.AMDock.ligands != None:
        #             for x in self.AMDock.ligands:
        #                 self.AMDock.program_body.lig_list.addItem('%s:%s:%s' % x)
        #             self.AMDock.selected_ligand = self.AMDock.program_body.lig_list.currentText()
        #         else:
        #             if self.AMDock.cr:
        #                 if self.AMDock.analog_ligands == None:
        #                     self.AMDock.program_body.grid_by_lig_cr.setEnabled(False)
        #                 else:
        #                     self.AMDock.program_body.grid_by_lig_cr.setEnabled(True)
        #         if self.AMDock.cr:
        #             if self.AMDock.input_lig is None and self.AMDock.input_target is None:
        #                 progress(self.AMDock.program_body, 0, 0, 5, finish=True, mess='Target Definition...')
        #                 self.AMDock.program_body.prep_rec_lig_button.setEnabled(False)
        #                 self.AMDock.program_body.wdir_button.setEnabled(True)
        #             elif self.AMDock.input_lig is None and self.AMDock.input_target is not None:
        #                 progress(self.AMDock.program_body, 0, 0, 8, finish=True, mess='Target Definition...')
        #                 self.AMDock.program_body.prep_rec_lig_button.setEnabled(False)
        #                 self.AMDock.program_body.wdir_button.setEnabled(True)
        #             elif self.AMDock.input_lig is not None and self.AMDock.input_target is None:
        #                 progress(self.AMDock.program_body, 0, 0, 7, finish=True, mess='Target Definition...')
        #                 self.AMDock.program_body.prep_rec_lig_button.setEnabled(False)
        #                 self.AMDock.program_body.wdir_button.setEnabled(True)
        #             else:
        #                 progress(self.AMDock.program_body, 0, 0, 10, finish=True, mess='Target Definition...')
        #                 self.AMDock.program_body.prep_rec_lig_button.setEnabled(True)
        #                 self.AMDock.program_body.wdir_button.setEnabled(False)
        #         else:
        #             if self.AMDock.input_lig is not None:
        #                 progress(self.AMDock.program_body, 0, 0, 10, finish=True, mess='Protein Definition...')
        #                 self.AMDock.program_body.prep_rec_lig_button.setEnabled(True)
        #                 self.AMDock.program_body.wdir_button.setEnabled(False)
        #             else:
        #                 progress(self.AMDock.program_body, 0, 0, 6, finish=True, mess='Protein Definition...')
        #                 self.AMDock.program_body.prep_rec_lig_button.setEnabled(False)
        #                 self.AMDock.program_body.wdir_button.setEnabled(True)
        #     try:
        #         if self.AMDock.prot_align and self.target_ext in ['pdb', 'ent'] and self.offtarget_ext in ['pdb',
        #                                                                                                    'ent']:
        #             aln = subprocess.Popen([self.AMDock.ws.pymol, '-c', self.AMDock.ws.aln_pymol, '--', '-t',
        #                                     self.target_name + '.' + self.target_ext, '-o',
        #                                     self.offtarget_name + '.' + self.offtarget_ext], stdin=subprocess.PIPE,
        #                                    stdout=subprocess.PIPE)
        #             aln.wait()
        #     except:
        #         pass
        # return self.target_path

    def load_proteinB(self):
        data_file = QtGui.QFileDialog()
        data_file.setFileMode(QtGui.QFileDialog.AnyFile)
        data_file.setFilter("Protein Data Bank (*.pdb *.ent *.pdbqt)")
        if data_file.exec_():
            filenames = data_file.selectedFiles()
            self.AMDock.program_body.offtarget.get_data(filenames)

            if self.AMDock.program_body.offtarget.name == self.AMDock.program_body.target.name:
                self.same = same_protein(self, 'Off-Target Protein', self.AMDock.program_body.offtarget.name, 'Target Protein')
                if self.same == QtGui.QMessageBox.Ok:
                    self.AMDock.program_body.offtarget_text.clear()
                    self.AMDock.program_body.offtarget_label.clear()
                    self.load_proteinB()
            elif self.AMDock.program_body.offtarget.name == self.AMDock.program_body.ligand.name:
                self.same = same_protein(self, 'Off-Target Protein', self.AMDock.program_body.offtarget.name, 'Ligand')
                if self.same == QtGui.QMessageBox.Ok:
                    self.AMDock.program_body.offtarget_text.clear()
                    self.AMDock.program_body.offtarget_label.clear()
                    self.load_proteinB()
            else:
                self.AMDock.program_body.offtarget_label.setText('Loaded Off-Target from: %s' % self.offtarget_path)
                self.AMDock.program_body.offtarget_text.setText(os.path.basename(self.AMDock.program_body.offtarget.path))

                self.o_input = os.path.join(self.AMDock.input_dir, self.AMDock.program_body.offtarget.name + '.' + self.AMDock.program_body.offtarget.ext)

                if not self.copy_target():
                    self.AMDock.program_body.offtarget_text.clear()
                    self.AMDock.program_body.offtarget_label.clear()
                    self.load_proteinB()
        #         # TODO: cambiar esto a preparar input
        #         os.chdir(self.AMDock.input_dir)
        #         self.AMDock.analog_protein = PDBMap(self.offtarget_path)
        #         try:
        #             self.AMDock.analog_ligands = self.AMDock.analog_protein.count_molecules()['ligands']
        #             if self.offtarget_ext == 'pdbqt':
        #                 elim_lig = QtGui.QMessageBox.warning(self.AMDock., 'Warning',
        #                                                      'The pdbqt file selected have a ligand.\n'
        #                                                      ' Do you wish to eliminate it?',
        #                                                      QtGui.QMessageBox.Yes | QtGui.QMessageBox.No)
        #                 if elim_lig == QtGui.QMessageBox.Yes:
        #                     ClearAndFix(self.AMDock.input_offtarget).write()
        #                     self.AMDock.analog_ligands = None
        #         except:
        #             pass
        #         try:
        #             self.AMDock.analog_metals = self.AMDock.analog_protein.count_molecules()['metals']
        #         except:
        #             pass
        #         os.chdir(self.AMDock.loc_project)
        #         ###lista de ligandos
        #         if self.AMDock.analog_ligands != None:
        #             for x in self.AMDock.analog_ligands:
        #                 self.AMDock.program_body.lig_listB.addItem('%s:%s:%s' % x)
        #             self.AMDock.analog_selected_ligand = self.AMDock.program_body.lig_listB.currentText()
        #
        #         if self.AMDock.input_lig is None and self.AMDock.input_offtarget is None:
        #             progress(self.AMDock.program_body, 0, 0, 5, finish=True, mess='Target Definition...')
        #             self.AMDock.program_body.prep_rec_lig_button.setEnabled(False)
        #             self.AMDock.program_body.wdir_button.setEnabled(True)
        #         elif self.AMDock.ligand_path == '' and self.AMDock.input_offtarget is not None:
        #             progress(self.AMDock.program_body, 0, 0, 8, finish=True, mess='Target Definition...')
        #             self.AMDock.program_body.prep_rec_lig_button.setEnabled(False)
        #             self.AMDock.program_body.wdir_button.setEnabled(True)
        #         elif self.AMDock.ligand_path != '' and self.AMDock.input_offtarget is None:
        #             progress(self.AMDock.program_body, 0, 0, 7, finish=True, mess='Target Definition...')
        #             self.AMDock.program_body.prep_rec_lig_button.setEnabled(False)
        #             self.AMDock.program_body.wdir_button.setEnabled(True)
        #         else:
        #             progress(self.AMDock.program_body, 0, 0, 10, finish=True, mess='Target Definition...')
        #             self.AMDock.program_body.prep_rec_lig_button.setEnabled(True)
        #             self.AMDock.program_body.wdir_button.setEnabled(False)
            # try:
            # if self.AMDock.prot_align and target_ext in ['pdb', 'ent'] and self.offtarget_ext in ['pdb', 'ent']:
            #     aln = subprocess.Popen([self.AMDock.ws.this_python, self.AMDock.ws.pymol, '-c',
            #                                 self.AMDock.ws.aln_pymol, '--', '-t',
            #                                 self.target_name + '.' + target_ext, '-o',
            #                                 self.offtarget_name + '.' + self.offtarget_ext], stdin=subprocess.PIPE,
            #                                stdout=subprocess.PIPE)
            #     aln.wait()
            # except:
            #     pass

    def load_ligand(self):
        data_file = QtGui.QFileDialog()
        data_file.setFileMode(QtGui.QFileDialog.AnyFile)
        data_file.setFilter("Ligand (*.pdb *.mol2 *.pdbqt)")

        if data_file.exec_():
            filenames = data_file.selectedFiles()
            self.AMDock.program_body.ligand.get_data(filenames)

            if self.AMDock.program_body.ligand.name == self.AMDock.program_body.target.name:
                self.same = same_protein(self, 'Ligand', self.AMDock.program_body.ligand.name, 'Target Protein', 'ligand')
                if self.same == QtGui.QMessageBox.Ok:
                    self.AMDock.program_body.ligand_text.clear()
                    self.AMDock.program_body.ligand_label.clear()
                    self.load_ligand()
            elif self.AMDock.program_body.ligand.name == self.AMDock.program_body.offtarget.name:
                self.same = same_protein(self, 'Ligand', self.AMDock.program_body.ligand.name, 'Off-Target Protein', 'ligand')
                if self.same == QtGui.QMessageBox.Ok:
                    self.AMDock.program_body.ligand_text.clear()
                    self.AMDock.program_body.ligand_label.clear()
                    self.load_ligand()
            else:
                self.AMDock.program_body.ligand_label.setText("Loaded Ligand from: %s" % self.AMDock.program_body.ligand.path)
                self.AMDock.program_body.ligand_text.setText(os.path.basename(self.AMDock.program_body.ligand.path))

                self.l_input = os.path.join(self.AMDock.input_dir, self.AMDock.program_body.ligand.name + '.' + self.AMDock.program_body.ligand.ext)

                if not self.copy_ligand():
                    self.AMDock.program_body.ligand_text.clear()
                    self.AMDock.program_body.ligand_label.clear()
                    self.load_ligand()

                #         # TODO: cambiar esto a preparar input
                # if self.input_ligand_ext == 'pdbqt':
                #     self.AMDock.ligand_prepare = False
                #     self.AMDock.ligand_pdbqt = str(os.path.basename(self.input_ligand_path)).replace(' ', '_')
                # else:
                #     self.AMDock.ligand_file = str(os.path.basename(self.input_ligand_path)).replace(' ', '_')
                #     self.AMDock.ligand_pdb = self.input_ligand_name + '.pdb'
                #
                # self.AMDock.input_lig = os.path.join(self.AMDock.input_dir,
                #                                        self.input_ligand_name.replace(' ', '_') + '.' +
                #                                        self.input_ligand_ext)
                #
                # try:
                #     shutil.copy('%s' % self.input_ligand_path, self.AMDock.input_lig)
                # except:
                #     nowdir = QtGui.QMessageBox.critical(self.AMDock., 'Error', 'The working directory was not found or '
                #             'it does not have permission for writing.\nPlease reset the program.', QtGui.QMessageBox.Ok)
                #
                # if self.AMDock.ligand_pdbqt is None:
                #     os.chdir(self.AMDock.input_dir)
                #     # try:
                #     mol = pybel.readfile(self.AMDock.ligand_file.split('.')[-1], self.AMDock.ligand_file).next()
                #     mol.removeh()
                #     if len(mol.atoms) > 100:
                #         self.wlig = QtGui.QMessageBox.warning(self.AMDock., 'Warning', 'The selected ligand has more '
                #                                                                       'of 100 heavy atoms.\nDoes he '
                #                                                                       'wish to continue?',
                #                                               QtGui.QMessageBox.Yes | QtGui.QMessageBox.No)
                #         if self.wlig == QtGui.QMessageBox.Yes:
                #             Converter(self.AMDock.ligand_file.split('.')[-1], self.AMDock.ligand_file,
                #                       self.AMDock.ligand_pdb)
                #             self.AMDock.heavy_atoms = HeavyAtoms(self.AMDock.ligand_file).imp()
                #             self.AMDock.rg = int(math.ceil(Gyrate(self.AMDock.ligand_pdb).gyrate()))
                #             os.chdir(self.AMDock.loc_project)
                #
                #             if self.AMDock.cr:
                #                 if self.AMDock.input_offtarget == None and self.AMDock.input_target == None:
                #                     progress(self.AMDock.program_body, 0, 0, 4, finish=True,
                #                              mess='Ligand Definition...')
                #                     self.AMDock.program_body.prep_rec_lig_button.setEnabled(False)
                #                     self.AMDock.program_body.wdir_button.setEnabled(True)
                #                 elif self.AMDock.input_offtarget == None and self.AMDock.input_target != None:
                #                     progress(self.AMDock.program_body, 0, 0, 7, finish=True,
                #                              mess='Ligand Definition...')
                #                     self.AMDock.program_body.prep_rec_lig_button.setEnabled(False)
                #                     self.AMDock.program_body.wdir_button.setEnabled(True)
                #                 elif self.AMDock.input_offtarget != None and self.AMDock.input_target == None:
                #                     progress(self.AMDock.program_body, 0, 0, 7, finish=True,
                #                              mess='Ligand Definition...')
                #                     self.AMDock.program_body.prep_rec_lig_button.setEnabled(False)
                #                     self.AMDock.program_body.wdir_button.setEnabled(True)
                #                 else:
                #                     progress(self.AMDock.program_body, 0, 0, 10, finish=True,
                #                              mess='Ligand Definition...')
                #                     self.AMDock.program_body.prep_rec_lig_button.setEnabled(True)
                #                     self.AMDock.program_body.wdir_button.setEnabled(False)
                #             else:
                #                 if self.AMDock.input_target is not None:
                #                     progress(self.AMDock.program_body, 0, 0, 10, finish=True,
                #                              mess='Ligand Definition...')
                #                     self.AMDock.program_body.prep_rec_lig_button.setEnabled(True)
                #                     self.AMDock.program_body.wdir_button.setEnabled(False)
                #                 else:
                #                     progress(self.AMDock.program_body, 0, 0, 6, finish=True,
                #                              mess='Ligand Definition...')
                #                     self.AMDock.program_body.prep_rec_lig_button.setEnabled(False)
                #                     self.AMDock.program_body.wdir_button.setEnabled(True)
                #         else:
                #             self.AMDock.ligand_file = None
                #             self.AMDock.program_body.ligand_text.clear()
                #             self.AMDock.program_body.ligand_label.clear()
                #             self.load_ligand()
                #
                #     else:
                #         Converter(self.AMDock.ligand_file.split('.')[-1], self.AMDock.ligand_file,
                #                   self.AMDock.ligand_pdb)
                #         self.AMDock.heavy_atoms = HeavyAtoms(self.AMDock.ligand_file).imp()
                #         self.AMDock.rg = int(math.ceil(Gyrate(self.AMDock.ligand_pdb).gyrate()))
                #         os.chdir(self.AMDock.loc_project)
                #
                #         if self.AMDock.cr:
                #             if self.AMDock.input_offtarget == None and self.AMDock.input_target is None:
                #                 progress(self.AMDock.program_body, 0, 0, 4, finish=True, mess='Ligand Definition...')
                #             elif self.AMDock.input_offtarget == None and self.AMDock.input_target is not None:
                #                 progress(self.AMDock.program_body, 0, 0, 7, finish=True, mess='Ligand Definition...')
                #             elif self.AMDock.input_offtarget != None and self.AMDock.input_target is None:
                #                 progress(self.AMDock.program_body, 0, 0, 7, finish=True, mess='Ligand Definition...')
                #             else:
                #                 progress(self.AMDock.program_body, 0, 0, 10, finish=True, mess='Ligand Definition...')
                #                 self.AMDock.program_body.prep_rec_lig_button.setEnabled(True)
                #                 self.AMDock.program_body.wdir_button.setEnabled(False)
                #         else:
                #             if self.AMDock.input_target is not None:
                #                 progress(self.AMDock.program_body, 0, 0, 10, finish=True, mess='Ligand Definition...')
                #                 self.AMDock.program_body.prep_rec_lig_button.setEnabled(True)
                #                 self.AMDock.program_body.wdir_button.setEnabled(False)
                #             else:
                #                 progress(self.AMDock.program_body, 0, 0, 6, finish=True, mess='Ligand Definition...')
                # else:
                #     self.AMDock.heavy_atoms = HeavyAtoms(self.input_ligand_path).imp()
                #     self.AMDock.rg = int(math.ceil(Gyrate(self.input_ligand_path).gyrate()))
                #     if self.AMDock.cr:
                #         if self.AMDock.input_offtarget == None and self.AMDock.input_target is None:
                #             progress(self.AMDock.program_body, 0, 0, 4, finish=True, mess='Ligand Definition...')
                #             self.AMDock.program_body.prep_rec_lig_button.setEnabled(False)
                #             self.AMDock.program_body.wdir_button.setEnabled(True)
                #         elif self.AMDock.input_offtarget == None and self.AMDock.input_target is not None:
                #             progress(self.AMDock.program_body, 0, 0, 7, finish=True, mess='Ligand Definition...')
                #             self.AMDock.program_body.prep_rec_lig_button.setEnabled(False)
                #             self.AMDock.program_body.wdir_button.setEnabled(True)
                #         elif self.AMDock.input_offtarget != None and self.AMDock.input_target is None:
                #             progress(self.AMDock.program_body, 0, 0, 7, finish=True, mess='Ligand Definition...')
                #             self.AMDock.program_body.prep_rec_lig_button.setEnabled(False)
                #             self.AMDock.program_body.wdir_button.setEnabled(True)
                #         else:
                #             progress(self.AMDock.program_body, 0, 0, 10, finish=True, mess='Ligand Definition...')
                #             self.AMDock.program_body.prep_rec_lig_button.setEnabled(True)
                #             self.AMDock.program_body.wdir_button.setEnabled(False)
                #     else:
                #         if self.AMDock.input_target != None:
                #             progress(self.AMDock.program_body, 0, 0, 10, finish=True, mess='Ligand Definition...')
                #             self.AMDock.program_body.prep_rec_lig_button.setEnabled(True)
                #             self.AMDock.program_body.wdir_button.setEnabled(False)
                #         else:
                #             progress(self.AMDock.program_body, 0, 0, 6, finish=True, mess='Ligand Definition...')
                #             self.AMDock.program_body.prep_rec_lig_button.setEnabled(False)
                #             self.AMDock.program_body.wdir_button.setEnabled(True)

    def load_amdock_file(self):
        data_file = QtGui.QFileDialog(caption='Open AMDock File')
        data_file.setFileMode(QtGui.QFileDialog.AnyFile)
        data_file.setFilter("AMDock File (*.amdock)")
        if data_file.exec_():
            filenames = data_file.selectedFiles()
            self.AMDock.amdock_path = str(filenames[0])
            self.AMDock.result_tab.import_text.setText(self.AMDock.amdock_path)
            self.AMDock.amdock_file = open(self.AMDock.amdock_path)
            alltable = []
            for line in self.AMDock.amdock_file:
                line = line.strip('\n')
                alltable.append(line)
                if not re.search('>', line):
                    continue
                if re.search('>> WORKING_DIRECTORY:', line):
                    if (line.split()[2]).strip() == os.path.split(self.AMDock.amdock_path)[0]:
                        self.AMDock.WDIR = (line.split()[2]).strip()
                    else:
                        self.AMDock.WDIR = os.path.split(self.AMDock.amdock_path)[0]
                elif re.search('>> DOCKING_PROGRAM:', line):
                    self.AMDock.docking_program = (line[20:]).strip()
                elif re.search('>> MODE:', line):
                    if (line.split()[2]).strip() == 'SIMPLE':
                        self.AMDock.program_mode = 'SIMPLE'
                        self.AMDock.cr = False
                        self.AMDock.scoring = False
                    elif (line.split()[2]).strip() == 'OFF-TARGET':
                        self.AMDock.program_mode = 'OFF-TARGET'
                        self.AMDock.cr = True
                        self.AMDock.scoring = False
                    else:
                        self.AMDock.program_mode = 'SCORING'
                        self.AMDock.cr = False
                        self.AMDock.scoring = True
                elif re.search('>> TARGET_PROTEIN:', line):
                    self.AMDock.protein_name = (line.split()[2]).strip()
                elif re.search('>  Target_Ligands:', line):
                    self.AMDock.ligands = (line[19:]).strip()
                elif re.search('>  Target_Metals(Zn):', line):
                    self.AMDock.metals = (line[22:]).strip()
                elif re.search('>> OFF-TARGET_PROTEIN:', line):
                    self.AMDock.analog_protein_name = (line.split()[2]).strip()
                elif re.search('>  Off-Target_Ligands:', line):
                    self.AMDock.analog_ligands = (line[22:]).strip()
                elif re.search('>  Off-Target_Metals(Zn):', line):
                    self.AMDock.analog_metals = (line[23:]).strip()
                elif re.search('>> LIGAND:', line):
                    self.AMDock.program_body.ligand.name = (line.split()[2]).strip()
                elif re.search('>  heavy_atoms:', line):
                    self.AMDock.heavy_atoms = (line.split()[2]).strip()
                elif re.search('>  all_poses_target_file:', line):
                    self.AMDock.result_file = (line.split()[2]).strip()
                elif re.search('>  best_pose_target_file:', line):
                    self.AMDock.best_result_file = (line.split()[2]).strip()
                elif re.search('>  all_poses_off-target_file:', line):
                    self.AMDock.analog_result_file = (line.split()[2]).strip()
                elif re.search('>  best_pose_off-target_file', line):
                    self.AMDock.best_analog_result_file = (line.split()[2]).strip()
            self.AMDock.amdock_file.close()
            complete = ''
            # 0
            if os.path.exists(self.AMDock.WDIR):
                complete += '0'
            else:
                complete += '1'
            # 1
            if os.path.exists(os.path.join(self.AMDock.WDIR, 'input')):
                complete += '0'
                self.AMDock.input_dir = os.path.join(self.AMDock.WDIR, 'input')
            else:
                complete += '1'
            # 2
            if os.path.exists(os.path.join(self.AMDock.WDIR, 'results')):
                complete += '0'
                self.AMDock.result_dir = os.path.join(self.AMDock.WDIR, 'results')
            else:
                complete += '1'
            # 3
            if os.path.exists(os.path.join(self.AMDock.input_dir, self.AMDock.protein_name + '_h.pdbqt')):
                complete += '0'
                self.AMDock.protein_pdbqt = os.path.join(self.AMDock.input_dir,
                                                           self.AMDock.protein_name + '_h.pdbqt')
            elif os.path.exists(os.path.join(self.AMDock.input_dir, self.AMDock.protein_name + '.pdbqt')):
                complete += '0'
                self.AMDock.protein_pdbqt = os.path.join(self.AMDock.input_dir,
                                                           self.AMDock.protein_name + '.pdbqt')
            else:
                complete += '1'
            if self.AMDock.program_mode is not 'SCORING':
                # 4
                if os.path.exists(os.path.join(self.AMDock.result_dir, self.AMDock.result_file)):
                    complete += '0'
                else:
                    complete += '1'
                # 5
                if os.path.exists(os.path.join(self.AMDock.result_dir, self.AMDock.best_result_file)):
                    complete += '0'
                else:
                    complete += '1'
                if self.AMDock.program_mode is 'OFF-TARGET':
                    # 6
                    if os.path.exists(
                            os.path.join(self.AMDock.input_dir, self.AMDock.analog_protein_name + '_h.pdbqt')):
                        complete += '0'
                        self.AMDock.analog_protein_pdbqt = os.path.join(self.AMDock.input_dir,
                                                                          self.AMDock.analog_protein_name + '_h.pdbqt')
                    elif os.path.exists(
                            os.path.join(self.AMDock.input_dir, self.AMDock.analog_protein_name + '.pdbqt')):
                        complete += '0'
                        self.AMDock.analog_protein_pdbqt = os.path.join(self.AMDock.input_dir,
                                                                          self.AMDock.analog_protein_name + '.pdbqt')
                    else:
                        complete += '1'
                    # 7
                    if self.AMDock.analog_result_file != '':
                        if os.path.exists(os.path.join(self.AMDock.result_dir, self.AMDock.analog_result_file)):
                            complete += '0'
                        else:
                            complete += '1'
                    else:
                        complete += '1'
                    # 8
                    if self.AMDock.best_analog_result_file != '':
                        if os.path.exists(
                                os.path.join(self.AMDock.result_dir, self.AMDock.best_analog_result_file)):
                            complete += '0'
                        else:
                            complete += '1'
                    else:
                        complete += '1'
            else:
                # 9
                if os.path.exists(os.path.join(self.AMDock.input_dir, self.AMDock.ligand_name + '_h.pdbqt')):
                    complete += '0'
                    self.AMDock.ligand_pdbqt = os.path.join(self.AMDock.input_dir,
                                                              self.AMDock.ligand_name + '_h.pdbqt')
                elif os.path.exists(os.path.join(self.AMDock.input_dir, self.AMDock.ligand_name + '.pdbqt')):
                    complete += '0'
                    self.AMDock.ligand_pdbqt = os.path.join(self.AMDock.input_dir,
                                                              self.AMDock.ligand_name + '.pdbqt')
                else:
                    complete += '1'

            d = 0
            mode1 = 0
            mode2 = 0
            for x in alltable:
                if x.startswith('|'):
                    if 'POSES' in x:
                        if mode1 == 0:
                            mode1 = d
                        else:
                            mode2 = d
                d += 1
            f = 0
            table1 = []
            for c in alltable:
                if c.startswith('|'):
                    if mode1 is not 0 and f > mode1 + 2:
                        if '__' in c:
                            break
                        else:
                            table1.append(c.split()[1::2])
                f += 1
            if self.AMDock.cr:
                ff = 0
                table2 = []
                for c in alltable:
                    if c.startswith('|'):
                        if mode2 is not 0 and ff > mode2 + 2:
                            if '__' in c:
                                break
                            else:
                                table2.append(c.split()[1::2])
                    ff += 1
                return table1, complete, table2
            else:
                return table1, complete
